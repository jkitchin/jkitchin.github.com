(defun get-nth-src-block (nth info)
(org-element-map (org-element-parse-buffer) 'src-block 
    (lambda (src-block) 
      (setq language (org-element-property :language src-block))
      (setq code (org-element-property :value src-block))
      (setq filename (cond ((string= language "python") (format "../media/py-%d.py" counter))
                           ((string= language "emacs-lisp") (format "../media/el-%d.elisp" counter))))
      (setq counter (+ counter 1))
      (with-temp-buffer
        (insert code)
        (write-region (point-min) (point-max) filename))
      (princ (format "Wrote %s\n" filename)))))


(let ((counter 0))

  (defun ox-mrkup-filter-src-block (text back-end info)
   (get-nth-src-block counter (org-element-parse-buffer))
    ;; we are processing a src block. Increment counter
    (setq counter (+ counter 1))
    (format "%s 
" text))

  (let ((org-export-filter-src-block-functions '(ox-mrkup-filter-src-block))
        (async nil)
        (subtreep nil)
        (visible-only nil)
        (body-only t)
        (ext-plist '()))
    (org-html-export-as-html async subtreep visible-only body-only ext-plist)))



