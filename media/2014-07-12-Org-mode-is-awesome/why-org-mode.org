#+TITLE: Why org-mode?

* Title slide							      :slide:
#+BEGIN_SRC emacs-lisp-slide
(org-show-animate '("Why org-mode is awesome!" "http://orgmode.org" "John Kitchin"))
#+END_SRC
* Fabulous outline mode						      :slide:

org-mode is superb for outlining and structured text.

** Introduction

Org mode is for keeping notes, maintaining TODO lists, planning projects, and authoring documents with a fast and effective plain-text system.

http://orgmode.org

Use TAB, and S-TAB to collapse and expand headings.

Fast navigation
Put cursor at first character of headline. Use speed commands for easy navigation and action

n next visible headline
p previous visible headline
c cycle visibility

j jump - interesting, takes some getting used to
? see what else you can do

Or use your mouse for some of these
** Methods



*** Change levels easily

Put cursor on a headline, and use M-right M-left to change the headline level

Use M-S-right and M-S-left to change all levels in subtrees

With speed commands
r demote subtree
l promote subtree
R demote subtree and all subsubtrees
L promote subtree and all subsubtrees

*** Rearrange levels easily
Put cursor on a headline, and use M-up and M-down to change the order of headlines

With speed commands
U move subtree up
D move subtree down

*** Conclusions
Org-mode is *very* good at outlines.

*** Navigation is pretty sweet
Put cursor here: <- Press C-c % to remember the location.

Move somewhere else to check something. Press C-c & to get back there.

* Task management [100%] 					      :slide:
org-mode is also phenomenal for task management.

How? TODO, deadlines and the agenda.

** DONE prepare this talk
   CLOSED: [2014-06-27 Fri 16:25]
** DONE give this talk
   CLOSED: [2014-06-27 Fri 16:25]
** Checkboxes [3/3]
- [X] task 1
- [X] task 2
- [X] task 3

* Task deadlines and the agenda					      :slide:

** DONE Finish this talk
   CLOSED: [2014-06-27 Fri 16:26] DEADLINE: <2014-06-22 Sun>
** DONE Publish to youtube
   CLOSED: [2014-06-27 Fri 16:26] DEADLINE: <2014-06-27 Fri>

It is easy to change the dates with shift-arrow keys. Put your cursor on a part of the data and use S-up and S-down to change the date.

** Check your agenda

Type C-c a < a to see an agenda for this file.

With cursor at beginning of headline:
< to narrow to headline
v to create agenda, then press a to get TODO items with deadlines
* Capture tasks as they come in					      :slide:
- You are working on something, maybe giving a talk

- Suddenly the phone rings, it is the President of the United States

- You want to take notes on the conversation, but you do not want to interrupt your work setup

- Capture to the rescue. Type C-c c

- select the template, fill it out, Type C-c C-c and back to work.

* Tags and Properties						      :slide:
org-mode allows you to tag headlines, and set properties on them.

Let us see how that might be helpful

[[file:~/Dropbox/org-mode/contacts.org]]

You type C-c a m
and then you can filter by tags. 

Or try EMAIL={kitchin} to find an entry with an EMAIL property that matches kitchin

Speed commands
Put cursor at beginning of headline
/ create a sparse tree based on search

* Links, links, links						      :slide:

places in the document: [[end]] or sections: [[*some%20subsection][some subsection]]. Good for document navigation.

files: file:blog.org::415 at line 415
[[file:blog.org::*Autogenerating%20functions%20in%20emacs-lisp][file:blog.org::*Autogenerating functions in emacs-lisp]] or to a headline

urls: http://kitchingroup.cheme.cmu.edu

Info link: [[info:org#Hyperlinks]]

Link to an email in gnus:
[[gnus:nntp%2Bnews.gmane.org:gmane.emacs.orgmode#87ioo17zje.fsf@ericabrahamsen.net][gnus:nntp+news.gmane.org:gmane.emacs.orgmode#87ioo17zje.fsf@ericabrahamsen.net]]

Citations: cite:mehta-2014-ident-poten or doi:10.1021/am4059149

** some subsection

This is called a "radio target" <<end>>. You can make links to them to jump around quickly.

* Inline images							      :slide:

You can have images inline, and see them.

[[./images/hatched-symbols.png]]

* Tables
** Creating tables						      :slide:

So easy. Start with | at the beginning of a line.

|    x |       y |
|   12 |      34 |
|    2 |       4 |
| jfds | fjkdsla |
|      |         |
Move around and realign your table with TAB and S-TAB,

** Have a table with wide columns? 				      :slide:

| number | text                                     |
|      0 | A very long sentence that takes up space |
|      1 | a short one                              | 

Shorten the column for readability with <n>. Want numbers left justifed? use <l>
| number | text                                     |
|      0 | A very long sentence that takes up space |
|      1 | a short one                              |
|        |                                          |

** Sorting tables						      :slide:

org-table-sort-lines, alphabetically, or numerically , in ascending or descending order.

If you do that a lot, remember C-c ^

| y | x |
|---+---|
| 2 | 4 |
| 8 | 9 |
| 7 | 2 |
| 2 | 1 |

Don't forget M-arrows to move rows and columns around!

** Delete and add rows and columns 				      :slide:

org-table-insert-row      M-S-down
org-table-kill-row        M-S-up
org-table-insert-column   M-S-right
org-table-delete-column   M-S-left

| x    | y |   |
|------+---+---|
| test | 2 |   |
| John | 2 |   |
| Erin | 7 |   |
| Andy | 2 |   |
| Zoe  | 1 |   |

** Convert a region to a table

Have a csv dataset you want to convert to a table: Select it and run M-x org-table-convert-region.

If you do this a lot, remember C-c |

And you can add a horizontal line below your cursor with C-c -

x, y
1, 3 
3, 4
5, 6
7, 8
8, 9

Need to know the sum of a column? Run C-c + on the column, and check the minibuffer. Paste it somewhere with C-y.
  
** Import a table from a data file				      :slide:
See this file [[file+emacs:data.tab]]

Run M-x org-table-import to insert it here.
| x | y |
|---+---|
| 1 | 2 |
| 4 | 2 |
| 2 | 7 |
| 9 | 8 |



C-c - to get that line.
** Convert table to LaTeX					      :slide:

Need a quick way to convert a table to LaTeX code?

Highlight the region and run C-c C-e C-b l L to get the LaTeX code

| x    | y |
|------+---|
| John | 2 |
| Erin | 7 |
| Andy | 2 |
| Zoe  | 1 |

Want HTML instead?  C-c C-e C-b h H

* Equations							      :slide:

You can put equations in your documents: $\int_0^x \sin x = 0.5$. Solve for $x$. 

Show the equation code: C-c C-c

Toggle them as images: elisp:org-preview-latex-fragment or C-c C-x C-l

Use symbols like \propto, or \alpha, with superscripts like x^2 or subscripts like CH_4. Toggle symbol overlays like this:

elisp:org-toggle-pretty-entities

* Embedded code

** Use executable code in more than one language		      :slide:

describing how to add two numbers

$e^x=5$
#+BEGIN_SRC python
print 7 + 78
#+END_SRC

#+RESULTS:
: 85


#+BEGIN_SRC emacs-lisp
(+ 7 7)
#+END_SRC

#+RESULTS:
: 14


#+BEGIN_SRC R 
sum(c(6, 6))
#+END_SRC

#+RESULTS:
: [1] 12



#+BEGIN_SRC perl :results output
print 6 + 6
#+END_SRC

#+RESULTS:
: 12


#+BEGIN_SRC ruby
print 6 + 6
#+END_SRC

#+RESULTS:
: 12


#+BEGIN_SRC matlab
% Only on Mac and Linux. 
#+END_SRC

What, you want inline code? You mean show that 2 + 2 = src_emacs-lisp{(+ 32 2)} =34=. Maybe you prefer inline python: src_python{return 2 + 2} =4=.

Check out how that exports.

** Use data in a table in code					      :slide:

Tables in org-mode are sources of data. Give a table a name.

#+tblname: table-data
| x         | y |
|-----------+---|
| John      | 2 |
| Erin      | 7 |
| Andy      | 2 |
| Zoe       | 1 |
| fred      | 5 |
| long-nmae | 7 |
|           |   |

Use it as a variable in a code block

#+BEGIN_SRC python :var data=table-data
print data[0]
#+END_SRC

#+RESULTS:
: ['John', 2]


We might as well as make a link back to our table ref:table-data. Go ahead, click on it.

** Make your figures in your document 				      :slide:

#+BEGIN_SRC python
import matplotlib.pyplot as plt

plt.plot([1,2,3,4])
plt.savefig('images/silly-plot.png')
#+END_SRC

#+RESULTS:

[[./images/silly-plot.png]]

You can toggle inline images if you do want to see them: elisp:org-toggle-inline-images

** Write programs to your disk					      :slide:

#+BEGIN_SRC python :tangle hello_world.py
print "Hello world"
#+END_SRC

Tangle the file: elisp:org-babel-tangle

Now, run it:

#+BEGIN_SRC sh
python hello_world.py
#+END_SRC

#+RESULTS:
: Hello world


check out the file: file:hello_world.py

** Compiled languages work too - Java 				      :slide:

#+BEGIN_SRC java :tangle hello.java
public class hello {

    public static void main(String[] args) {
        System.out.println("Hello, World from java");
    }
}
#+END_SRC

Tangle the file

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.java |


Compile it:
#+BEGIN_SRC sh
javac hello.java
#+END_SRC

#+RESULTS:

Now, run the code.

#+BEGIN_SRC sh
java hello
#+END_SRC

#+RESULTS:
: Hello, World from java


** C								      :slide:

#+BEGIN_SRC C :tangle hello.c
//C hello world example
#include <stdio.h>

int main()
{
  printf("Hello world from C\n");
  return 0;
}
#+END_SRC

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.c |

Compile:

#+BEGIN_SRC sh
gcc hello.c -o hello
#+END_SRC

#+RESULTS:

#+BEGIN_SRC sh
./hello
#+END_SRC





** C++								      :slide:

#+BEGIN_SRC c++ :tangle hello.c++
#include <iostream>

main()
{
  std::cout << "Hello World++! ";
}
#+END_SRC

You can also tangle a Makefile.

#+BEGIN_SRC makefile :tangle Makefile
hello:	hello.c++
	g++ hello.c++ -o a.out
#+END_SRC

Now, we tangle the code out to the files.
#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC



Next, we run make with the target to compile the code. You could also simply write the compiler command here.

#+BEGIN_SRC sh
make hello
#+END_SRC

#+RESULTS:
: g++ hello.c++ -o a.out


And now get the output by running the program.

#+BEGIN_SRC sh
./a.out
#+END_SRC

#+RESULTS:
: Hello World++! 


** Fortran							      :slide:
#+BEGIN_SRC fortran :tangle hello.f90
       program hello
          print *, "Hello World from Fortran!"
       end program hello
#+END_SRC

Tangle the file

#+BEGIN_SRC emacs-lisp
(org-babel-tangle)
#+END_SRC

#+RESULTS:
| hello.f90 |

Compile the program
#+BEGIN_SRC sh
gfortran hello.f90 -o hello-fortran
#+END_SRC

#+RESULTS:

Run the program.
#+BEGIN_SRC sh
./hello-fortran
#+END_SRC



** There is much more language support 				      :slide:

The support for editable, executable code blocks is large, and growing.

#+BEGIN_SRC emacs-lisp
(directory-files "../../kitchingroup/jmax/org-mode-bleeding-edge/lisp" nil "ob-[^.]*\.el\\b")
#+END_SRC

#+RESULTS:
| ob-C.el | ob-R.el | ob-asymptote.el | ob-awk.el | ob-calc.el | ob-clojure.el | ob-comint.el | ob-core.el | ob-css.el | ob-ditaa.el | ob-dot.el | ob-emacs-lisp.el | ob-eval.el | ob-exp.el | ob-fortran.el | ob-gnuplot.el | ob-haskell.el | ob-io.el | ob-java.el | ob-js.el | ob-keys.el | ob-latex.el | ob-ledger.el | ob-lilypond.el | ob-lisp.el | ob-lob.el | ob-makefile.el | ob-matlab.el | ob-maxima.el | ob-mscgen.el | ob-ocaml.el | ob-octave.el | ob-org.el | ob-perl.el | ob-picolisp.el | ob-plantuml.el | ob-python.el | ob-ref.el | ob-ruby.el | ob-sass.el | ob-scala.el | ob-scheme.el | ob-screen.el | ob-sh.el | ob-shen.el | ob-sql.el | ob-sqlite.el | ob-table.el | ob-tangle.el |

* Export to other formats
** Create LaTeX/PDF from your org-file				      :slide:

see [[file:~/Dropbox/CMU/manuscripts/03-CuPd_paper/manuscript.org]]

Gets converted to:

[[file:~/Dropbox/CMU/manuscripts/03-CuPd_paper/manuscript.pdf]]

** Create HTML							      :slide:

We can launch this in a browser. Of course you can have /italics/, *bold*, _underlined_, =verbatim=, and ~code~.

Consider this code block:

#+BEGIN_SRC python 
a = [1, 2, 3, 4]          
b = [x**2 for x in a]     

print b
#+END_SRC

That roughly is how http://kitchingroup.cheme.cmu.edu is made. We write an org-file, and export it to the blog html format.

Try it: C-c C-e h o.

* Extensibility							      :slide:
org-mode is a testament to extensibility. Checkout the [[./../../kitchingroup/jmax/org-mode-bleeding-edge/contrib/lisp][contrib]] directory for some inspiration.

* Want to try it yourself?					      :slide:
Start out with http://github.com/jkitchin/jmax

It is pre-configured to do most of what you saw here today. For windows has a prebuilt Emacs to get started with. You have to install LaTeX, python, and other languages if you are going to use them.

There are other options out there too:

I have used both of these in the past.

- Prelude https://github.com/bbatsov/prelude
- Emacs-starter-kit http://eschulte.github.io/emacs24-starter-kit/

Recap: [[elisp:(progn (widen)(require 'org-toc) (org-toc-show))]]

* So, why aren't you using org-mode?				      :slide:
#+BEGIN_SRC emacs-lisp-slide
(org-show-animate '("So" "..." "why aren't you" "using org-mode?"))
#+END_SRC
