* TODO A helm-mu4e contact selector
  :PROPERTIES:
  :categories: emacs,email,helm
  :date:     2015/03/14 10:21:09
  :updated:  2015/03/14 10:21:09
  :END:
I have been using [[http://www.djcbsoftware.nl/code/mu/mu4e.html][mu4e]] in Emacs for email for about three months now. It is pretty good, and I hardly ever use the gmail web interface any more. The email completion in mu4e is ok, but I am frequently surprised at what it does not find, and totally spoiled by how good Gmail is at this. The built in completion seems to get lost if you don't start the search with the first few letters. Not always, but too often for me. I don't always remember the first letters, and want to search by name, or company. I would love to search by tags in org-contacts. This should be simple in helm, where you can build up candidates with different bits of information. Here I explore a helm interface, which I think might be better than the built in mu4e support, and even be better than gmail.

In my dream email completer, I want some easy way to define my own groups, I want to use org-contacts (and its tags), and I want every email address in the mails I have in my archive as completion candidates.  helm supports multiple sources, so I initially tried a separate source for each of these. Preliminary efforts suggested it is not possible to mark multiple selections from different sources and pass them all to one function. So, we combine all email candidates into one list of (searchable-string . email-address) cons cells. To get an idea of how many contacts we are looking at:

Here is what I have in my org-contacts file:
#+BEGIN_SRC emacs-lisp
(length (org-contacts-db))
#+END_SRC

#+RESULTS:
: 173

And here is what mu4e knows about. Interestingly, it takes a while for this variable to get populated because the request is asynchronous. After the first time though it sticks around. I think just opening mu4e will populate this variable.
#+BEGIN_SRC emacs-lisp
(length mu4e~contacts-for-completion)
#+END_SRC

#+RESULTS:
: 12717

So, I have close to 13,000 potential email addresses to choose from. For my email groups, I will just use a list of cons cells like (group-name . "comma-separated emails"). Then, I will loop through the org-contacts-db and the mu4e completion list to make the helm candidates. Finally, we add some functions to open our org-contact, and to tag org-contacts so it is easier to make groups.

Here is the code I have been using.

#+BEGIN_SRC emacs-lisp
;; here we set aliases for groups.
(setq email-groups
      '(("ms" . "email1, email2")
        ("phd" . "email3, email4")))


(defun org-contacts-open-from-email (email)
  "Open org-contact with matching EMAIL. If no match, create new
entry with prompts for first and last name."
  (let ((contact (catch 'contact
		   (loop for contact in  (org-contacts-db)
			 do
			 (when (string= email (cdr (assoc "EMAIL" (elt contact 2))))
			   (throw 'contact contact))))))

    (unless contact
		(set-buffer (find-file-noselect (ido-completing-read
						 "Select org-contact file: "
						 org-contacts-files)))
		(goto-char (point-max))
		(insert (format  "\n* %s %s\n"
				 (read-input "First name: ")
				 (read-input "Last name: ")))
		(org-entry-put (point) "EMAIL" email)
		(save-buffer))

    (when contact
      (find-file  (cdr (assoc "FILE" (elt contact 2))))
      (goto-char (elt contact 1))
      (show-subtree))))


(defun org-contacts-tag-selection (selection)
  "Prompts you for a tag, and tags each entry in org-contacts
that has a matching email in `helm-marked-candidates'. Ignore
emails that are not in an org-contact file. I am not sure what
the best thing to do there is. Probably prompt for a file, and
add an entry to the end of it."
  (save-excursion
    (let ((tag (read-input "Tag: ")))
      (loop for email in (helm-marked-candidates)
	    do
	    (let ((contact (catch 'contact
			     (loop for contact in  (org-contacts-db)
				   do
				   (when (string=
					  email
					  (cdr (assoc
						"EMAIL"
						(elt contact 2))))
				     (throw 'contact contact))))))
	      ;; add new contact and tag it
	      (unless contact
		(set-buffer (find-file-noselect (ido-completing-read
						 "Select org-contact file: "
						 org-contacts-files)))
		(goto-char (point-max))
		(insert (format  "\n* %s %s\n"
				 (read-input "First name: ")
				 (read-input "Last name: ")))
		(org-entry-put (point) "EMAIL" email)
		(org-set-tags-to (list tag))
		(save-buffer))
	      ;; update tags on existing entry
	      (when contact
		(find-file-noselect  (cdr (assoc "FILE" (elt contact 2))))
                (set-buffer (marker-buffer (elt contact 1)))
		(goto-char (elt contact 1))
		(org-set-tags-to (append (org-get-tags) (list tag)))))))))


(defun j-insert-emails ()
  "Helm interface to email addresses"
  (interactive)

  (helm :sources `(((name . "Email address candidates")
		   (candidates . ,(append
				   ;; my aliases
				   email-groups
				   ;; org-contacts
				   (loop for contact in (org-contacts-db)
					 collect
					 (cons (format
						"%s %s %s <%s> org-contact"
						(cdr (assoc "FIRSTNAME" (elt contact 2)))
						(cdr (assoc "LASTNAME" (elt contact 2)))
						(cdr (assoc "TAGS" (elt contact 2)))
						(cdr (assoc "EMAIL" (elt contact 2))))
					       (cdr (assoc "EMAIL" (elt contact 2)))))
				   ;; mu contacts
				   (loop for contact in mu4e~contacts-for-completion
					 collect (cons contact contact))))
		   ;; only action is to insert string at point.
		   (action . (("insert" . (lambda (x)
					    (insert
					     (mapconcat
					      'identity
					      (helm-marked-candidates)
					      ","))))
			      ("open" . org-contacts-open-from-email)
			      ("tag"  . org-contacts-tag-selection)))))))

;; Finally, let us bind this to something probably convenient. I use c-c ] for
;; citations. Lets try that in compose mode.
(define-key mu4e-compose-mode-map "\C-c]" 'j-insert-emails)
#+END_SRC
#+RESULTS:
: j-insert-emails

Now, I have a sweet helm interface with nearly 13,000 email candidates (there is a decent amount of duplication in this list, and some garbage emails from spam, but helm is so fast, this does not bother me). I can pretty quickly narrow to any tagged set of emails from org-contacts with a search that looks like :phd: for example, or [^phd]:group: to get org-contacts tagged group, but not phd. I can narrow the selection on first name, lastname, parts of email addresses, tags in org-contacts, etc... I can open a contact, or tag contacts, even add new contacts to org-contacts. I have been using this for a few weeks, and so far I like it. Occasionally I find mu4e~contacts-for-completion is empty, and then I only get my org-contacts emails, but that seems to only happen when I first open emacs. Since Emacs is usually open for days at a time, this has not been an issue very often.
