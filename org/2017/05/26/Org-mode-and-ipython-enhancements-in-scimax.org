* Org-mode and ipython enhancements in scimax
  :PROPERTIES:
  :categories: emacs,orgmode,ipython
  :date:     2017/05/26 16:54:16
  :updated:  2017/05/26 16:54:16
  :END:

We have made some improvements to using Ipython in org-mode in the past including:

1. [[http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/][Inline figures]]
2. [[http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/][Export to Jupyter notebooks]]

Today I will talk about a few new features and improvements I have introduced to scimax for using org-mode and Ipython together.

The video for this post might be more obvious than the post:
#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/dMira3QsUdg" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT

** Some convenience functions

There are a few nice shortcuts in the Jupyter notebook. Now we have some convenient commands in scimax to mimic those. My favorites are adding cells above or below the current cell. You can insert a new src block above the current one with (M-x =org-babel-insert-block=). You can use a prefix arg to insert it below the current block.


#+BEGIN_SRC ipython
# code
#+END_SRC


#+BEGIN_SRC ipython
# below
#+END_SRC

#+BEGIN_SRC ipython :session :results output drawer
# some code
#+END_SRC

I am particularly fond of splitting a large block into two smaller blocks. Use (M-x =org-babel-split-src-block=) to do that and leave the point in the upper block. Use a prefix arg to leave the point in the lower block.

#+BEGIN_SRC ipython :session :results output drawer
# lots of code in large block
#+END_SRC

#+BEGIN_SRC ipython :session :results output drawer
# Even more code
#+END_SRC

#+BEGIN_SRC ipython :session :results output drawer
# The end of the long block
#+END_SRC

You can execute all the blocks up to the current point with (M-x =org-babel-execute-to-point=).

** ob-ipython-inspect works

In the original ob-ipython I found that ob-ipython-inspect did not work unless you were in special edit mode. That is too inconvenient. I modified a few functions to work directly from the org-buffer. I bind this to M-. in org-mode.

#+BEGIN_SRC ipython :session :results output drawer
%matplotlib inline
import numpy as np

import matplotlib.pyplot as plt

# Compute areas and colors
N = 150
r = 2 * np.random.rand(N)
theta = 2 * np.pi * np.random.rand(N)
area = 200 * r**2
colors = theta

ax = plt.subplot(111, projection='polar')
c = ax.scatter(theta, r, c=colors, s=area, cmap='hsv', alpha=0.75)
#+END_SRC

#+RESULTS:
:RESULTS:

<matplotlib.figure.Figure at 0x114ded710>
[[file:ipython-inline-images/ob-ipython-1758dfdd7a96829c50791c7cc9a39f3a.png]]
:END:



** Getting selective output from Ipython

Out of the box Ipython returns a lot of results. This block, for example returns a plain text, image and latex result as output.

#+BEGIN_SRC ipython :session :results output drawer
from sympy import *
# commenting out init_printing() results in no output
init_printing()

var('x y')
x**2 + y
#+END_SRC

#+RESULTS:
:RESULTS:

 2
x  + y
[[file:ipython-inline-images/ob-ipython-da6fb3a34919a4f694cfaae45b6f0868.png]]
#+BEGIN_EXPORT latex
$$x^{2} + y$$
#+END_EXPORT
:END:


We can select which one we want with a new header argument :ob-ipython-results. For this block you can give it the value of text/plain, text/latex or image/png.


#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results text/plain
var('x y')
x**2 + y
#+END_SRC

#+RESULTS:
:RESULTS:
 2
x  + y
:END:

Or to get the image:


#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results image/png
var('x y')
x**2 + y
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:ipython-inline-images/ob-ipython-da6fb3a34919a4f694cfaae45b6f0868.png]]
:END:


This shows up with [[https://emacs.stackexchange.com/questions/33005/python-org-mode-babel-output-column-headers-misaligned/33016#33016][pandas too]]. This block creates a table of data and then shows the first 5 rows. Ipython returns both plain text and html here.


#+BEGIN_SRC ipython :session :results output drawer
import pandas as pd
import numpy as np
import datetime as dt

def makeSim(nHosps, nPatients):
    df = pd.DataFrame()
    df['patientid'] = range(nPatients)
    df['hospid'] = np.random.randint(0, nHosps, nPatients)
    df['sex'] = np.random.randint(0, 2, nPatients)
    df['age'] = np.random.normal(65,18, nPatients)
    df['race'] = np.random.randint(0, 4, nPatients)
    df['cptCode'] = np.random.randint(1, 100, nPatients)
    df['rdm30d'] = np.random.uniform(0, 1, nPatients) < 0.1
    df['mort30d'] = np.random.uniform(0, 1, nPatients) < 0.2
    df['los'] = np.random.normal(8, 2, nPatients)
    return df

discharges = makeSim(50, 10000)
discharges.head()
#+END_SRC

#+RESULTS:
:RESULTS:

   patientid  hospid  sex        age  race  cptCode rdm30d mort30d        los
0          0      10    1  64.311947     0        8  False   False   8.036793
1          1       6    0  82.951484     1       73   True   False   7.996024
2          2      27    1  53.064501     3       95  False   False   9.015144
3          3      37    0  64.799128     0       93  False   False  10.099032
4          4      46    0  99.111394     2       25  False   False  11.711427
#+BEGIN_EXPORT HTML
<div>
<table border="1" class="dataframe">
  <thead>
    <tr style="text-align: right;">
      <th></th>
      <th>patientid</th>
      <th>hospid</th>
      <th>sex</th>
      <th>age</th>
      <th>race</th>
      <th>cptCode</th>
      <th>rdm30d</th>
      <th>mort30d</th>
      <th>los</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <th>0</th>
      <td>0</td>
      <td>10</td>
      <td>1</td>
      <td>64.311947</td>
      <td>0</td>
      <td>8</td>
      <td>False</td>
      <td>False</td>
      <td>8.036793</td>
    </tr>
    <tr>
      <th>1</th>
      <td>1</td>
      <td>6</td>
      <td>0</td>
      <td>82.951484</td>
      <td>1</td>
      <td>73</td>
      <td>True</td>
      <td>False</td>
      <td>7.996024</td>
    </tr>
    <tr>
      <th>2</th>
      <td>2</td>
      <td>27</td>
      <td>1</td>
      <td>53.064501</td>
      <td>3</td>
      <td>95</td>
      <td>False</td>
      <td>False</td>
      <td>9.015144</td>
    </tr>
    <tr>
      <th>3</th>
      <td>3</td>
      <td>37</td>
      <td>0</td>
      <td>64.799128</td>
      <td>0</td>
      <td>93</td>
      <td>False</td>
      <td>False</td>
      <td>10.099032</td>
    </tr>
    <tr>
      <th>4</th>
      <td>4</td>
      <td>46</td>
      <td>0</td>
      <td>99.111394</td>
      <td>2</td>
      <td>25</td>
      <td>False</td>
      <td>False</td>
      <td>11.711427</td>
    </tr>
  </tbody>
</table>
</div>
#+END_EXPORT
:END:


We can use the header to select only the plain text output!

#+BEGIN_SRC ipython :session :results output drawer :ob-ipython-results text/plain
import pandas as pd
import numpy as np
import datetime as dt

def makeSim(nHosps, nPatients):
    df = pd.DataFrame()
    df['patientid'] = range(nPatients)
    df['hospid'] = np.random.randint(0, nHosps, nPatients)
    df['sex'] = np.random.randint(0, 2, nPatients)
    df['age'] = np.random.normal(65,18, nPatients)
    df['race'] = np.random.randint(0, 4, nPatients)
    df['cptCode'] = np.random.randint(1, 100, nPatients)
    df['rdm30d'] = np.random.uniform(0, 1, nPatients) < 0.1
    df['mort30d'] = np.random.uniform(0, 1, nPatients) < 0.2
    df['los'] = np.random.normal(8, 2, nPatients)
    return df

discharges = makeSim(50, 10000)
discharges.head()
#+END_SRC

#+RESULTS:
:RESULTS:
   patientid  hospid  sex        age  race  cptCode rdm30d mort30d        los
0          0      21    0  73.633836     1       38  False   False   7.144019
1          1      16    1  67.518804     3       23  False   False   3.340534
2          2      15    0  44.139033     0        8  False   False   9.258706
3          3      29    1  45.510276     2        5  False   False  10.590245
4          4       7    0  52.974924     2        4  False    True   5.811064
:END:

** Where was that error?

A somewhat annoying feature of running cells in org-mode is when there is an exception there has not been a good way to jump to the line that caused the error to edit it. The lines in the src block are not numbered, so in a large block it can be tedious to find the line. In scimax, when you get an exception it will number the lines in the src block, and when you press q in the exception traceback buffer it will jump to the line in the block where the error occurred.

#+BEGIN_SRC ipython :session :results output drawer
print(1)
#raise Exception('Here')
print(2)
#+END_SRC

#+RESULTS:
:RESULTS:
1
2

:END:



If you don't like the numbers add this to your init file:

#+BEGIN_SRC emacs-lisp
(setq ob-ipython-number-on-exception nil)
#+END_SRC

** Asynchronous Ipython

I have made a few improvements to the asynchronous workflow in Ipython. We now have a calculation queue, so you can use C-c C-c to execute several blocks in a row, and they will run asynchronously in the order you ran them. While they are running you can continue using Emacs, e.g. writing that paper, reading email, checking RSS feeds, tetris, ... This also lets you run all the blocks up to the current point (M-x =org-babel-execute-ipython-buffer-to-point-async=) or the whole buffer (of Ipython) blocks asynchronously (M-x =org-babel-execute-ipython-buffer-async=).

To turn this on by default put this in your init file:

#+BEGIN_SRC emacs-lisp
(setq org-babel-async-ipython t)
#+END_SRC

This requires all src blocks to have a name, and running the block will give it a name if you have not named the block. By default we use human-readable names. While the block is running, there will be a link indicating it is running. You can click on the link to cancel it. Running subsequent blocks will queue them to be run when the first block is done.

Here is an example:

#+NAME: four-oranges-seventeen-virginia
#+BEGIN_SRC ipython :session :results output
import time
time.sleep(5)
a = 5
print('done')
#+END_SRC


#+NAME: salami-india-paris-may
#+BEGIN_SRC ipython :session :results output drawer
print(3 * a)
#+END_SRC

#+RESULTS: salami-india-paris-may
:RESULTS:
15
:END:




Occasionally you will run into an issue. You can clear the queue with =org-babel-async-ipython-clear-queue=.