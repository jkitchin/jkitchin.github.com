* for-else loops
  :PROPERTIES:
  :categories: programming
  :date:     2013/07/08 21:12:05
  :updated:  2013/07/08 21:12:17
  :END:

I just learned of for/else loops (http://pyvideo.org/video/1780/transforming-code-into-beautiful-idiomatic-pytho). They are interesting enough to write about. The idea is that there is an "else" clause of a for loop that is only executed if the loop completes without a break statement. The use case is to avoid using a flag. For example, let us say we want to loop through a list and determine if a number exists. Here is a typical way you might think to do it:

#+BEGIN_SRC python
def f():
    flag = False
    for i in range(10):
        if i == 5:
            flag = True
            break

    return flag

print f()
#+END_SRC

#+RESULTS:
: True

A for/else loop does this in a different way. Essentially, the else clause runs if the loop completes, otherwise if the break occurs it is skipped. In this example the break statement occurs, so the else statement is skipped.

#+BEGIN_SRC python
def f():
    for i in range(10):
        if i == 5:
            break
    else:
        return False

    return True

print f()
#+END_SRC

#+RESULTS:
: True

In this example no break statement occurs, so the else clause is executed.
#+BEGIN_SRC python
def f():
    for i in range(10):
        if i == 15:
            break
    else:
        return False

    return True

print f()
#+END_SRC

#+RESULTS:
: False

It is hard to say if this is an improvement over the flag. They both use the same number of lines of code, and I find it debatable if the else statement is intuitive in its meaning. Maybe if there were multiple potential breaks this would be better.

Needless to say, go watch http://pyvideo.org/video/1780/transforming-code-into-beautiful-idiomatic-pytho. You will learn a lot of interesting things!



