** Rules for transposition
   :PROPERTIES:
   :categories: Linear algebra
   :date:     2013/02/27 13:12:45
   :updated:  2013/02/27 13:12:45
   :END: 
index:transpose
[[http://matlab.cheme.cmu.edu/2011/08/01/illustrating-matrix-transpose-rules-in-matrix-multiplication/][Matlab comparison]]

Here are the four rules for matrix multiplication and transposition

1. $(\mathbf{A}^T)^T = \mathbf{A}$

2. $(\mathbf{A}+\mathbf{B})^T = \mathbf{A}^T+\mathbf{B}^T$

3. $(\mathit{c}\mathbf{A})^T = \mathit{c}\mathbf{A}^T$

4. $(\mathbf{AB})^T = \mathbf{B}^T\mathbf{A}^T$

reference: Chapter 7.2 in Advanced Engineering Mathematics, 9th edition.
by E. Kreyszig.

*** The transpose in Python

There are two ways to get the transpose of a matrix: with a notation, and
with a function.

#+BEGIN_SRC python
import numpy as np
A = np.array([[5, -8, 1],
              [4, 0, 0]])

# function
print np.transpose(A)


# notation
print A.T
#+END_SRC

#+RESULTS:
: [[ 5  4]
:  [-8  0]
:  [ 1  0]]
: [[ 5  4]
:  [-8  0]
:  [ 1  0]]

*** Rule 1

#+BEGIN_SRC python
import numpy as np

A = np.array([[5, -8, 1],
              [4, 0, 0]])

print np.all(A == (A.T).T)
#+END_SRC

#+RESULTS:
: True

*** Rule 2

#+BEGIN_SRC python
import numpy as np
A = np.array([[5, -8, 1],
              [4, 0, 0]])

B = np.array([[3, 4, 5], [1, 2,3]])

print np.all( A.T + B.T == (A + B).T)
#+END_SRC

#+RESULTS:
: True

*** Rule 3

#+BEGIN_SRC python
import numpy as np
A = np.array([[5, -8, 1],
              [4, 0, 0]])

c = 2.1

print np.all( (c*A).T == c*A.T)
#+END_SRC

#+RESULTS:
: True

*** Rule 4

#+BEGIN_SRC python
import numpy as np
A = np.array([[5, -8, 1],
              [4, 0, 0]])

B = np.array([[0, 2],
              [1, 2],
              [6, 7]])

print np.all(np.dot(A, B).T == np.dot(B.T, A.T))
#+END_SRC

#+RESULTS:
: True

*** Summary
That wraps up showing numerically the transpose rules work for these examples.
