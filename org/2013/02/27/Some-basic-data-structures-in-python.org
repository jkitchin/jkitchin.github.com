** Some basic data structures in python
   :PROPERTIES:
   :categories: python
   :date:     2013/02/27 07:31:47
   :updated:  2013/02/27 14:48:49
   :END:
[[http://matlab.cheme.cmu.edu/2011/09/26/some-basic-data-structures-in-matlab/][Matlab post]]

We often have a need to organize data into structures when solving problems.
*** the list
A list in python is data separated by commas in square brackets. Here, we might store the following data in a variable to describe the Antoine coefficients for benzene and the range they are relevant for [Tmin Tmax]. Lists are flexible, you can put anything in them, including other lists. We access the elements of the list by indexing:
#+BEGIN_SRC python
c = ['benzene', 6.9056, 1211.0, 220.79, [-16, 104]]
print c[0]
print c[-1]

a,b = c[0:2]
print a,b

name, A, B, C, Trange = c
print Trange
#+END_SRC

#+RESULTS:
: benzene
: [-16, 104]
: benzene 6.9056
: [-16, 104]

Lists are "mutable", which means you can change their values.

#+BEGIN_SRC python :session
a = [3, 4, 5, [7, 8], 'cat']
print a[0], a[-1]
a[-1] = 'dog'
print a
#+END_SRC

#+RESULTS:
: 
: 3 cat
: >>> [3, 4, 5, [7, 8], 'dog']

*** tuples
Tuples are /immutable/; you cannot change their values. This is handy in cases where it is an error to change the value. A tuple is like a list but it is enclosed in parentheses.

#+BEGIN_SRC python :session
a = (3, 4, 5, [7, 8], 'cat')
print a[0], a[-1]
a[-1] = 'dog'
#+END_SRC

#+RESULTS:
: 
: 3 cat
: Traceback (most recent call last):
:   File "<stdin>", line 1, in <module>
: TypeError: 'tuple' object does not support item assignment

*** struct
Python does not exactly have the same thing as a struct in Matlab. You can achieve something like it by defining an empty class and then defining attributes of the class. You can check if an object has a particular attribute using hasattr.

#+BEGIN_SRC python
class Antoine:
    pass

a = Antoine()
a.name = 'benzene'
a.Trange = [-16, 104]

print a.name
print hasattr(a, 'Trange')
print hasattr(a, 'A')
#+END_SRC

#+RESULTS:
: benzene
: True
: False

*** dictionaries
The analog of the containers.Map in Matlab is the dictionary in python. Dictionaries are enclosed in curly brackets, and are composed of key:value pairs.

#+BEGIN_SRC python
s = {'name':'benzene',
     'A':6.9056,
     'B':1211.0}

s['C'] = 220.79
s['Trange'] = [-16, 104]

print s
print s['Trange']
#+END_SRC

#+RESULTS:
: {'A': 6.9056, 'C': 220.79, 'B': 1211.0, 'name': 'benzene', 'Trange': [-16, 104]}
: [-16, 104]

#+BEGIN_SRC python
s = {'name':'benzene',
     'A':6.9056,
     'B':1211.0}

print 'C' in s
# default value for keys not in the dictionary
print s.get('C', None)

print s.keys()
print s.values()
#+END_SRC

#+RESULTS:
: False
: None
: ['A', 'B', 'name']
: [6.9056, 1211.0, 'benzene']


*** Summary
We have examined four data structures in python. Note that none of these types are arrays/vectors with defined mathematical operations. For those, you need to consider numpy.array.
