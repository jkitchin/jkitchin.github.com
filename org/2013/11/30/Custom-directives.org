* Custom directives
  :PROPERTIES:
  :categories: org-mode, emacs
  :date:     2013/11/30 09:19:56
  :updated:  2013/11/30 09:35:33
  :END:


You can define custom [[http://orgmode.org/worg/org-contrib/org-special-blocks.html][special blocks]] in org-mode. Here is an example of creating attention and note directives. Note you need to specify the styles and environments in the header like this:
#+BEGIN_EXAMPLE
#+HTML_HEAD_EXTRA:  <style>.attention {font-size: 30px; text-indent: 50px; color: red; background-color:HotPink;}</style>
#+HTML_HEAD_EXTRA:  <style>.note {font-size: 30px; text-indent: 50px; background-color:LightSkyBlue;}</style>

#+LATEX_HEADER: \usepackage[usenames,dvipsnames,svgnames,table]{xcolor}
#+LATEX_HEADER: \newenvironment{attention}{\color{red}}{\ignorespacesafterend}
#+LATEX_HEADER: \newenvironment{note}{\itshape}{\ignorespacesafterend}
#+END_EXAMPLE

That allows you to define different looks for exporting to html and LaTeX. For the blog post, I put the style in the body of the html.

#+BEGIN_HTML
<style>.attention {font-size: 30px; text-indent: 50px; color: red; background-color:HotPink;}</style>
<style>.note {font-size: 30px; text-indent: 50px; background-color:LightSkyBlue;}</style>
#+END_HTML

Here is the markup for an attention block.

#+BEGIN_EXAMPLE
#+BEGIN_ATTENTION
Pay attention to this text!
#+END_ATTENTION
#+END_EXAMPLE

Renders like this: 
#+BEGIN_ATTENTION
Pay attention to this text!
#+END_ATTENTION


A note is defined as:
#+BEGIN_EXAMPLE
#+begin_note
this is a note
#+end_note
#+END_EXAMPLE

and it renders like this:
#+begin_note
this is a note.
#+end_note

I am not sure if it is possible to add arguments, e.g. via attributes. Anyway, this may enable some flexibility in adding content that may be rendered in html and LaTeX in org-mode. There is a function (org-html-special-block and org-latex-special-block) that does the rendering, and it has an info plist that probably has the information. It does not appear you can pass arguments in though. That would require a filter that redefines the rendering.

