** Getting a dictionary of counts
   :PROPERTIES:
   :categories: programming
   :date:     2013/05/29 20:18:27
   :updated:  2013/05/29 20:20:50
   :END:
I frequently want to take a list and get a dictionary of keys that have the count of each element in the list. Here is how I have typically done this countless times in the past. 

#+BEGIN_SRC python
L = ['a', 'a', 'b','d', 'e', 'b', 'e', 'a']

d = {}
for el in L:
    if el in d:
        d[el] += 1
    else:
        d[el] = 1

print d
#+END_SRC

#+RESULTS:
: {'a': 3, 'b': 2, 'e': 2, 'd': 1}

That seems like too much code, and that there must be a list comprehension approach combined with a dictionary constructor. 

#+BEGIN_SRC python
L = ['a', 'a', 'b','d', 'e', 'b', 'e', 'a']

print dict((el,L.count(el)) for el in L)
#+END_SRC

#+RESULTS:
: {'a': 3, 'b': 2, 'e': 2, 'd': 1}

Wow, that is a lot simpler! I suppose for large lists this might be slow, since count must look through the list for each element, whereas the longer code looks at each element once, and does one conditional analysis.

Here is another example of much shorter and cleaner code. 

#+BEGIN_SRC python
from collections import Counter
L = ['a', 'a', 'b','d', 'e', 'b', 'e', 'a']
print Counter(L)
print Counter(L)['a']
#+END_SRC

#+RESULTS:
: Counter({'a': 3, 'b': 2, 'e': 2, 'd': 1})
: 3
