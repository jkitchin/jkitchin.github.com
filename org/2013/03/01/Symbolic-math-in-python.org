** Symbolic math in python
   :PROPERTIES:
   :categories: symbolic, math
   :date:     2013/03/01 19:07:48
   :updated:  2013/03/03 12:21:36
   :END:
 [[http://matlab.cheme.cmu.edu/2011/08/10/symbolic-math-in-matlab/][Matlab post]]
Python has capability to do symbolic math through the sympy package. 
*** Solve the quadratic equation
    :PROPERTIES:
    :date:     2013/03/03 09:39:56
    :updated:  2013/03/03 09:39:56
    :END:
#+BEGIN_SRC python :session
from sympy import solve, symbols, pprint

a,b,c,x = symbols('a,b,c,x')

f = a*x**2 + b*x + c

solution = solve(f, x)
print solution
pprint(solution)
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> [(-b + (-4*a*c + b**2)**(1/2))/(2*a), -(b + (-4*a*c + b**2)**(1/2))/(2*a)]
: _____________   /       _____________\ 
:         /           2    |      /           2 | 
:  -b + \/  -4*a*c + b    -\b + \/  -4*a*c + b  / 
: [---------------------, -----------------------]
:           2*a                     2*a

The solution you should recognize in the form of $\frac{b \pm \sqrt{b^2 - 4 a c}}{2 a}$ although python does not print it this nicely!

*** differentiation

you might find this helpful!

#+BEGIN_SRC python :session
from sympy import diff

print diff(f, x)
print diff(f, x, 2)

print diff(f, a)
#+END_SRC

#+RESULTS:
: 
: >>> 2*a*x + b
: 2*a
: >>> x**2

*** integration
#+BEGIN_SRC python :session
from sympy import integrate

print integrate(f, x)          # indefinite integral
print integrate(f, (x, 0, 1))  # definite integral from x=0..1
#+END_SRC

#+RESULTS:
: 
: >>> a*x**3/3 + b*x**2/2 + c*x
: a/3 + b/2 + c

*** Analytically solve a simple ODE
#+BEGIN_SRC python :session
from sympy import Function, Symbol, dsolve
f = Function('f')
x = Symbol('x')
fprime = f(x).diff(x) - f(x) # f' = f(x)

y = dsolve(fprime, f(x))

print y
print y.subs(x,4)
print [y.subs(x, X) for X in [0, 0.5, 1]] # multiple values
#+END_SRC

#+RESULTS:
: 
: >>> >>> >>> >>> >>> >>> f(x) == exp(C1 + x)
: f(4) == exp(C1 + 4)
: [f(0) == exp(C1), f(0.5) == exp(C1 + 0.5), f(1) == exp(C1 + 1)]

It is not clear you can solve the initial value problem to get C1.

The symbolic math in sympy is pretty good. It is not up to the capability of Maple or Mathematica, (but neither is Matlab) but it continues to be developed, and could be helpful in some situations.
