*** Basic mouse clicks
    :PROPERTIES:
    :categories: plotting
    :date:     2013/03/09 13:27:14
    :updated:  2013/03/09 13:27:14
    :END:
[[index:plotting!interactive mouse click]]
[[index:plotting!interactive key press]]
One basic event a figure can react to is a mouse click. Let us make a graph with a parabola in it, and draw the shortest line from a point clicked on to the graph. Here is an example of doing that. 

#+BEGIN_SRC python
import matplotlib.pyplot as plt
import numpy as np
from scipy.optimize import fmin_cobyla

fig = plt.figure()

def f(x):
    return x**2

x = np.linspace(-2, 2)
y = f(x)

ax = fig.add_subplot(111)
ax.plot(x, y)
ax.set_title('Click somewhere')

def onclick(event):
    ax = plt.gca()

    P = (event.xdata, event.ydata)

    def objective(X):
        x,y = X
        return np.sqrt((x - P[0])**2 + (y - P[1])**2)

    def c1(X):
        x,y = X
        return f(x) - y

    X = fmin_cobyla(objective, x0=[P[0], f(P[0])], cons=[c1])

    ax.set_title('x={0:1.2f} y={1:1.2f}'.format(event.xdata, event.ydata))
    ax.plot([event.xdata, X[0]], [event.ydata, X[1]], 'ro-')
    ax.figure.canvas.draw()  # this line is critical to change the title
    plt.savefig('images/interactive-basic-click.png')

cid = fig.canvas.mpl_connect('button_press_event', onclick)
plt.show()
#+END_SRC

#+RESULTS:
#+begin_example

   Normal return from subroutine COBYLA

   NFVALS =   43   F = 4.598867E-01    MAXCV = 0.000000E+00
   X =-1.467536E+00   2.153663E+00

   Normal return from subroutine COBYLA

   NFVALS =   47   F = 4.913005E-01    MAXCV = 0.000000E+00
   X = 5.251398E-01   2.757718E-01
#+end_example

Here is the result from two clicks. For some reason, this only works when you click inside the parabola. It does not work outside the parabola.

[[./images/interactive-basic-click.png]]

We can even do different things with different mouse clicks. A left click corresponds to event.button = 1, a middle click is event.button = 2, and a right click is event.button = 3. You can detect if a double click occurs too. Here is an example of these different options.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111)
ax.plot(np.random.rand(10))
ax.set_title('Click somewhere')

def onclick(event):   
    ax.set_title('x={0:1.2f} y={1:1.2f} button={2}'.format(event.xdata, event.ydata, event.button))
    colors = ' rbg'
    print 'button={0} (dblclick={2}). making a {1} dot'.format(event.button,
                                                               colors[event.button],
                                                               event.dblclick)
   
    ms=5 # marker size
    if event.dblclick: #make marker bigger
        ms = 10

    ax.plot([event.xdata], [event.ydata], 'o', color=colors[event.button], ms=ms)
    ax.figure.canvas.draw()  # this line is critical to change the title
    plt.savefig('images/interactive-button-click.png')

cid = fig.canvas.mpl_connect('button_press_event', onclick)
plt.show()
#+END_SRC

#+RESULTS:
: button=1 (dblclick=False). making a r dot
: button=1 (dblclick=False). making a r dot
: button=1 (dblclick=True). making a r dot
: button=2 (dblclick=False). making a b dot
: button=2 (dblclick=False). making a b dot
: button=2 (dblclick=True). making a b dot
: button=3 (dblclick=False). making a g dot
: button=3 (dblclick=False). making a g dot
: button=3 (dblclick=True). making a g dot

[[./images/interactive-button-click.png]]

Finally, you may want to have key modifiers for your clicks, e.g. Ctrl-click is different than a click.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
import numpy as np

fig = plt.figure()

ax = fig.add_subplot(111)
ax.plot(np.random.rand(10))
ax.set_title('Click somewhere')

def onclick(event):
    print event.key
    ax = plt.gca()
    ax.set_title('x={0:1.2f} y={1:1.2f}'.format(event.xdata, event.ydata))
    if event.key == 'ctrl+control':
        color = 'red'
    elif event.key == 'shift':
        color = 'yellow'
    else:
        color = 'blue'

    ax.plot([event.xdata], [event.ydata], 'o', color=color)
    ax.figure.canvas.draw()  # this line is critical to change the title
    plt.savefig('images/interactive-button-key-click.png')

cid = fig.canvas.mpl_connect('button_press_event', onclick)
plt.show()
#+END_SRC

#+RESULTS:
: ctrl+control
: shift
: alt+alt

[[./images/interactive-button-key-click.png]]

You can have almost every key-click combination imaginable. This allows you to have many different things that can happen when you click on a graph. With this method, you can get the coordinates close to a data point, but you do not get the properties of the point. For that, we need another mechanism.
