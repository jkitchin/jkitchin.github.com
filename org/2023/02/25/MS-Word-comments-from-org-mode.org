* MS Word comments from org-mode
:PROPERTIES:
:categories: orgmode, docx
:date:     2023/02/25 11:49:07
:updated:  2023/02/25 11:49:07
:org-url:  https://kitchingroup.cheme.cmu.edu/org/2023/02/25/MS-Word-comments-from-org-mode.org
:permalink: https://kitchingroup.cheme.cmu.edu/blog/2023/02/25/MS-Word-comments-from-org-mode/index.html
:END:

Today I [[https://www.reddit.com/r/orgmode/comments/11bkt2h/is_it_possible_to_pass_html_in_org_to_pandoc_word/][learned]] you can make a Word document from org-mode with Word comments in them. This could be useful when working with collaborators maybe. A subtlety is it works by using pandoc to convert markdown into docx. Within markdown you designate the comments using HTML like this:

#+BEGIN_SRC sh
<span class="comment-start" author="jkitchin">Comment text</span>The text being commented on <span class="comment-end"></span> 
#+END_SRC

Let's wrap that in a link for convenience. I use a full display so it is easy to see the comment. I only export the comment for markdown export, for everything else we just use the path. We somewhat abuse the link syntax here by using the path for the text to comment on, and the description for the comment.

#+BEGIN_SRC emacs-lisp :results silent
(org-link-set-parameters "comment"
			 :export (lambda (path desc backend)
				   (if (eql backend 'md)
				       (format "<span class=\"comment-start\" author=\"%s\">%s</span>%s<span class=\"comment-end\"></span>"
					       (user-full-name)
					       desc
					       path)
				     ;; ignore for other backends and just use path
				     path))
			 :display 'full
			 :face '(:foreground "orange"))			 
#+END_SRC

Now, we use it like this [[comment:This is the text commented on][This is the comment]].

In org-mode it looks like:



#+attr_org: :width 800
[[./screenshots/date-25-02-2023-time-11-44-11.png]]

To get the Word doc, we need some code that first exports to Markdown, and then calls pandoc to convert that to docx. Here is my solution to that. Usually you would put this in a subsection tagged with :noexport: but I show it here to see it. Running this block generates the docx file and opens it.

#+BEGIN_SRC emacs-lisp
(let* ((md (org-md-export-to-markdown))
       (docx (concat (file-name-sans-extension md) ".docx")))
  (shell-command (format "pandoc -s %s -o %s" md docx))
  (org-open-file docx '(16)))
#+END_SRC

#+RESULTS:


The result looks like this in MS Word:


#+attr_org: :width 800
[[./screenshots/date-25-02-2023-time-11-41-37.png]]

That is pretty remarkable. I guess this has some limitations in going through markdown, e.g. usually I have found something doesn't work like an equation or table, or caption, cross-reference, etc. Still, this might be inspiration to test it out further!
