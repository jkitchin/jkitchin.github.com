* DONE Colorized text in Emacs
  CLOSED: [2014-09-14 Sun 14:23]
  :PROPERTIES:
  :categories: emacs
  :date:     2014/09/14 14:23:05
  :updated:  2014/09/14 14:33:32
  :END:

As I continue investigating Emacs + org-mode as a platform for creating applications, it has come up a few times that it would be useful to display colored text. For example, in a summary report of a git repo, you might want to see some information in red, e.g. if you have uncommitted changes, and some information in green, e.g. the repo is clean and consistent with a remote.

We can set colors on a string in Emacs like this:

#+BEGIN_SRC emacs-lisp
(propertize "Red Text" 'font-lock-face '(:foreground "red"))
#+END_SRC

The only tricky part is that we need to insert the text into a font-locked buffer to see it. That is also a tad tricky to illustrate in a code block, so here is a way to try it:

#+BEGIN_SRC emacs-lisp
(re-search-forward "-> ")
(insert
  (propertize "Red Text" 'font-lock-face '(:foreground "red")))
#+END_SRC

#+RESULTS:

-> Red Text

The red text does not show in the HTML post, so this is a screenshot of what it looks like in my buffer:

[[./images/red-text.png]]

Now, here is how we might use this in a summary report. Say we have a git repo, and we want to know various facts about it. We can get information about tracked/ untracked and modified files like this:

#+BEGIN_SRC sh
git status --porcelain
#+END_SRC
#+RESULTS:
:  M _blog/blog.html
:  M _blog/blog.org
: A  _blog/images/red-text.png

This shows we have two tracked, but modified files, and on added but not committed file. We can use this code to show if we have any untracked files.

#+BEGIN_SRC emacs-lisp
(let ((n 0) s)
  (dolist (line (split-string
		 (shell-command-to-string "git status --porcelain")
		 "\n"))
    (when (string-match "^\\?\\?" line)
      (setq n (+ 1 n))))
  (if (> n 0)
      (setq s (propertize (format "%s untracked files" n)
			  'font-lock-face '(:foreground "red")))
    (setq s (propertize "No untracked files" 
			'font-lock-face '(:foreground "forest green"))))
  (re-search-forward "->")
  (insert s))
#+END_SRC

#+RESULTS:

->No untracked files

In HTML (i.e. the blog post) you cannot really see the green text, so here is a screenshot illustrating it.
[[./images/git-untracked-files.png]]

Similarly, we can check for modified files. We add a wrinkle and add a tooltip like text that shows the output of the git command.

#+BEGIN_SRC emacs-lisp
(let ((n 0)
      (output (shell-command-to-string "git status --porcelain"))
      s)
  (dolist (line (split-string
		 output
		 "\n"))
    (when (string-match "^ M" line)
      (setq n (+ 1 n))))
  (if (> n 0)
      (setq s (propertize (format "%s modified files" n)
                          'help-echo output
			  'font-lock-face '(:foreground "red")))
    (setq s (propertize "No modified files" 
			'font-lock-face '(:foreground "forest green"))))
  (re-search-forward "-> ")
  (insert s))
#+END_SRC

#+RESULTS:

-> 2 modified files

That looks like this in emacs:

 [[./images/git-modified.png]]


That is the main idea in this post. You can create strings with properties, and use code to determine what they e.g. what color the text is, etc... There are lots of properties listed at http://www.gnu.org/software/emacs/manual/html_node/elisp/Special-Properties.html that might be helpful in an application. Here are some previous posts that examined similar ideas.

- Read-only text http://kitchingroup.cheme.cmu.edu/blog/2014/09/13/Make-some-org-sections-read-only/

- Tool tips: http://kitchingroup.cheme.cmu.edu/blog/2013/04/12/Tool-tips-on-text-in-Emacs/

- Invisible text (this is not exactly a property, but it is similar)
http://kitchingroup.cheme.cmu.edu/blog/2014/02/06/Invisible-text-in-emacs/