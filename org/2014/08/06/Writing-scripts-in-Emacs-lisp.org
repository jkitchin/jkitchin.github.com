* DONE Writing scripts in Emacs-lisp
  CLOSED: [2014-08-06 Wed 14:27]
  :PROPERTIES:
  :date:     2014/08/06 14:27:58
  :updated:  2014/08/07 16:39:32
  :categories: emacs
  :END:

I have written lots of script commands, mostly in Python, occasionally in bash. Today I learned you can also write them in emacs-lisp (http://www.emacswiki.org/emacs/EmacsScripts). There is an interesting wrinkle on the first line which specifies how to run the command, which is explained in the emacswiki page.

Here is an example script that just prints some information about Emacs and the command line args you pass to it. We use some Local variables at the end to make the script open in emacs-lisp mode for editing. $0 in shell language is the name of the script being run, so the header here simply loads the script into emacs, and then runs the main function. 

#+BEGIN_SRC emacs-lisp :tangle test.el
:;exec emacs -batch -l "$0" -f main "$@"

(defun main ()
  (print (version))
  (print (format "I did it. you passed in %s" command-line-args-left)))

;; Local Variables:
;; mode: emacs-lisp
;; End:
#+END_SRC

We need to tangle this code block to get the script. 
elisp:org-babel-tangle

Since we do not have a regular shebang, we manually change the mode to make it executable, and then call the script with some arguments.

#+BEGIN_SRC sh
chmod +x test.el
./test.el arg1 arg2 
#+END_SRC

#+RESULTS:
: 
: "GNU Emacs 22.1.1 (mac-apple-darwin)
:  of 2014-06-05 on osx105.apple.com"
: 
: "I did it. you passed in (arg1 arg2)"

Hahah! I guess the emacs on my path is an old one! Ironically, the Emacs I am writing in is much more modern (but not on the path).

#+BEGIN_SRC emacs-lisp
(version)
#+END_SRC

#+RESULTS:
: GNU Emacs 24.3.1 (x86_64-apple-darwin, NS apple-appkit-1038.36)
:  of 2013-03-13 on bob.porkrind.org

And it is evidence I wrote this on a Mac. First Mac post ever.

** Addition based on Trevor's comment

Also according to http://www.emacswiki.org/emacs/EmacsScripts, there is the following option:

#+BEGIN_EXAMPLE
#!emacs --script
#+END_EXAMPLE

as the shebang line. That did not work on my mac, but a small variation did with the absolute path to emacs. You still define the function in the script file, but you finally have to call the function.

#+BEGIN_SRC emacs-lisp :tangle test2.el :shebang #!/usr/bin/emacs --script
(defun main ()
  (print (version))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(main)
;; Local Variables:
;; mode: emacs-lisp
;; End:
#+END_SRC


#+BEGIN_SRC sh
./test2.el arg1 arg2 arg3
#+END_SRC

#+RESULTS:
: 
: "GNU Emacs 22.1.1 (mac-apple-darwin)
:  of 2014-06-05 on osx105.apple.com"
: 
: "Called with (/usr/bin/emacs --no-splash -scriptload ./test2.el arg1 arg2 arg3)"
: 
: "I did it. you passed in (arg1 arg2 arg3)"

Now, how do you do this python style so one file is a script and library at once? In python that is done with:

#+BEGIN_SRC python
def main ():
    ... put some module code here

if __name__ == '__main__':
    main()
#+END_SRC

We can check the command line-args to see if there is a clue there.

#+BEGIN_SRC emacs-lisp :tangle test3.el :shebang #!/usr/bin/emacs --script
(defun main ()
  (print (version))
  (print (format "Called with %s" command-line-args))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(main)
;; Local Variables:
;; mode: emacs-lisp
;; End:
#+END_SRC

#+BEGIN_SRC sh
./test3.el arg1
#+END_SRC

#+RESULTS:
: 
: "GNU Emacs 22.1.1 (mac-apple-darwin)
:  of 2014-06-05 on osx105.apple.com"
: 
: "Called with (/usr/bin/emacs --no-splash -scriptload ./test3.el arg1)"
: 
: "I did it. you passed in (arg1)"

And apparently, this means when called with --script, we see "-scriptload" as a command line arg. Strange, but workable. We just look for that, and if we see it run as a script, and if not do nothing.

#+BEGIN_SRC emacs-lisp :tangle test4.el :shebang #!/usr/bin/emacs --script
(defun main ()
  (print (version))
  (print (format "Called with %s" command-line-args))
  (print (format "I did it. you passed in %s" command-line-args-left)))

(when (member "-scriptload" command-line-args)
  (main))
#+END_SRC

Here we run as a script.

#+BEGIN_SRC sh
./test4.el arg1
#+END_SRC

#+RESULTS:
: 
: "GNU Emacs 22.1.1 (mac-apple-darwin)
:  of 2014-06-05 on osx105.apple.com"
: 
: "Called with (/usr/bin/emacs --no-splash -scriptload ./test4.el arg1)"
: 
: "I did it. you passed in (arg1)"

Now, we try loading the file, and calling our function.

#+BEGIN_SRC emacs-lisp
(load-file "test4.el")
(main)
#+END_SRC

#+RESULTS:
: I did it. you passed in nil

Sweet. An emacs script and library in one. Now, I just need to get my modern emacs on the path!
