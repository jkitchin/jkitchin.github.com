* Capturing stderr from Python in org-mode - take 2
  :PROPERTIES:
  :categories: emacs,python,orgmode
  :date:     2014/12/21 11:46:11
  :updated:  2014/12/21 11:46:11
  :END:
In a previous [[http://kitchingroup.cheme.cmu.edu/blog/2013/09/27/Capturing-stderr-and-exceptions-from-python-in-org-mode/][post]] I wrote about a sandbox module to help capture stderr in Python code blocks in org-mode. That module worked, but ran as a script. 

stderr is not captured in the output of a code block in org-mode. For example:

#+BEGIN_SRC python
import sys
print >>sys.stdout, "message on stdout"
print >>sys.stderr, "testing stderr"
#+END_SRC

#+RESULTS:
: message on stdout

The messages to stderr just disappears. Not good for code like this:

#+BEGIN_SRC python
from scipy.integrate import odeint

def ode(y, x):
    return -k * x

xspan = [0, 1]
y0 = 1

sol = odeint(ode, y0, xspan)
print sol
#+END_SRC

#+RESULTS:
: [[ 1.]
:  [ 1.]]

There is an error in that code, k is not defined. If you run that as a script, you get this output:
#+BEGIN_EXAMPLE
>>> Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "/var/folders/5q/lllv2yf95hg_n6h6kjttbmdw0000gn/T//python-69413hLF.py", line 4, in ode
    return -k * x
NameError: global name 'k' is not defined
#+END_EXAMPLE

But, that is evidently going to stderr, and not getting captured in org-mode. Boo. A silent error that returns a value! This behavior of odeint may be [[https://github.com/scipy/scipy/pull/4052][fixed]] in scipy 0.15, but it is a general deficiency of org-mode babel code blocks. So, today I am looking back into a way to fix it. We try something as mundane as just redefining stderr in Python at runtime.

#+BEGIN_SRC python
import sys
sys.stderr = sys.stdout

print >>sys.stdout, "message on stdout"
print >>sys.stderr, "testing stderr"
#+END_SRC

#+RESULTS:
: message on stdout
: testing stderr

That works fine. Let us test it with the other block.

#+BEGIN_SRC python
import sys
sys.stderr = sys.stdout

from scipy.integrate import odeint

def ode(y, x):
    return -k * x

xspan = [0, 1]
y0 = 1

sol = odeint(ode, y0, xspan)
print sol
#+END_SRC

#+RESULTS:
#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 6, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 6, in ode
NameError: global name 'k' is not defined
[[ 1.]
 [ 1.]]
#+end_example

Sweet, we get the errors. We still get the returned value, but it is immediately obvious something is wrong. I have wrapped that little tidbit into a Python module in [[https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py][pycse.orgmode]], which you can import to get the same effect.

#+BEGIN_SRC python
import pycse.orgmode

from scipy.integrate import odeint

def ode(y, x):
    return -k * x

xspan = [0, 1]
y0 = 1

sol = odeint(ode, y0, xspan)
print sol
#+END_SRC

#+RESULTS:
#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]

#+end_example

Finally, you can avoid the import by setting your org-babel Python command like this:

#+BEGIN_SRC emacs-lisp
(setq org-babel-python-command "python -i -c \"import pycse.orgmode\"")
#+END_SRC

#+RESULTS:
: python -i -c "import pycse.orgmode"

Now, we run our faulty block again:
#+BEGIN_SRC python
from scipy.integrate import odeint

def ode(y, x):
    return -k * x

xspan = [0, 1]
y0 = 1

sol = odeint(ode, y0, xspan)
print sol
#+END_SRC

#+RESULTS:
#+begin_example
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined
Traceback (most recent call last):
  File "<stdin>", line 2, in ode
NameError: global name 'k' is not defined

[[ 1.]
 [ 1.]]

#+end_example

Excellent. The stderr is captured.

And we get basically the same output as before for regular code blocks. There is an extra line before and after the output for some reason. I can live with that!

#+BEGIN_SRC python
print 6 + 7
#+END_SRC

#+RESULTS:
: 
: 13
: 
