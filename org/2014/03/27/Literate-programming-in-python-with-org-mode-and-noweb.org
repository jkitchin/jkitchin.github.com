* DONE Literate programming in python with org-mode and noweb
  CLOSED: [2014-03-27 Thu 10:47]
  :PROPERTIES:
  :categories: org-mode,python
  :date:     2014/03/27 10:46:55
  :updated:  2014/03/27 11:07:15
  :END:
This post examines a different approach to literate programming with org-mode that uses [[http://www.cs.tufts.edu/~nr/noweb/][noweb]]. I have adapted an example from http://home.fnal.gov/~neilsen/notebook/orgExamples/org-examples.html which has some pretty cool ideas in it. 

The gist of using noweb is that in your source blocks you have labels like =<<imports>>=, that refer to other named code blocks that get substituted in place of the label. In the example below, we put labels for a code block of imports, for a function definition, a class definition, and a main function. This code block will get tangled to [[./main.py]]. The noweb expansion happens at export, so here is the literal code block:
#+BEGIN_EXAMPLE
#+BEGIN_SRC python :noweb yes :tangle main.py
<<imports>>

<<some-func>>

<<class-dfn>>

<<main-func>>

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC
#+END_EXAMPLE

You may want to just check out the org-mode source link at the bottom of the post to see all the details.

#+BEGIN_SRC python :noweb yes :tangle main.py
<<imports>>

<<some-func>>

<<class-dfn>>

<<main-func>>

if __name__ == '__main__':
    status = main()
    sys.exit(status)
#+END_SRC

** imports
Now, we define a block that gives us the imports. We do not have to use any tangle headers here because noweb will put it in where it belongs.

#+NAME: imports
#+BEGIN_SRC python
import sys
import numpy as np
import matplotlib.pyplot as plt

from argparse import ArgumentParser
#+END_SRC

** utility function
Now we define a function we will want imported from the main file. 

#+NAME: some-func
#+BEGIN_SRC python
def utility_func(arg=None):
    return 'you called a utility function with this arg: {0}'.format(arg)
#+END_SRC

** class definition
Finally, let us define a class. Note we use noweb here too, and we get the indentation correct!

#+NAME: class-dfn
#+BEGIN_SRC python :noweb yes
class HelloWorld(object):
    def __init__(self, who):
        self.who = who

    def __call__(self):
        return 'Hello {0}'.format(self.who)

    <<some-other-func>>
#+END_SRC

*** some class function
Now, let us make the some-other-func. This block is not indented, but with the noweb syntax above, it seems to get correctly indented. Amazing.

#+NAME: some-other-func
#+BEGIN_SRC python
def test(self):
    return True
#+END_SRC

** The main function

This is a typical function that could be used to make your module into a script, and is only run when the module is used as a script.. 

#+NAME: main-func
#+BEGIN_SRC python
def main():
    parser = ArgumentParser(description="Say hi")
    parser.add_argument("-w", "--who", 
                        type=str,
                        default="world",
                        help="Who to say hello to")
    args = parser.parse_args()
  
    who = args.who
  
    greeter = HelloWorld(who)
    greeter()

    print 'test func = ', greeter.test()
  
    print utility_func()
    print utility_func(5)

    return 0
#+END_SRC

** Tangle and run the code

This link will extract the code to main.py: elisp:org-babel-tangle

We can run the code like this (linux):
#+NAME: bashrun-helloworld
#+BEGIN_SRC sh :results output
python main.py --w John 2>&1
true
#+END_SRC
#+RESULTS: bashrun-helloworld
: test func =  True
: you called a utility function with this arg: None
: you called a utility function with this arg: 5

or this (windows, which as no sh)

#+BEGIN_SRC python
from main import *

main()
#+END_SRC

#+RESULTS:
: test func =  True
: you called a utility function with this arg: None
: you called a utility function with this arg: 5

** Summary thoughts
The use of noweb syntax is pretty cool. I have not done anything serious with it, but it looks like you could pretty easily create a sophisticated python module this way that is documented in org-mode. 