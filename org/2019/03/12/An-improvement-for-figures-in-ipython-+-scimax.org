* An improvement for figures in ipython + scimax
  :PROPERTIES:
  :categories: ipython
  :date:     2019/03/12 14:18:26
  :updated:  2019/03/12 14:18:26
  :org-url:  http://kitchingroup.cheme.cmu.edu/org/2019/03/12/An-improvement-for-figures-in-ipython-+-scimax.org
  :permalink: http://kitchingroup.cheme.cmu.edu/blog/2019/03/12/An-improvement-for-figures-in-ipython-+-scimax/index.html
  :END:

One of the best features of ipython in scimax is automatic inline images that you do not have to name. This has had a downside though, and that is it is not easy to use this /and/ put attributes like names (so you can reference them later) or captions, or if you want a specific filename to get that. No more. Now you can use the =:ipyfile= header argument to control these. For example, if you use this in the header of the next block, it will save the images into the filenames you specified (in the order they are defined), and add attributes to the output. The syntax is just a list of plists (in elispese).

#+BEGIN_EXAMPLE
:ipyfile '((:name "clockwise" :filename "obipy-resources/clockwise.png" :caption "A clockwise spiral.") (:name "counterclockwise" :filename "obipy-resources/counterclockwise.png" :caption "A counterclockwise spiral."))
#+END_EXAMPLE

 That allows you to refer to the clockwise one in Figure ref:clockwise and the counterclockwise in Fig.  ref:counterclockwise. That may be helpful when using Ipython to write papers or for presenations where you might prefer named figures that are easy to find. Enjoy!

#+BEGIN_SRC ipython :ipyfile '((:name "clockwise" :filename "obipy-resources/clockwise.png" :caption "A clockwise spiral.") (:name "counterclockwise" :filename "obipy-resources/counterclockwise.png" :caption "A counterclockwise spiral."))
%matplotlib inline
import matplotlib.pyplot as plt
import numpy as np

t = np.linspace(0, 20 * np.pi, 350)
x = np.exp(-0.1 * t) * np.sin(t)
y = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis('equal')

plt.figure()
plt.plot(y, x)

plt.axis('equal')

print('Length of t = {}'.format(len(t)))
print('x .dot. y = {}'.format(x @ y))
#+END_SRC

#+RESULTS:
:results:
# Out [1]:
# output
Length of t = 350
x .dot. y = 1.3598389888491538



# image/png
#+caption: A clockwise spiral.
#+name: clockwise
[[file:obipy-resources/clockwise.png]]



# image/png
#+caption: A counterclockwise spiral.
#+name: counterclockwise
[[file:obipy-resources/counterclockwise.png]]
:end:
