** An activate-func example
   :PROPERTIES:
   :date:     2016/11/04 06:18:16
   :updated:  2016/11/04 06:18:16
   :END:

You may want to do some additional things when a link is activated. For example, maybe it makes sense for different parts of the link to have different actions,  or colors. Here is an example where we make an rgb link of three numbers, and color each number, and make the link color dynamic.

We make a keymap so C-up increments a color, and C-down decrements a color.

#+BEGIN_SRC emacs-lisp :results silent
(require 'color)

(defun rgb-face (path)
  (let* ((f (split-string path ","))
	 (red (/ (string-to-number (nth 0 f)) 255.0))
	 (green (/ (string-to-number (nth 1 f)) 255.0))
	 (blue (/ (string-to-number (nth 2 f)) 255.0))
	 (hex (color-rgb-to-hex red green blue)))
    (list :foreground hex)))


(defun rgb-func (start end path bracketp) 
  (save-excursion
    (goto-char start)
    (save-match-data
      (cl-loop for num in (split-string path ",")
	       for face in (list '(:foreground "red")
				 '(:foreground "green")
				 '(:foreground "blue"))
	       do
	       (progn
		 (re-search-forward num end t)
		 (add-text-properties
		  (match-beginning 0)
		  (match-end 0)
		  (list 'face face)))))))

(defun ninc ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1+ (string-to-number (match-string 0))))))


(defun NINC ()
  (interactive)
  (let* ((link (org-element-context))
	 (path (org-element-property :path link))
	 (beg (org-element-property :begin link))
	 (end (org-element-property :end link))
	 (rgb (mapcar 'string-to-number (split-string path ","))))
    (setq rgb (mapcar (lambda (x) (+ x 10)) rgb))
    (setf (buffer-substring beg end)
	  (format "rgb:%s" (mapconcat 'identity (mapcar 'number-to-string rgb) ",")))))

(defun NDEC ()
  (interactive)
  (let* ((link (org-element-context))
	 (path (org-element-property :path link))
	 (beg (org-element-property :begin link))
	 (end (org-element-property :end link))
	 (rgb (mapcar 'string-to-number (split-string path ","))))
    (setq rgb (mapcar (lambda (x) (- x 10)) rgb))
    (setf (buffer-substring beg end)
	  (format "rgb:%s" (mapconcat 'identity (mapcar 'number-to-string rgb) ",")))))


(defun ndec ()
  (interactive)
  (skip-chars-backward "0-9")
  (or (looking-at "[0-9]+")
      (error "No number at point"))
  (replace-match (number-to-string (1- (string-to-number (match-string 0))))))

(org-link-set-parameters "rgb" :face 'rgb-face
			 :activate-func 'rgb-func
			 :keymap (let ((map (copy-keymap org-mouse-map)))
				   (define-key map (kbd "C-<up>") 'ninc)
				   (define-key map (kbd "C-<down>") 'ndec)
				   (define-key map (kbd "s-<up>") 'NINC)
				   (define-key map (kbd "s-<down>") 'NDEC)
				   map))
#+END_SRC

  
  rgb:83,29,238   This is a violet color.   rgb:112,17,19

This is an rgb link with three comma separated numbers. We color each number accordingly, and set the rgb link to the color represented by the RGB pair.
 
 rgb:225,225,225  This is a light gray.            

A subtle point in this example is the need to save-match-data. Some functions modify the match-data, and this will mess up the whole font-lock system. I learned that by trial and error.


