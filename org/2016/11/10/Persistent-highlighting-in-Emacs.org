* Persistent highlighting in Emacs
  :PROPERTIES:
  :categories: emacs,orgmode
  :date:     2016/11/10 09:16:38
  :updated:  2016/11/10 09:16:38
  :END:

In this [[http://kitchingroup.cheme.cmu.edu/blog/2016/11/08/New-color-link-in-org-9-0-using-font-lock-to-color-the-text/][recent post]] I showed a way to use org-mode links to color text. The main advantage of that approach is it is explicit markup in the file, so it is persistent and exportable to html. The downside of that approach is you cannot use it in code, since the markup will break the code.

An alternative approach is to use overlays to color the text. This allows you to color the text, add annotations as tooltips and to provide a variety of highlighting colors. Overlays are not explicit markup in the file, so it is necessary to think of a way to save them so they can be restored later. We do this by using hook functions to store the overlays in a file-local variable on saving, and a file-local variable to restore the overlays when the file is opened. I bind the primary function `ov-highlighter/body' to a key, in my case hyper-h, which launches a hydra to access the commands.

You can find the code here: https://github.com/jkitchin/scimax/blob/org-9/ov-highlighter.el. Probably around mid-December it will get merged into the master branch.

Here is what this looks like in my buffer:


#+attr_org: :width 300
[[./screenshots/date-10-11-2016-time-09-05-44.png]]

You may want to see the video:
#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/syeRq_LBFns" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT

1. blue green pink yellow custom
2. Put a comment here.
3. Markup a tpyo.
4. Get a list of the highlights in the buffer.

These highlights are pretty awesome. They work in code blocks, and comments. They also work in non-org files (only in Emacs of course).

#+BEGIN_SRC python :results output org drawer
a = 5
b = 6

print(a+b)#print the sum of a and b
#+END_SRC

#+RESULTS:
:RESULTS:
11
:END:

Overall, this is pretty handy. You can highlight your own notes, provide feedback to others, etc. without changing the actual text in the document (well, except for the local variables at the end of the buffer, but these are usually in a "comment" that does not affect the document).


Here are few limitations though:
1. You can only edit/change the file in Emacs, and the hook functions have to enabled, or the overlay data will get corrupted. That means a merge conflict can ruin the overlays.
2. Anyone you share the file with needs to have the ov-highlighter library loaded too. Otherwise they will not see the highlights, and any edits will make the overlay data incorrect. 
3. The highlights do not export from org-mode (although they do work with `htmlize-buffer'!).

#+BEGIN_SRC emacs-lisp
(let* ((html-buffer (htmlize-buffer))
       (html (with-current-buffer html-buffer
	       (buffer-string))))
  (with-temp-file "test.html"
    (insert html))
  (kill-buffer html-buffer))

(browse-url "test.html")
#+END_SRC

#+RESULTS:
: #<process open test.html>


# Local Variables:
# ov-highlight-data: "((3066%203091%20\"Darkolivegreen1\"%20nil)%20(1950%201960%20\"Orange1\"%20\"use%20pep8%20space%20convention\")%20(1700%201704%20\"PaleVioletRed1\"%20\"typo\")%20(1674%201686%20\"Orange1\"%20\"Add%20note%20to%20future%20self.\")%20(1646%201650%20\"Pink\"%20nil)%20(1640%201645%20\"Darkolivegreen1\"%20nil)%20(1635%201639%20\"LightBlue\"%20nil))"
# eval: (ov-highlight-load)
# End:
