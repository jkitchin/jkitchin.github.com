* DONE Getting hylp in hy
  CLOSED: [2016-04-03 Sun 19:42]
  :PROPERTIES:
  :categories: hylang
  :date:     2016/04/03 19:41:52
  :updated:  2016/04/03 20:18:07
  :END:
Hylang is a composite of hy functions, macros, compiler code, and Python. To me, this makes it critical to get to documentation and code easily to figure out what is happening. Here we look at how to get help.

I have hacked something called hydoc for hylang. This was a battle! There are functions, macros, and builtins that are defined in different places, and some things defined in hy, some in python, and some are done at compile time, ... I found a lot of things, but there are still some corner cases I am sure. For some information, I resorted to parsing the source files myself to get arguments and file positions.

See the main code here: https://github.com/jkitchin/hy/blob/hydoc/hy/core/hylp.hy and the cmd-line script here: https://github.com/jkitchin/hy/blob/hydoc/bin/hydoc

It is the beginning of the HyDE, or Hy Development in Emacs. This is a precursor to getting eldoc working in Emacs for Hy. So, without further delay, here is an example command-line use. It is not too fast, but it works.

#+BEGIN_SRC sh
hydoc butlast
#+END_SRC

#+RESULTS:
: Usage: Usage: (butlast coll)
:
: Returns coll except of last element.
:
: [[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::46]]
:

Yep, that is an org-mode link that jumps right to the source definition (in Emacs of course). We can also use it in hy. I have for now put this library (which contains functions and macros) in hy.core.hylp. It may not stay there.

#+BEGIN_SRC hy :results value
(import [hy.core.hylp [*]])
(require hy.core.hylp)

(? "with")
#+END_SRC

#+RESULTS:
#+begin_example
Usage: (with args &rest body)

shorthand for nested with* loops:
  (with [x foo y bar] baz) ->
  (with* [x foo]
    (with* [y bar]
      baz))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::34]]

#+end_example

Compare that to:
#+BEGIN_SRC hy
(help butlast)
#+END_SRC

#+RESULTS:
: Help on function butlast in module hy.core.language:
:
: butlast(coll)
:     Returns coll except of last element.
:

pydoc/? is better because it works on macros too, and gives you more information, and in the form that you use in hy, e.g. =(butlast coll)= not =butlast(coll)=.

I should point out, this is not in hy core anywhere by my github fork right now. It is still being developed. And it isn't perfect or comprehensive yet.

Let's see how good. How about we auto-generate some documentation? We will try to generate help for all the core language functions, shadowed functions, macros, and the compiler @build functions.

This is still hackier than I would like, but there is some tricky name-mangling in hy if there is a - in the name, e.g. what we use for minus, and also if there is a * in the name, it seems to get expanded. I still don't understand why I need to eval all of this here, but it works, and I get an error about no attribute named key if I don't. It seems to have some consequences though of turning some things into Python objects (especially itertools). It is good enough to share for now. Maybe someone will have a good idea ;)

Here is the code that generates the docs with (in org-mode) links to the source! The output follows, and is pretty long. The nice thing about this is the docs are /generated/, so we can update them pretty readily with new versions.

One thing that stands out is the lack of documentation on the compiler defined things. It might be worth figuring out how to put documentation on them, perhaps as an optional argument to the build decorator?

#+BEGIN_SRC hy :results raw
(import [hy.core.hylp [*]])
(require hy.core.hylp)

(print "*** hy version " (. hy __version__))
(print "**** Language")
(for [key (sorted (hy-language-keywords))]
  (print "***** " key)
  (print (eval `(? ~(string key)))))

(print "**** Shadowed")
(for [key (sorted (hy-shadow-keywords))]
  (print "***** " key)
  (print (eval `(? ~(string key)))))

(print "**** Macros")
(for [key (sorted (hy-macro-keywords))]
  (print "***** " key)
  (print (eval `(? ~(string key)))))

(print "**** Compiler functions")
(for [key (sorted (hy-compiler-keywords))]
  (print "***** " key)
  (print (eval `(? ~(string key)))))
#+END_SRC
#+RESULTS:
*** hy version  0.11.0
**** Language
*****  *map
Usage: (*map unknown args)

starmap(function, sequence) --> starmap object

Return an iterator whose values are returned from the function evaluated
with a argument tuple taken from the given sequence.

[[no code::-1]]

*****  accumulate
Usage: (accumulate iterable &optional [func operator.add])

accumulate(iterable[, func]) --> accumulate object

   Return series of accumulated sums (or other binary function results).

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::146]]

*****  butlast
Usage: (butlast coll)

Returns coll except of last element.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::46]]

*****  calling_module_name
Usage: (calling_module_name &optional [n 1])

Get the name of the module calling `n` levels up the stack from the
  `calling-module-name` function call (by default, one level up)

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::224]]

*****  chain
Usage: (chain unknown args)

chain(*iterables) --> chain object

Return a chain object whose .next() method returns elements from the
first iterable until it is exhausted, then elements from the next
iterable, until all of the iterables are exhausted.

[[no code::-1]]

*****  combinations
Usage: (combinations unknown args)

combinations(iterable, r) --> combinations object

Return successive r-length combinations of elements in the iterable.

combinations(range(4), 3) --> (0,1,2), (0,1,3), (0,2,3), (1,2,3)

[[no code::-1]]

*****  compress
Usage: (compress unknown args)

compress(data, selectors) --> iterator over selected data

Return data elements corresponding to true selector elements.
Forms a shorter iterator from selected data elements using the
selectors to choose the data elements.

[[no code::-1]]

*****  cons
Usage: (cons a b)

Return a fresh cons cell with car = a and cdr = b

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::54]]

*****  count
Usage: (count unknown args)

count(start=0, step=1) --> count object

Return a count object whose .next() method returns consecutive values.
Equivalent to:

    def count(firstval=0, step=1):
        x = firstval
        while 1:
            yield x
            x += step


[[no code::-1]]

*****  cycle
Usage: (cycle unknown args)

cycle(iterable) --> cycle object

Return elements from the iterable until it is exhausted.
Then repeat the sequence indefinitely.

[[no code::-1]]

*****  dec
Usage: (dec n)

Decrement n by 1

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::67]]

*****  disassemble
Usage: (disassemble tree &optional [codegen false])

Return the python AST for a quoted Hy tree as a string.
   If the second argument is true, generate python code instead.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::72]]

*****  distinct
Usage: (distinct coll)

Return a generator from the original collection with duplicates
   removed

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::85]]

*****  drop
Usage: (drop count coll)

Drop `count` elements from `coll` and yield back the rest

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::157]]

*****  drop_last
Usage: (drop_last n coll)

Return a sequence of all but the last n elements in coll.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::161]]

*****  drop_while
Usage: (drop_while unknown args)

dropwhile(predicate, iterable) --> dropwhile object

Drop items from the iterable while predicate(item) is true.
Afterwards, return every element until the iterable is exhausted.

[[no code::-1]]

*****  filter
Usage: (filter unknown args)

ifilter(function or None, sequence) --> ifilter object

Return those items of sequence for which function(item) is true.
If function is None, return the items that are true.

[[no code::-1]]

*****  first
Usage: (first coll)

Return first item from `coll`

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::232]]

*****  flatten
Usage: (flatten coll)

Return a single flat list expanding all members of coll

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::189]]

*****  fraction
Usage: (fraction unknown args)

This class implements rational numbers.

    In the two-argument form of the constructor, Fraction(8, 6) will
    produce a rational number equivalent to 4/3. Both arguments must
    be Rational. The numerator defaults to 0 and the denominator
    defaults to 1 so that Fraction(3) == 3 and Fraction() == 0.

    Fractions can also be constructed from:

      - numeric strings similar to those accepted by the
        float constructor (for example, '-2.3' or '1e10')

      - strings of the form '123/456'

      - float and Decimal instances

      - other Rational instances (including integers)



[[no code::-1]]

*****  gensym
Usage: (gensym &optional [g "G"])

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::214]]

*****  group_by
Usage: (group_by unknown args)

groupby(iterable[, keyfunc]) -> create an iterator which returns
(key, sub-iterator) grouped by each value of key(value).


[[no code::-1]]

*****  identity
Usage: (identity x)

Returns the argument unchanged

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::236]]

*****  inc
Usage: (inc n)

Increment n by 1

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::240]]

*****  input
Usage: (input unknown args)

raw_input([prompt]) -> string

Read a string from standard input.  The trailing newline is stripped.
If the user hits EOF (Unix: Ctl-D, Windows: Ctl-Z+Return), raise EOFError.
On Unix, GNU readline is used if enabled.  The prompt string, if given,
is printed without a trailing newline before reading.

[[no code::-1]]

*****  integer
Usage: (integer x)

Return Hy kind of integer

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::248]]

*****  interleave
Usage: (interleave &rest seqs)

Return an iterable of the first item in each of seqs, then the second etc.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::263]]

*****  interpose
Usage: (interpose item seq)

Return an iterable of the elements of seq separated by item

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::267]]

*****  is_coll
Usage: (is_coll coll)

Checks whether item is a collection

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::50]]

*****  is_cons
Usage: (is_cons c)

Check whether c can be used as a cons object

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::58]]

*****  is_empty
Usage: (is_empty coll)

Return True if `coll` is empty

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::167]]

*****  is_even
Usage: (is_even n)

Return true if n is an even number

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::171]]

*****  is_every
Usage: (is_every pred coll)

Return true if (pred x) is logical true for every x in coll, else false

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::176]]

*****  is_float
Usage: (is_float x)

Return True if x is float

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::202]]

*****  is_instance
Usage: (is_instance klass x)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::245]]

*****  is_integer
Usage: (is_integer x)

Return True if x in an integer

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::252]]

*****  is_integer_char
Usage: (is_integer_char x)

Return True if char `x` parses as an integer

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::256]]

*****  is_iterable
Usage: (is_iterable x)

Return true if x is iterable

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::271]]

*****  is_iterator
Usage: (is_iterator x)

Return true if x is an iterator

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::281]]

*****  is_keyword
Usage: (is_keyword k)

Check whether k is a keyword

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::62]]

*****  is_neg
Usage: (is_neg n)

Return true if n is < 0

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::326]]

*****  is_nil
Usage: (is_nil x)

Return true if x is nil (None)

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::335]]

*****  is_none
Usage: (is_none x)

Return true if x is None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::331]]

*****  is_numeric
Usage: (is_numeric x)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::339]]

*****  is_odd
Usage: (is_odd n)

Return true if n is an odd number

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::348]]

*****  is_pos
Usage: (is_pos n)

Return true if n is > 0

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::365]]

*****  is_string
Usage: (is_string x)

Return True if x is a string

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::393]]

*****  is_symbol
Usage: (is_symbol s)

Check whether s is a symbol

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::206]]

*****  is_zero
Usage: (is_zero n)

Return true if n is 0

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::416]]

*****  islice
Usage: (islice unknown args)

islice(iterable, [start,] stop [, step]) --> islice object

Return an iterator whose next() method returns selected values from an
iterable.  If start is specified, will skip all preceding elements;
otherwise, start defaults to zero.  Step defaults to one.  If
specified as another value, step determines how many values are
skipped between successive calls.  Works like a slice() on a list
but returns an iterator.

[[no code::-1]]

*****  iterate
Usage: (iterate f x)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::275]]

*****  keyword
Usage: (keyword value)

Create a keyword from the given value. Strings numbers and even objects
  with the __name__ magic will work

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::445]]

*****  last
Usage: (last coll)

Return last item from `coll`

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::285]]

*****  list*
Usage: (list* hd &rest tl)

Return a dotted list construed from the elements of the argument

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::289]]

*****  macroexpand
Usage: (macroexpand form)

Return the full macro expansion of form

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::295]]

*****  macroexpand_1
Usage: (macroexpand_1 form)

Return the single step macro expansion of form

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::302]]

*****  map
Usage: (map unknown args)

imap(func, *iterables) --> imap object

Make an iterator that computes the function using arguments from
each of the iterables.  Like map() except that it returns
an iterator instead of a list and that it stops when the shortest
iterable is exhausted instead of filling in None for shorter
iterables.

[[no code::-1]]

*****  merge_with
Usage: (merge_with f &rest maps)

Returns a map that consists of the rest of the maps joined onto
   the first. If a key occurs in more than one map, the mapping(s)
   from the latter (left-to-right) will be combined with the mapping in
   the result by calling (f val-in-result val-in-latter).

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::309]]

*****  multicombinations
Usage: (multicombinations unknown args)

combinations_with_replacement(iterable, r) --> combinations_with_replacement object

Return successive r-length combinations of elements in the iterable
allowing individual elements to have successive repeats.
combinations_with_replacement('ABC', 2) --> AA AB AC BB BC CC

[[no code::-1]]

*****  name
Usage: (name value)

Convert the given value to a string. Keyword special character will be stripped.
  String will be used as is. Even objects with the __name__ magic will work

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::456]]

*****  nth
Usage: (nth coll n &optional [default nil])

Return nth item in collection or sequence, counting from 0.
   Return nil if out of bounds unless specified otherwise.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::343]]

*****  partition
Usage: (partition coll &optional [n 2] step [fillvalue -sentinel])

Chunks coll into n-tuples (pairs by default). The remainder, if any, is not
   included unless a fillvalue is specified. The step defaults to n, but can be
   more to skip elements, or less for a sliding window with overlap.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::354]]

*****  permutations
Usage: (permutations unknown args)

permutations(iterable[, r]) --> permutations object

Return successive r-length permutations of elements in the iterable.

permutations(range(3), 2) --> (0,1), (0,2), (1,0), (1,2), (2,0), (2,1)

[[no code::-1]]

*****  product
Usage: (product unknown args)

product(*iterables) --> product object

Cartesian product of input iterables.  Equivalent to nested for-loops.

For example, product(A, B) returns the same as:  ((x,y) for x in A for y in B).
The leftmost iterators are in the outermost for-loop, so the output tuples
cycle in a manner similar to an odometer (with the rightmost element changing
on every iteration).

To compute the product of an iterable with itself, specify the number
of repetitions with the optional repeat keyword argument. For example,
product(A, repeat=4) means the same as product(A, A, A, A).

product('ab', range(3)) --> ('a',0) ('a',1) ('a',2) ('b',0) ('b',1) ('b',2)
product((0,1), (0,1), (0,1)) --> (0,0,0) (0,0,1) (0,1,0) (0,1,1) (1,0,0) ...

[[no code::-1]]

*****  range
Usage: (range unknown args)

xrange(stop) -> xrange object
xrange(start, stop[, step]) -> xrange object

Like range(), but instead of returning a list, returns an object that
generates the numbers in the range on demand.  For looping, this is
slightly faster than range() and more memory efficient.

[[no code::-1]]

*****  read
Usage: (read &optional [from-file sys.stdin] [eof ""])

Read from input and returns a tokenized string.
   Can take a given input buffer to read from

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::421]]

*****  read_str
Usage: (read_str input)

Reads and tokenizes first line of input

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::437]]

*****  reduce
Usage: (reduce unknown args)

reduce(function, sequence[, initial]) -> value

Apply a function of two arguments cumulatively to the items of a sequence,
from left to right, so as to reduce the sequence to a single value.
For example, reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]) calculates
((((1+2)+3)+4)+5).  If initial is present, it is placed before the items
of the sequence in the calculation, and serves as a default when the
sequence is empty.

[[no code::-1]]

*****  remove
Usage: (remove unknown args)

ifilterfalse(function or None, sequence) --> ifilterfalse object

Return those items of sequence for which function(item) is false.
If function is None, return the items that are false.

[[no code::-1]]

*****  repeat
Usage: (repeat unknown args)

repeat(object [,times]) -> create an iterator which returns the object
for the specified number of times.  If not specified, returns the object
endlessly.

[[no code::-1]]

*****  repeatedly
Usage: (repeatedly func)

Yield result of running func repeatedly

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::374]]

*****  rest
Usage: (rest coll)

Get all the elements of a coll, except the first.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::370]]

*****  second
Usage: (second coll)

Return second item from `coll`

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::379]]

*****  some
Usage: (some pred coll)

Return the first logical true value of (pred x) for any x in coll, else nil

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::383]]

*****  string
Usage: (string x)

Cast x as current string implementation

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::387]]

*****  take
Usage: (take count coll)

Take `count` elements from `coll`, or the whole set if the total
    number of entries in `coll` is less than `count`.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::399]]

*****  take_nth
Usage: (take_nth n coll)

Return every nth member of coll
     raises ValueError for (not (pos? n))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::404]]

*****  take_while
Usage: (take_while unknown args)

takewhile(predicate, iterable) --> takewhile object

Return successive entries from an iterable as long as the
predicate evaluates to true for each entry.

[[no code::-1]]

*****  tee
Usage: (tee unknown args)

tee(iterable, n=2) --> tuple of n independent iterators.

[[no code::-1]]

*****  xor
Usage: (xor a b)

Perform exclusive or between two parameters

[[/Users/jkitchin/Dropbox/python/hy/hy/core/language.hy::467]]

*****  zip
Usage: (zip unknown args)

izip(iter1 [,iter2 [...]]) --> izip object

Return a izip object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the shortest iterable in the argument sequence
is exhausted and then it raises StopIteration.  Works like the zip()
function but consumes less memory by returning an iterator instead of
a list.

[[no code::-1]]

*****  zip_longest
Usage: (zip_longest unknown args)

izip_longest(iter1 [,iter2 [...]], [fillvalue=None]) --> izip_longest object

Return an izip_longest object whose .next() method returns a tuple where
the i-th element comes from the i-th iterable argument.  The .next()
method continues until the longest iterable in the argument sequence
is exhausted and then it raises StopIteration.  When the shorter iterables
are exhausted, the fillvalue is substituted in their place.  The fillvalue
defaults to None or can be specified by a keyword argument.


[[no code::-1]]

**** Shadowed
*****  !=
Usage: (!= &rest args)

Shadow != operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::80]]

*****  *
Usage: (* &rest args)

Shadow * operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::47]]

*****  +
Usage: (+ &rest args)

Shadow + operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::27]]

*****  -
Usage: (- &rest args)

Shadow - operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::37]]

*****  /
Usage: (/ &rest args)

Shadow / operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::54]]

*****  <
Usage: (< &rest args)

Shadow < operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::71]]

*****  <=
Usage: (<= &rest args)

Shadow <= operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::74]]

*****  =
Usage: (= &rest args)

Shadow = operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::77]]

*****  >
Usage: (> &rest args)

Shadow > operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::86]]

*****  >=
Usage: (>= &rest args)

Shadow >= operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::83]]

**** Macros
*****  ?
Usage: (? sym)

Return help for SYM which is a string.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/hylp.hy::194]]

*****  _>
Usage: (_> head &rest rest)

Threads the head through the rest of the forms. Inserts
   head as the second item in the first form of rest. If
   there are more forms, inserts the first form as the
   second item in the second form of rest, etc.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::122]]

*****  _>>
Usage: (_>> head &rest rest)

Threads the head through the rest of the forms. Inserts
   head as the last item in the first form of rest. If there
   are more forms, inserts the first form as the last item
   in the second form of rest, etc.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::148]]

*****  car
Usage: (car thing)

Get the first element of a list/cons

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::53]]

*****  cdr
Usage: (cdr thing)

Get all the elements of a thing, except the first

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::58]]

*****  cond
Usage: (cond &rest branches)

shorthand for nested ifs:
   (cond [foo bar] [baz quux]) ->
   (if foo
     bar
     (if baz
       quux))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::63]]

*****  defmacro/g_bang
Usage: (defmacro/g_bang name args &rest body)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::200]]

*****  defmain
Usage: (defmain args &rest body)

Write a function named "main" and do the if __main__ dance

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::234]]

*****  defn
Usage: (defn name lambda-list &rest body)

define a function `name` with signature `lambda-list` and body `body`

[[/Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy::42]]

*****  doto
Usage: (doto form &rest expressions)

Performs a sequence of potentially mutating actions
   on an initial object, returning the resulting object

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::136]]

*****  for
Usage: (for args &rest body)

shorthand for nested for loops:
  (for [x foo
        y bar]
    baz) ->
  (for* [x foo]
    (for* [y bar]
      baz))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::95]]

*****  hylp_info
Usage: (hylp_info sym)

Return Usage, docstring filename, lineno for the string SYM.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/hylp.hy::55]]

*****  if
Usage: (if &rest args)

if with elif

[[/Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy::28]]

*****  if_not
Usage: (if_not test not-branch &optional yes-branch)

Like `if`, but execute the first branch when the test fails

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::162]]

*****  if_python2
Usage: (if_python2 python2-form python3-form)

If running on python2, execute python2-form, else, execute python3-form

[[/Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy::61]]

*****  let
Usage: (let variables &rest body)

Execute `body` in the lexical context of `variables`

[[/Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy::50]]

*****  lif
Usage: (lif &rest args)

Like `if`, but anything that is not None/nil is considered true.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::167]]

*****  lif_not
Usage: (lif_not test not-branch &optional yes-branch)

Like `if-not`, but anything that is not None/nil is considered true.

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::178]]

*****  macro_error
Usage: (macro_error location reason)

error out properly within a macro

[[/Users/jkitchin/Dropbox/python/hy/hy/core/bootstrap.hy::38]]

*****  unless
Usage: (unless test &rest body)

Execute `body` when `test` is false

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::188]]

*****  when
Usage: (when test &rest body)

Execute `body` when `test` is true

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::183]]

*****  with
Usage: (with args &rest body)

shorthand for nested with* loops:
  (with [x foo y bar] baz) ->
  (with* [x foo]
    (with* [y bar]
      baz))

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::34]]

*****  with_gensyms
Usage: (with_gensyms args &rest body)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::193]]

*****  yield_from
Usage: (yield_from expr)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::215]]

**** Compiler functions
*****  !=
Usage: (!= &rest args)

Shadow != operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::80]]

*****  %
Usage: % defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1865]]

*****  %=
Usage: %= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1944]]

*****  &
Usage: & defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1871]]

*****  &=
Usage: &= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1950]]

*****  *
Usage: (* &rest args)

Shadow * operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::47]]

*****  **
Usage: ** defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1866]]

*****  **=
Usage: **= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1945]]

*****  *=
Usage: *= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1942]]

*****  +
Usage: (+ &rest args)

Shadow + operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::27]]

*****  +=
Usage: += defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1939]]

*****  ,
Usage: , defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1481]]

*****  -
Usage: (- &rest args)

Shadow - operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::37]]

*****  .
Usage: . defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1298]]

*****  /
Usage: (/ &rest args)

Shadow / operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::54]]

*****  //
Usage: // defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1908]]

*****  //=
Usage: //= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1941]]

*****  /=
Usage: /= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1940]]

*****  <
Usage: (< &rest args)

Shadow < operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::71]]

*****  <<
Usage: << defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1867]]

*****  <<=
Usage: <<= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1946]]

*****  <=
Usage: (<= &rest args)

Shadow <= operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::74]]

*****  =
Usage: (= &rest args)

Shadow = operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::77]]

*****  >
Usage: (> &rest args)

Shadow > operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::86]]

*****  >=
Usage: (>= &rest args)

Shadow >= operator for when we need to import / map it against something

[[/Users/jkitchin/Dropbox/python/hy/hy/core/shadow.hy::83]]

*****  >>
Usage: >> defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1868]]

*****  >>=
Usage: >>= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1947]]

*****  @
Usage: @ defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1872]]

*****  @=
Usage: @= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1951]]

*****  ^
Usage: ^ defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1870]]

*****  ^=
Usage: ^= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1949]]

*****  _=
Usage: _= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1943]]

*****  and
Usage: and defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1743]]

*****  apply
Usage: apply defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1606]]

*****  assert
Usage: assert defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1113]]

*****  assoc
Usage: assoc defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1390]]

*****  break
Usage: break defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1099]]

*****  continue
Usage: continue defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1106]]

*****  cut
Usage: cut defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1362]]

*****  def
Usage: def defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2054]]

*****  defclass
Usage: defclass defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2345]]

*****  defmacro
Usage: defmacro defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2435]]

*****  defreader
Usage: defreader defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2454]]

*****  del
Usage: del defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1339]]

*****  dict_comp
Usage: dict_comp defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1562]]

*****  dispatch_reader_macro
Usage: dispatch_reader_macro defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2477]]

*****  do
Usage: do defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::754]]

*****  eval
Usage: eval defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::729]]

*****  eval_and_compile
Usage: eval_and_compile defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2491]]

*****  eval_when_compile
Usage: eval_when_compile defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2500]]

*****  except
Usage: except defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::910]]

*****  fn
Usage: fn defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2221]]

*****  for*
Usage: for* defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2117]]

*****  genexpr
Usage: genexpr defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1595]]

*****  get
Usage: get defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1277]]

*****  global
Usage: global defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1130]]

*****  if*
Usage: if* defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1005]]

*****  import
Usage: import defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1211]]

*****  in
Usage: in defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1858]]

*****  is
Usage: is defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1857]]

*****  is_not
Usage: is_not defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1859]]

*****  lambda
Usage: lambda defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2220]]

*****  list_comp
Usage: list_comp defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1518]]

*****  nonlocal
Usage: nonlocal defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1147]]

*****  not
Usage: not defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1715]]

*****  not_in
Usage: not_in defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1860]]

*****  or
Usage: or defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1744]]

*****  quasiquote
Usage: quasiquote defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::710]]

*****  quote
Usage: quote defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::709]]

*****  raise
Usage: raise defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::759]]

*****  require
Usage: require defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1730]]

*****  set_comp
Usage: set_comp defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1544]]

*****  setv
Usage: setv defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2055]]

*****  try
Usage: try defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::788]]

*****  unquote
Usage: unquote defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::723]]

*****  unquote_splicing
Usage: unquote_splicing defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::724]]

*****  while
Usage: while defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::2167]]

*****  with*
Usage: with* defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1426]]

*****  with_decorator
Usage: with_decorator defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1414]]

*****  yield
Usage: yield defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1168]]

*****  yield_from
Usage: (yield_from expr)

None

[[/Users/jkitchin/Dropbox/python/hy/hy/core/macros.hy::215]]

*****  |
Usage: | defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1869]]

*****  |=
Usage: |= defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1948]]

*****  ~
Usage: ~ defined in hy/compiler

No docstring available.

[[/Users/jkitchin/Dropbox/python/hy/hy/compiler.py::1716]]


