
doi:10.1016/j.comphys.2003.12.001



#+tblname: raw-data
|       volume |          energy |
|--------------+-----------------|
| 324.85990899 | -399.9731688470 |
| 253.43999457 | -400.0172393178 |
| 234.03826687 | -400.0256270548 |
| 231.12159387 | -400.0265690700 |
| 228.40609504 | -400.0273551120 |
| 225.86490337 | -400.0280030862 |
| 223.47556626 | -400.0285313450 |
| 221.21992353 | -400.0289534593 |
| 219.08319566 | -400.0292800709 |
| 217.05369547 | -400.0295224970 |
| 215.12089909 | -400.0296863867 |
| 213.27525144 | -400.0297809256 |
| 211.51060823 | -400.0298110000 |
| 203.66743321 | -400.0291665573 |
| 197.07888649 | -400.0275017142 |
| 191.39717952 | -400.0250998136 |
| 186.40163591 | -400.0221371852 |
| 181.94435510 | -400.0187369863 |
| 177.92077043 | -400.0149820198 |
| 174.25380090 | -400.0109367042 |
| 170.88582166 | -400.0066495100 |
| 167.76711189 | -400.0021478258 |
| 164.87096104 | -399.9974753449 |
| 159.62553397 | -399.9876885136 |
| 154.97005460 | -399.9774175487 |
| 150.78475335 | -399.9667603369 |
| 146.97722201 | -399.9557686286 |
| 143.49380641 | -399.9445262604 |


#+BEGIN_SRC python :var data=raw-data
import numpy as np
import matplotlib.pyplot as plt

NATOMS = 3
MW = 62.3018064
E0 = -398.87761

Ha2kJ = 2625.49962
Ha2eV = 27.211396 
au2GPa = 160.2176487  # eV/angstrom**3 to GPa
bohr2ang = 0.529177208 
Hab32GPa = 29421.010901602753

# data
V = np.array([row[0] for row in data]) 
E = np.array([row[1] for row in data]) - E0

from ase.utils.eos import EquationOfState

plt.plot(V, E, '.')
plt.xlabel('Volume ($\AA^3$)')
plt.ylabel('Energy (Ha)')

eos = EquationOfState(V, E)
v0, e0, B = eos.fit()
eos.plot()
print 'Vmin(static; P=0) = {0:1.2f} bohr^3'.format(v0)
print 'Gmin(static; P=0)  = {0:1.2f} kJ/mol\n'.format(e0 * Ha2kJ)

print 'Numerical Equilibrium Properties'
print '================================'

PRESSURES = np.linspace(0, 20, 11) 

print '{0:^6s}{1:>10s}{2:>8s}{3:>8s}{4:>8s}'.format('P(GPa)',
                                               'G(kJ/mol)',
                                               'V(bohr^3)',
                                               'V/V0',
                                               'B(GPa)')
print '-----------------------------------------'
for P in PRESSURES:
    eos = EquationOfState(V, E + P/Hab32GPa * V)
    v, e, B = eos.fit()
    s = '{0:6.2f}{1:10.2f}{2:8.2f}{3:8.2f}{4:8.2f}'
    print s.format(P, e * 2625.49962,
                   v, v / v0,
                   B * Hab32GPa)
#+END_SRC

#+RESULTS:
#+begin_example
Vmin(static; P=0) = 211.88 bohr^3
Gmin(static; P=0)  = -3024.74 kJ/mol

Numerical Equilibrium Properties
================================
P(GPa) G(kJ/mol)V(bohr^3)    V/V0  B(GPa)
-----------------------------------------
  0.00  -3024.74  211.88    1.00  117.68
  2.00  -2987.24  208.42    0.98  126.11
  4.00  -2950.35  205.24    0.97  134.39
  6.00  -2913.99  202.30    0.95  142.53
  8.00  -2878.15  199.56    0.94  150.53
 10.00  -2842.78  196.99    0.93  158.42
 12.00  -2807.85  194.58    0.92  166.19
 14.00  -2773.33  192.31    0.91  173.85
 16.00  -2739.21  190.17    0.90  181.41
 18.00  -2705.46  188.13    0.89  188.87
 20.00  -2672.07  186.19    0.88  196.23
#+end_example

