#+LATEX_CLASS: my-article

* Easy customization of PDF export in org-mode

org-mode provides simple export to PDF via LaTeX, but the layout of the document is not that sophisticated and is based on the regular article class. Let us examine some methods to get an extremely lightweight export of a heading in an org-file. We want to avoid setting things like #+LATEX_CLASS, because that is not /light-weight/. We want a simple command to run that exports for us. The solution will involve some emacs-lisp code to do the export and build, and some variable configuration.

- references, from reftex-default-bibliography if not otherwise specified
- Use heading for title, and file name


\alert{testing}

#+BEGIN_SRC emacs-lisp :exports none
(defun export-my-pdf ()
  (interactive)
  (let ((title (concat (mapconcat 
			#'identity 
			(split-string (nth 4 (org-heading-components)) " ") 
			"-") ".pdf"))
	(content) (tfile)
        (temporary-file-directory (expand-file-name "."))
	(org-latex-classes '(("my-article"     
			     "\\documentclass[12pt]{article}
\\usepackage{lmodern}
[DEFAULT-PACKAGES]
[EXTRA]
\\usepackage[top=1in, bottom=1in, left=1in, right=1in]{geometry}
\\providecommand{\\alert}[1]{\\textbf{#1}}
[PACKAGES]"
				   ("\\section{%s}" . "\\section*{%s}")
				   ("\\subsection{%s}" . "\\subsection*{%s}")
				   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				   ("\\paragraph{%s}" . "\\paragraph*{%s}")
				   ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))))
(org-narrow-to-subtree)
(setq content (buffer-string))

(setq tfile (make-temp-file "foo"))
(find-file tfile) 
(org-mode)
(erase-buffer)
(insert "#+LATEX_CLASS: my-article
,#+OPTIONS: ^:{}\n")
(insert content)
(outline-previous-visible-heading 1)
(org-entry-put nil "EXPORT_FILE_NAME" title)
(rename-file  (org-latex-export-to-pdf) title)

))
(export-my-pdf)
#+END_SRC

#+RESULTS:


* Easy customization of PDF export in org-mode

org-mode provides simple export to PDF via LaTeX, but the layout of the document is not that sophisticated and is based on the regular article class. Let us examine some methods to get an extremely lightweight export of a heading in an org-file. We want to avoid setting things like #+LATEX_CLASS, because that is not /light-weight/. We want a simple command to run that exports for us. The solution will involve some emacs-lisp code to do the export and build, and some variable configuration.

- references, from reftex-default-bibliography if not otherwise specified
- Use heading for title, and file name


\alert{testing}

#+BEGIN_SRC emacs-lisp :exports none
(defun export-my-pdf ()
  (interactive)
  (let ((title (concat (mapconcat 
			#'identity 
			(split-string (nth 4 (org-heading-components)) " ") 
			"-") ".pdf"))
	(content)
	(org-latex-classes '("my-article"     
			     "\\documentclass[12pt]{article}
\\usepackage{lmodern}
[DEFAULT-PACKAGES]
[EXTRA]
\\usepackage[top=1in, bottom=1in, left=1in, right=1in]{geometry}
\\providecommand{\\alert}[1]{\\textbf{#1}}
[PACKAGES]"
				   ("\\section{%s}" . "\\section*{%s}")
				   ("\\subsection{%s}" . "\\subsection*{%s}")
				   ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
				   ("\\paragraph{%s}" . "\\paragraph*{%s}")
				   ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
(org-narrow-to-subtree)
(setq content (buffer-string))
(with-temp-buffer
  (insert "#+LATEX_CLASS: my-article\n")
  (insert content)
  
  ;(org-entry-put (point) "EXPORT_FILE_NAME" title)
  (buffer-string))))

(export-my-pdf)
#+END_SRC


#+end_example


