* Modeling data with splines

Real data is not always easy to model, especially if you do not have a physics based model. Here we examine spline interpolation to model data, and extract information from the data. Here we use data that describes the relationship between the volume of a crystal and the total energy of the crystal (doi:10.1016/j.comphys.2003.12.001).

#+caption: Energy vs. volume for an MgF_2 crystal.
#+tblname: raw-data
|       volume |          energy |
|--------------+-----------------|
| 324.85990899 | -399.9731688470 |
| 253.43999457 | -400.0172393178 |
| 234.03826687 | -400.0256270548 |
| 231.12159387 | -400.0265690700 |
| 228.40609504 | -400.0273551120 |
| 225.86490337 | -400.0280030862 |
| 223.47556626 | -400.0285313450 |
| 221.21992353 | -400.0289534593 |
| 219.08319566 | -400.0292800709 |
| 217.05369547 | -400.0295224970 |
| 215.12089909 | -400.0296863867 |
| 213.27525144 | -400.0297809256 |
| 211.51060823 | -400.0298110000 |
| 203.66743321 | -400.0291665573 |
| 197.07888649 | -400.0275017142 |
| 191.39717952 | -400.0250998136 |
| 186.40163591 | -400.0221371852 |
| 181.94435510 | -400.0187369863 |
| 177.92077043 | -400.0149820198 |
| 174.25380090 | -400.0109367042 |
| 170.88582166 | -400.0066495100 |
| 167.76711189 | -400.0021478258 |
| 164.87096104 | -399.9974753449 |
| 159.62553397 | -399.9876885136 |
| 154.97005460 | -399.9774175487 |
| 150.78475335 | -399.9667603369 |
| 146.97722201 | -399.9557686286 |
| 143.49380641 | -399.9445262604 |

Our objective is to find the volume that minimizes the total energy. Rather than try to fit this data to an equation of state, we will use a cubic spline.

#+BEGIN_SRC python :var data=raw-data
import matplotlib.pyplot as plt
V = [x[0] for x in data]
E = [x[1] for x in data]


plt.plot(V, E)
plt.savefig('images/spline-0.png')
#+END_SRC

#+RESULTS:

[[./images/spline-0.png]]

You can see a minimum near 210. We have a few approaches to finding the minimum. Here is one approach of directly finding the minimum of the spline fit.

#+BEGIN_SRC python :var data=raw-data
from scipy import interpolate
import numpy as np

V = [x[0] for x in data]
E = [x[1] for x in data]

# for spline interpolation the x data must be increasing
V.reverse()
E.reverse()

tck = interpolate.splrep(np.array(V), np.array(E), s=0)

from scipy.optimize import fmin

@np.vectorize
def f(x):
    return interpolate.splev([x], tck, der=0)

print fmin(f, 201)
#+END_SRC

#+RESULTS:
: Optimization terminated successfully.
:          Current function value: -400.029811
:          Iterations: 18
:          Function evaluations: 36
: [ 211.51426964]

