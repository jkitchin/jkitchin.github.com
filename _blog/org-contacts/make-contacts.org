* Creating org-contact entries

Code to create an org-contact with tags

#+BEGIN_SRC emacs-lisp
(defun insert-contact (name email tags)
  (interactive)
  (end-of-buffer)
  (org-insert-heading-after-current)
  (insert name "\n")

(org-entry-put (point) "EMAIL" email)
(org-set-tags-to tags)
)

(insert-contact "John Kitchin" "jkitchin@andrew.cmu.edu" '("co2" "electrochemistry"))
#+END_SRC


Here is the file of AICHE 2013 abstracts

file:C:\Users\jkitchin\Dropbox\CMU\meetings\@planning\AICHE-CRE-planning\2013\2013-planning\CRE-2013.csv

abstract-title 1
session 3
last-name 5
first-name 6
email 7
affiliation 8

We need a list of keywords. I should generate this list from analysis of the text in the titles

| biomass       |
| photo         |
| electro       |
| micro         |
| dft           |
| oxide         |
| hydrogen      |
| wgs\\         |
| microwave     |
| zeolite       |
| carbon        |
| mesoporous    |
| CO2           |
| fischer       |
| acid          |
| base          |
| spectroscop   |
| enviro        |
| molecular     |
| monte carlo   |
| homogeneous   |
| synthesis     |
| selective     |
| enzyme        |
| nanoparticle  |
| fuel          |
| kinetics      |
| surface       |
| poly          |
| reactor       |
| support       |
| hydrode       |
| computational |
| in situ       |
| operando      |
| methane       |
| scr           |
| pyrolysis     |
| alloy         |
| bimetallic    |
| microporous   |

we create a buffer of data and manually save it.
#+BEGIN_SRC emacs-lisp :results silent
(load-file "csv.el")

(let* ((b (find-file "C:\\Users\\jkitchin\\Dropbox\\CMU\\meetings\\@planning\\AICHE-CRE-planning\\2013\\2013-planning\\CRE-2013.csv"))
      (contents (csv-parse-buffer t b)))
(print contents (create-file-buffer "data.el")))
#+END_SRC

now try reading it:

#+BEGIN_SRC emacs-lisp
(car (read (with-temp-buffer
	     (insert-file-contents "data.el")
	     (buffer-string))))
#+END_SRC

#+RESULTS:
| (Abstract ID . 297338) | (Abstract Title . Existence Conditions for Steady State Multiplicity of n-Order Arrhenius Reaction Kinetics in Distributed Parameter System) | (Abstract Submission Date . 2/7/2013) | (Session Title . Modeling and Analysis of Chemical Reactors) | (Program Title . Catalysis and Reaction Engineering Division) | (Last Name . Trinh) | (First Name . Sinh) | (Email Address . trinhsh@msn.com) | (Affiliation . ) | (City . ) | (State . ) | (Country . ) | (Rating . ) | (Presenter . Y) | (Designation . ) |

seems fast.

Now we create 

#+BEGIN_SRC emacs-lisp :results silent
(setq  my-hash (make-hash-table :test 'equal))

(let* ((contents (read (with-temp-buffer
			      (insert-file-contents "data.el")
			      (buffer-string)))))
  (find-file "referee-contacts.org")
  (erase-buffer)
  (insert "* in the beginning\n")
  (mapcar (lambda (x)
	    (let* ((fname (cdr (nth 6 x)))
		   (lname (cdr (nth 5 x)))
		   (email (cdr (nth 7 x)))
		   (affiliation (cdr (nth 8 x))))

	      (unless (gethash email my-hash)
		(end-of-buffer)
		(org-insert-heading-after-current)
		(insert (format "%s, %s\n" lname fname))
		(org-entry-put (point) "FIRSTNAME" fname)
		(org-entry-put (point) "LASTNAME" lname)
		(org-entry-put (point) "EMAIL" email)
		(org-entry-put (point) "AFFILIATION" affiliation)
		(message "inserted %s %s: %s" fname lname email)
		(puthash email t my-hash)))) contents)
  (save-buffer))
#+END_SRC



** test read

#+BEGIN_SRC emacs-lisp
(read "(buffer-name)")
#+END_SRC

#+RESULTS:
| buffer-name |

