#+BEGIN_SRC python
import numpy as np

x,y = np.loadtxt('../../SharedFolders/JFK-SMIlles/Raw Data/Zn (Very Beta)/Zn_20_900mV_6-17-13_1.txt', unpack=True)

#x,y = np.loadtxt('../../SharedFolders/JFK-SMIlles/Raw Data/Ni_KOH_06-06-13 (Very Gamma)/Raman/R_Ni_KOH_Raman_E1_350mV_06-06-13_1.txt', unpack=True)

import matplotlib.pyplot as plt
plt.plot(x, y)
plt.savefig('images/gaussfit-0.png')

def gaussian(x, pars):
    'defines a gaussian function'
    a,b,c = pars
    return a * np.exp(-(x - b)**2 / (2 * c**2))

def lorentz(x, pars):
    a, b, c = pars
    return a * 1.0 / np.pi * 0.5 * c / ((x - b)**2 + 0.25 * c**2)

a0, a1, a2, a3 = 200, 1800, 1600, 500
b0, b1, b2, b3 = 400, 480, 560, 620
c0, c1, c2, c3 = 10, 10, 10, 10

def gaussian3(x, pars):
    pars0 = pars[0:3]
    pars1 = pars[3:6]
    pars2 = pars[6:9]
    pars3 = pars[9:12]
    linepars = pars[12:14]

    return (gaussian(x, pars0)
            + gaussian(x, pars1)
            + gaussian(x, pars2) 
            + gaussian(x, pars3))+ linepars[0]*x + linepars[1]

def lorentz3(x, pars):
    pars0 = pars[0:3]
    pars1 = pars[3:6]
    pars2 = pars[6:9]
    linepars = pars[9:11]

    return (lorentz(x, pars0)
            + lorentz(x, pars1)
            + lorentz(x, pars2)) + linepars[0]*x + linepars[1]

def objective(pars):
    fit = gaussian3(x, pars)
    return np.sum((fit - y)**2)

from scipy.optimize import fmin

guess = [a0, b0, c0, a1, b1, c1, a2, b2, c2, a3, b3, c3, -0.5, 800]
p = fmin(objective, guess, maxiter=5000)
print p
plt.plot(x, gaussian3(x, p))
plt.show()

#+END_SRC

#+RESULTS:
: Warning: Maximum number of function evaluations has been exceeded.
: [  1.86543876e+02   6.48325453e+01  -2.97544102e+00   1.43015776e+03
:    4.88140872e+02   2.39230015e+01   1.35190542e+03   5.60310519e+02
:    1.76785294e+01   3.64622641e+02   6.10062513e+02   1.73507698e+01
:   -4.72763028e-01   7.90502218e+02]

[[./images/gaussfit-0.png]]
