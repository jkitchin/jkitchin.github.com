#    -*- mode: org -*-


Archived entries from file c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/posting-to-citeulike.org


* Doing this in emacs                                              :noexport:
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-10-20 Sun 19:30
  :ARCHIVE_FILE: ~/Dropbox/blogofile-jkitchin.github.com/_blog/posting-to-citeulike.org
  :ARCHIVE_OLPATH: Posting articles to CiteULike from bibtex
  :ARCHIVE_CATEGORY: posting-to-citeulike
  :END:

First, we have to load the cookie that we have saved. Since we saved in json, we can load it in emacs. 

#+BEGIN_SRC emacs-lisp
(require 'json)

(let* ((data (json-read-from-string (with-temp-buffer (insert-file-contents "citeulike.json") (buffer-string))))
      (username (cdr (assoc 'username data))))
    (princ username))
#+END_SRC

#+RESULTS:
: jkitchin

Then, we have to construct the request to get the cookie in emacs-lisp.  

#+BEGIN_SRC emacs-lisp
(defun my-url-http-post (url args)
  "Send ARGS to URL as a POST request."
  (let ((url-request-method "POST")
        (url-request-extra-headers
         '(("Content-Type" . "application/x-www-form-urlencoded")))
        (url-request-data
         (mapconcat (lambda (arg)
                      (concat (url-hexify-string (car arg))
                              "="
                              (url-hexify-string (cdr arg))))
                    args
                    "&")))
    ;; if you want, replace `my-switch-to-url-buffer' with `my-kill-url-buffer'
    (url-retrieve url (lambda (status) (switch-to-buffer (current-buffer))))))

(defun my-kill-url-buffer (status)
  "Kill the buffer returned by `url-retrieve'."
  (kill-buffer (current-buffer)))

(defun my-switch-to-url-buffer (status)
  "Switch to the buffer returned by `url-retreive'.
    The buffer contains the raw HTTP response sent by the server."
  (error "status - %s" status)
  (switch-to-buffer (current-buffer)))

(my-url-http-post "http://www.citeulike.org/login.do" '(("username" . "jkitchin") ("password" . "4iAAmXBU") ("perm" . "1")))

(url-retrieve "http://www.citeulike.org/login.do" (lambda (status) (switch-to-buffer (current-buffer))))


(let ((url-request-method "POST")
      (url-request-extra-headers '(("Content-Type" . "application/x-www-form-urlencoded")))
      (url-request-data "username=jkitchin&password=4iAAmXBU&perm=1"))
  (url-retrieve "http://www.citeulike.org/login.do" (lambda (&rest) (switch-to-buffer (current-buffer)))))


(mapconcat (lambda (arg)
             (concat (url-hexify-string (car arg))
                     "="
                     (url-hexify-string (cdr arg))))
           '(("username" . "jkitchin") ("password" . "4iAAmXBU") ("perm" . "1"))
           "&")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp :results output
(let ((cb (current-buffer))
      (url-request-method "POST")
      (url-request-data "username=jkitchin&password=4iAAmXBU&perm=1"))
  (url-retrieve "http://www.citeulike.org/login.do" 
                (lambda (status) (switch-to-buffer cb) (insert (format "%s" (plist-get :redirect status)) )) nil nil nil))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'json)

(let* ((data (json-read-from-string (with-temp-buffer (insert-file-contents "citeulike.json") (buffer-string))))
      (username (cdr (assoc 'username data)))
      (password (cdr (assoc 'password data))))
      
(request "http://www.citeulike.org/login.do?username=jkitchin&password=4iAAmXBU&perm=1"
         :type "POST"
         :parser 'buffer-string
:success (function*
           (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'form data))))
         :complete (lambda (&rest _) (message (format "%s" rest)))))

(request-cookie-string "http://www.citeulike.org/login.do")
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp

(setq bibtex-string "@article{zhuo-2010-co2-induc,
  author =       {Zhuo, Shengchi and Huang, Yongmin and Peng, Changjun
                  and Liu, Honglai and Hu, Ying and Jiang, Jianwen},
  title =        {CO2-Induced Microstructure Transition of Surfactant
                  in Aqueous Solution: Insight from Molecular Dynamics
                  Simulation},
  journal =      {The Journal of Physical Chemistry B},
  volume =       114,
  number =       19,
  pages =        {6344-6349},
  year =         2010,
  doi =          {10.1021/jp910253b},
  URL =          {http://pubs.acs.org/doi/abs/10.1021/jp910253b},
  eprint =       {http://pubs.acs.org/doi/pdf/10.1021/jp910253b}
}")

(request "http://www.citeulike.org/profile/jkitchin/import_do"
         :type "POST"
         :data `(("pasted" . ,bibtex-string)
                 ("to_read" . "2")
                 ("tag_parsing" . "simple")
                 ("strip_brackets" . "no")
                 ("update_id" . "bib-key")
                 ("btn_bibtex" . "Import BibTeX file ..."))
         :headers '(("Cookie" . "login=5734 jkitchin A61D36ED138FF14EA46872BB54D1924452C607A1"))
         :parser 'buffer-string
         :complete (lambda (&rest _) (message "Finished!")))
#+END_SRC

#+RESULTS:



Archived entries from file c:/Users/jkitchin/Dropbox/blogofile-jkitchin.github.com/_blog/posting-to-citeulike.org


* Doing this in emacs                                              :noexport:
  :PROPERTIES:
  :ARCHIVE_TIME: 2013-10-20 Sun 19:31
  :ARCHIVE_FILE: ~/Dropbox/blogofile-jkitchin.github.com/_blog/posting-to-citeulike.org
  :ARCHIVE_OLPATH: Posting articles to CiteULike from bibtex
  :ARCHIVE_CATEGORY: posting-to-citeulike
  :END:

First, we have to load the cookie that we have saved. Since we saved in json, we can load it in emacs. 

#+BEGIN_SRC emacs-lisp
(require 'json)

(let* ((data (json-read-from-string (with-temp-buffer (insert-file-contents "citeulike.json") (buffer-string))))
      (username (cdr (assoc 'username data))))
    (princ username))
#+END_SRC

#+RESULTS:
: jkitchin

Then, we have to construct the request to get the cookie in emacs-lisp.  

#+BEGIN_SRC emacs-lisp
(defun my-url-http-post (url args)
  "Send ARGS to URL as a POST request."
  (let ((url-request-method "POST")
        (url-request-extra-headers
         '(("Content-Type" . "application/x-www-form-urlencoded")))
        (url-request-data
         (mapconcat (lambda (arg)
                      (concat (url-hexify-string (car arg))
                              "="
                              (url-hexify-string (cdr arg))))
                    args
                    "&")))
    ;; if you want, replace `my-switch-to-url-buffer' with `my-kill-url-buffer'
    (url-retrieve url (lambda (status) (switch-to-buffer (current-buffer))))))

(defun my-kill-url-buffer (status)
  "Kill the buffer returned by `url-retrieve'."
  (kill-buffer (current-buffer)))

(defun my-switch-to-url-buffer (status)
  "Switch to the buffer returned by `url-retreive'.
    The buffer contains the raw HTTP response sent by the server."
  (error "status - %s" status)
  (switch-to-buffer (current-buffer)))

(my-url-http-post "http://www.citeulike.org/login.do" '(("username" . "jkitchin") ("password" . "4iAAmXBU") ("perm" . "1")))

(url-retrieve "http://www.citeulike.org/login.do" (lambda (status) (switch-to-buffer (current-buffer))))


(let ((url-request-method "POST")
      (url-request-extra-headers '(("Content-Type" . "application/x-www-form-urlencoded")))
      (url-request-data "username=jkitchin&password=4iAAmXBU&perm=1"))
  (url-retrieve "http://www.citeulike.org/login.do" (lambda (&rest) (switch-to-buffer (current-buffer)))))


(mapconcat (lambda (arg)
             (concat (url-hexify-string (car arg))
                     "="
                     (url-hexify-string (cdr arg))))
           '(("username" . "jkitchin") ("password" . "4iAAmXBU") ("perm" . "1"))
           "&")
#+END_SRC

#+RESULTS:

#+BEGIN_SRC emacs-lisp :results output
(let ((cb (current-buffer))
      (url-request-method "POST")
      (url-request-data "username=jkitchin&password=4iAAmXBU&perm=1"))
  (url-retrieve "http://www.citeulike.org/login.do" 
                (lambda (status) (switch-to-buffer cb) (insert (format "%s" (plist-get :redirect status)) )) nil nil nil))

#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'json)

(let* ((data (json-read-from-string (with-temp-buffer (insert-file-contents "citeulike.json") (buffer-string))))
      (username (cdr (assoc 'username data)))
      (password (cdr (assoc 'password data))))
      
(request "http://www.citeulike.org/login.do?username=jkitchin&password=4iAAmXBU&perm=1"
         :type "POST"
         :parser 'buffer-string
:success (function*
           (lambda (&key data &allow-other-keys)
             (message "I sent: %S" (assoc-default 'form data))))
         :complete (lambda (&rest _) (message (format "%s" rest)))))

(request-cookie-string "http://www.citeulike.org/login.do")
#+END_SRC

#+RESULTS:



#+BEGIN_SRC emacs-lisp

(setq bibtex-string "@article{zhuo-2010-co2-induc,
  author =       {Zhuo, Shengchi and Huang, Yongmin and Peng, Changjun
                  and Liu, Honglai and Hu, Ying and Jiang, Jianwen},
  title =        {CO2-Induced Microstructure Transition of Surfactant
                  in Aqueous Solution: Insight from Molecular Dynamics
                  Simulation},
  journal =      {The Journal of Physical Chemistry B},
  volume =       114,
  number =       19,
  pages =        {6344-6349},
  year =         2010,
  doi =          {10.1021/jp910253b},
  URL =          {http://pubs.acs.org/doi/abs/10.1021/jp910253b},
  eprint =       {http://pubs.acs.org/doi/pdf/10.1021/jp910253b}
}")

(request "http://www.citeulike.org/profile/jkitchin/import_do"
         :type "POST"
         :data `(("pasted" . ,bibtex-string)
                 ("to_read" . "2")
                 ("tag_parsing" . "simple")
                 ("strip_brackets" . "no")
                 ("update_id" . "bib-key")
                 ("btn_bibtex" . "Import BibTeX file ..."))
         :headers '(("Cookie" . "login=5734 jkitchin A61D36ED138FF14EA46872BB54D1924452C607A1"))
         :parser 'buffer-string
         :complete (lambda (&rest _) (message "Finished!")))
#+END_SRC

#+RESULTS:


