* Transcluding org-elements

This is an experiment at read-only, visual transclusion of org-elements.

#+BEGIN_SRC emacs-lisp :results silent
(defvar *transclude* t "Put overlays on or not")
(setq *transclude* t)

(org-link-set-parameters
 "transclude"
 :face '(:background "gray80")
 :follow (lambda (path)
	   (org-open-link-from-string path))
 :keymap (let ((map (copy-keymap org-mouse-map)))
           (define-key map [C-mouse-1] (lambda ()
					 (interactive)
					 (setq *transclude* (not *transclude*))
					 (unless *transclude*
					   (ov-clear 'transclude))
					 (font-lock-fontify-buffer)))
           map)
 :help-echo "Transcluded element. Click to open source. C-mouse-1 to toggle overlay."
 :activate-func (lambda (start end path bracketp)
		  (if *transclude*
		      (let ((ov (make-overlay start end))
			    el disp)
			(ov-put ov 'transclude t)
			(save-window-excursion
			  (org-open-link-from-string path)
			  (setq el (org-element-context))
			  (setq disp (buffer-substring
				      (org-element-property :begin el)
				      (- (org-element-property :end el)
					 (or (org-element-property :post-blank el) 0))))
			  (ov-put ov 'display disp)))
		    (ov-clear 'transclude 'any start end))))
#+END_SRC



transclude:file:transcluding-org-elements.org::tes

transclude:file:transcluding-org-elements.org::*archive

** archive
   :PROPERTIES:
   :ID:       86BC445E-44C3-463B-A7E5-A4C8BCF1CEF1
   :END:
#+BEGIN_SRC emacs-lisp
(defvar ot-element nil
  "The org-element to transclude.")


(defun ot-copy ()
  (interactive)
  (setq ot-element (org-element-context)))

(defun ot-update-linked-element (ov after beg end &optional length)
  (let ((inhibit-modification-hooks  t)
	(linked-ov (overlay-get ov 'linked-ov))
	(element (save-excursion
		   (goto-char (ov-beg ov))
		   (org-element-context))))

    (setf (buffer-substring (ov-beg linked-ov)
			    (ov-end linked-ov))
	  (buffer-substring
	   (org-element-property :begin element )
	   (org-element-property :end element)))
    (move-overlay linked-ov (ov-beg linked-ov)
		  (+ (ov-beg linked-ov)
		     (- (org-element-property :end element)
			(org-element-property :begin element))))))

(defun ot-paste ()
  "Paste the element in and setup hooks."
  (interactive)
  (let* ((p (point))
	 (id (org-id-new))
	 (source-ov (make-overlay (org-element-property :begin ot-element)
				  (org-element-property :end ot-element)))
	 (ot-ov))

    (overlay-put source-ov 'face '(:background "SlateGray3"))

    ;; insert the element at point and put an overlay on it
    (insert (buffer-substring (org-element-property :begin ot-element)
			      (org-element-property :end ot-element)))

    (setq ot-ov (make-overlay p (+ p (- (org-element-property :end ot-element)
					(org-element-property :begin ot-element)))))
    (overlay-put ot-ov 'face '(:background "SlateGray2"))
    (overlay-put ot-ov 'read-only t)

    ;; the source ov
    (overlay-put source-ov 'ot-id id)
    (overlay-put source-ov 'linked-ov ot-ov)

    ;; When we modify the source, we need to update the transcluded element
    (overlay-put
     source-ov 'modification-hooks
     '(ot-update-linked-element))))
#+END_SRC

#+RESULTS:
: ot-paste

(setq inhibit-modification-hooks nil)

#+BEGIN_SRC python
print(5)
#+END_SRC

#+RESULTS:
: 5

(delete-all-overlays)

#+name: test
| 555 | 66      |
|  te | tef     |
| 555 | ftre 5f |
| 555 | ftre 5f |
