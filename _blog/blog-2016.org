* DONE Adding captions and attributes to figures and tables from code blocks in org-mode
  CLOSED: [2016-02-26 Fri 12:43]
  :PROPERTIES:
  :categories: orgmode
  :date:     2016/02/26 12:43:37
  :updated:  2016/02/26 12:43:37
  :END:

I have wanted for a long time to be able to add captions and attributes to figures and tables generated from code blocks. I brought this up on the mailing list (https://lists.gnu.org/archive/html/emacs-orgmode/2015-11/msg00544.html) and finally, I have figured out a way to do it that seems ok. It is based on the :wrap feature of org-babel.

The idea is to use a function that will wrap the results in additional text. We use this function that will add a caption and attributes.

#+BEGIN_SRC emacs-lisp
(defun src-decorate (&optional caption attributes)
  "A wrap function for src blocks."
  (concat
   "ORG\n"
   (when attributes
     (concat (mapconcat 'identity attributes "\n") "\n"))
   (when caption
     (format "#+caption: %s" caption))))
#+END_SRC

#+RESULTS:
: src-decorate

Now, we try it out on a figure:

#+BEGIN_SRC python :wrap (src-decorate "A sin wave. Yep, it works. label:fig-sin" '("#+attr_latex: :width 3in" "#+attr_org: :width 300" ))
import numpy as np
import matplotlib.pyplot as plt

x = np.linspace(0, 2 * np.pi)
y = np.sin(x)

plt.plot(x, y)
plt.savefig('images/sin.png')
print('[[./images/sin.png' + ']]')
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+attr_latex: :width 3in
#+attr_org: :width 300
#+caption: A sin wave. label:fig-sin
[[./images/sin.png]]
#+END_ORG

Success. We can even refer to Fig. ref:fig-sin. Next, we try it on a table.

#+BEGIN_SRC python :results value :wrap (src-decorate "A table of sin data. label:tab-sin" '("#+attr_latex: :placement [H]"))
import numpy as np

x = np.linspace(0, 2 * np.pi, 5)
y = np.sin(x)

return [['x', 'y'], None] + list(zip(x, y))
#+END_SRC

#+RESULTS:
#+BEGIN_ORG
#+attr_latex: :placement [H]
#+caption: A table of sin data. label:tab-sin
|                  x |                       y |
|--------------------+-------------------------|
|                0.0 |                     0.0 |
| 1.5707963267948966 |                     1.0 |
|  3.141592653589793 |  1.2246467991473532e-16 |
|   4.71238898038469 |                    -1.0 |
|  6.283185307179586 | -2.4492935982947064e-16 |
#+END_ORG

Sweet.  We can refer to Tab. ref:tab-sin too. I have wanted this for a long time.  Perseverance wins again! and org-mode gets better. Hopefully this works with org 8.3 too!


* DONE Pycse is now using Python3
  CLOSED: [2016-02-25 Thu 19:09]
  :PROPERTIES:
  :categories: python
  :date:     2016/02/25 19:09:20
  :updated:  2016/02/25 19:17:16
  :END:
I spent the last couple of days going through the notes for [[http://kitchingroup.cheme.cmu.edu/pycse][pycse]] and updating it for Python 3! If you aren't familiar with pycse, it is an acronym for Python3 Calculations in Science and Engineering, and it is about 400 pages of examples spanning scientific and engineering computations, and a python module that extends numpy/scipy with some functions for adding events to differential equation solvers, and regression with confidence intervals.

It is mostly done, and was pretty easy. The Python module for pycse
(http://github.com/jkitchin/pycse) should also be Python 3 compliant. Yep, on my
Mac I have switched over to the Anaconda Python 3 from Continuum IO (thanks for
that!).

#+BEGIN_SRC python
import sys
print(sys.version)
#+END_SRC

#+RESULTS:
: 3.5.1 |Anaconda 2.5.0 (x86_64)| (default, Dec  7 2015, 11:24:55)
: [GCC 4.2.1 (Apple Inc. build 5577)]

Now we can succinctly do matrix multiplication like this:

#+BEGIN_SRC python
import numpy as np
a = np.array([1, 2, 3])
a = np.array([1, 2, 3])
print(a @ a)  # the matrix multiplication operator

# instead of
print(np.dot(a, a))
#+END_SRC

#+RESULTS:
: 14
: 14

Here is a summary of what the changes to the Python2 version of Pycse entailed.

1. Change all print statements to print functions. There were so many...
2. Eliminate use of tabs in some code blocks, Python3 is not flexible on that.

I wrote this function to fix both of these for me (I use Emacs as my editor), which worked nicely:
#+BEGIN_SRC emacs-lisp
(defun fp ()
  "convert print to print() allowing for line end comments. does not do multiline.
and untabify"
  (interactive)
  (beginning-of-line)
  (re-search-forward "print " (line-end-position) t)
  (delete-char -1)
  (insert "(")
  ;; rm spaces
  (delete-forward-char
   (save-excursion
     (skip-chars-forward " ")))
  (when
      (re-search-forward "#" (line-end-position) 'move)
    (goto-char (match-beginning 0)))
  (skip-chars-backward " ")
  (insert ")")
  ;; untabify
  (let ((src (org-element-context)))
    (untabify (org-element-property :begin src)
	      (org-element-property :end src))))
#+END_SRC

3. reduce no longer exists, you have to use functools.reduce. Probably will not affect me much...
4. Strings are sometimes bytes, and need to be encoded/decoded depending on what you are doing.

Otherwise, most things seemed to work fine. In a few places I had articles on Windows specific code, which I couldn't test on the Mac I work on now. Only one package was apparently not ready for Python3, and that was scimath from Enthought, which had units capability. Quantities worked fine though.

For some reason I could not do interactive key-presses in matplotlib. I am not sure if that is a Python3, or my Mac setup for now.

When I first wrote the Pycse book (in org-mode naturally), I must have had a default session setup for org-mode, because there was no :session information in a few of the src-block headers. I had to add these back in a few places.

Overall the transition was pretty seamless. It looks like I will be transitioning to Python3 in teaching this fall! Big thanks to the Anaconda team for packaging Python 3.5 and making it so easy to install!

* DONE Generating an alphabetized list of collaborators from the past five years
  CLOSED: [2016-02-20 Sat 17:24]
  :PROPERTIES:
  :categories: python,scopus
  :date:     2016/02/20 17:03:13
  :updated:  2016/02/20 17:24:16
  :END:
Almost every proposal I write requires some list of my coauthors from the past several years. Some want the list alphabetized, and some want affiliations too. It has always bothered me to make this list, mostly because it is tedious, and it seems like something that should not be hard to generate. It turns out it is not too hard. I have been developing a Python interface ((https://github.com/jkitchin/scopus)) to [[http://scopus.com][Scopus]] that more or less enables me to script this.

Scopus is not free. You need either a license, or institutional access to use it. Here is the strategy to generate my list of coauthors. First, we need to get the articles for the past 5 years that are mine, and for each paper we get the coauthors. I use my Scopus author id in the query, and then sort the names alphabetically into a table. Then, I use that table as input to a second code block that does an author query in Scopus to get the current affiliations. Here is the code.

#+name: coauthors
#+BEGIN_SRC python :results value
from scopus.scopus_api import ScopusAbstract
from scopus.scopus_search import ScopusSearch

s = ScopusSearch('AU-ID(7004212771) AND PUBYEAR > 2010')

coauthors = {}
for eid in s.EIDS:
    ab = ScopusAbstract(eid)
    for au in ab.authors:
        if au.auid not in coauthors and au.auid != '7004212771':
            coauthors[au.auid] = au.indexed_name

return sorted([[auid, name] for auid,name in coauthors.items()], key=lambda x:x[1])
#+END_SRC

#+RESULTS: coauthors
| 52463103500 | Akhade S.A.          |
|  6506329719 | Albenze E.           |
| 36472906200 | Alesi W.R.           |
| 56963752500 | Anna S.L.            |
| 56522803500 | Boes J.R.            |
| 26433085700 | Calle-Vallejo F.     |
| 54973276000 | Chao R.              |
|  7201800897 | Collins T.J.         |
| 54883867200 | Curnan M.T.          |
|  7003584159 | Damodaran K.         |
| 55328415000 | Demeter E.L.         |
| 37005464900 | Dsilva C.            |
| 18037364800 | Egbebi A.            |
| 35603120700 | Eslick J.C.          |
| 56673468200 | Fan Q.               |
| 24404182600 | Frenkel A.I.         |
| 35514271900 | Gellman A.J.         |
| 12803603300 | Gerdes K.            |
| 54585146800 | Gumuslu G.           |
| 55569145100 | Hallenbeck A.P.      |
| 24316829300 | Hansen H.A.          |
| 56009239000 | Hilburg S.L.         |
| 55676869000 | Hopkinson D.         |
| 56674328100 | Illes S.M.           |
| 23479647900 | Inoglu N.G.          |
|  6603398169 | Jaramillo T.F.       |
|  8054222900 | Joshi Y.V.           |
| 47962378000 | Keturakis C.         |
| 57056061900 | Kondratyuk P.        |
| 55391991800 | Kondratyuk P.        |
|  7006205398 | Koper M.T.M.         |
| 23004637900 | Kusuma V.A.          |
| 35787409400 | Landon J.            |
| 55005205100 | Lee A.S.             |
|  6701399651 | Luebke D.R.          |
| 35491189200 | Man I.C.             |
| 27467500000 | Mantripragada H.     |
| 55373026900 | Mao J.X.             |
| 55210428500 | Marks A.             |
| 27667815700 | Martinez J.I.        |
| 56071079300 | Mehta P.             |
| 56673592900 | Michael J.D.         |
| 55772901000 | Miller D.C.          |
|  7501599910 | Miller J.B.          |
| 26032231600 | Miller S.D.          |
| 35576929100 | Morreale B.          |
| 55308251800 | Munprom R.           |
| 14036290400 | Myers C.R.           |
|  7007042214 | Norskov J.K.         |
| 24081524800 | Nulwala H.B.         |
| 56347288000 | Petrova R.           |
|  7006208748 | Pushkarev V.V.       |
| 56591664500 | Raman S.             |
|  7004217247 | Resnik K.P.          |
| 47962694800 | Richard Alesi Jr. W. |
|  9742604300 | Rossmeisl J.         |
|  7201763336 | Rubin E.S.           |
|  6602471339 | Sabolsky E.M.        |
|  7004541416 | Salvador P.A.        |
| 22981503200 | Shi W.               |
| 55885836600 | Siefert N.S.         |
| 25224517700 | Su H.-Y.             |
| 57016792200 | Thirumalai H.        |
|  8724572500 | Thompson R.L.        |
|  8238710700 | Vasic R.             |
| 37081979100 | Versteeg P.          |
|  7006804734 | Wachs I.E.           |
|  6701692232 | Washburn N.R.        |
| 56542538800 | Watkins J.D.         |
| 55569461200 | Xu Z.                |
| 56424861600 | Yin C.               |
| 56969809500 | Zhou X.              |

It is worth inspecting this list for duplicates. I see at least two duplicates. That is a limitation of almost every indexing service I have seen. Names are hard to disambiguate. I will live with it. Now, we will use another query to get affiliations, and the names. Since we use a sorted list from above, these names are in alphabetical order. We exclude co-authors from Carnegie Mellon University since these are often my students, or colleagues, and they are obvious conflicts of interest for proposal reviewing anyway. I split the current affiliation on a comma, since it appears the institution comes first, followed by the department. We only need an institution here.

#+BEGIN_SRC python :var data=coauthors
from scopus.scopus_author import ScopusAuthor

coauthors = [ScopusAuthor(auid) for auid, name in data]

print(', '.join(['{0} ({1})'.format(au.name, au.current_affiliation.split(',')[0])
                 for au in coauthors
                 if au.current_affiliation.split(',')[0] != 'Carnegie Mellon University']))
#+END_SRC

#+RESULTS:
: Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)

This is pretty sweet. I could pretty easily create a query that had all the PIs on a proposal, and alphabetize everyone's coauthors, or print them to a CSV file for import to Excel, or whatever format is required for conflict of interest reporting. The list is not perfect, but it is easy to manually fix it here.

That little bit of code is wrapped in a command-line utility in the scopus Python package. You use it like this. Just run it every time you need an updated list of coauthors! It isn't super flexible for now, e.g. excluding multiple affiliations, including multiple authors, etc... isn't fully supported.

#+BEGIN_SRC sh :dir ../../Dropbox/python/scopus/scopus/bin
./scopus_coauthors 7004212771 2010 --exclude-affiliation="Carnegie Mellon University"
#+END_SRC

#+RESULTS:
: Sneha A. Akhade (Pennsylvania State University), Erik J. Albenze (National Energy Technology Laboratory), Federico Calle-Vallejo (Leiden Institute of Chemistry), Robin Chao (National Energy Technology Laboratory), Krishnan V. Damodaran (University of Pittsburgh), Carmeline J. Dsilva (Princeton University), Adefemi A. Egbebi (URS), John C. Eslick (National Energy Technology Laboratory), Anatoly I. Frenkel (Yeshiva University), Kirk R. Gerdes (National Energy Technology Laboratory), Heine Anton Hansen (Danmarks Tekniske Universitet), David P. Hopkinson (National Energy Technology Laboratory), Thomas Francisco Jaramillo (Fermi National Accelerator Laboratory), Yogesh V. Joshi (Exxon Mobil Research and Engineering), Christopher J. Keturakis (Lehigh University), Marc T M Koper (Leiden Institute of Chemistry), Victor A. Kusuma (National Energy Technology Laboratory), James Landon (University of Kentucky), David R. Luebke (Liquid Ion Solutions), Isabelacostinela Man (Universitatea din Bucuresti), James X. Mao (University of Pittsburgh), José Ignacio Martínez (CSIC - Instituto de Ciencia de Materiales de Madrid (ICMM)), David C M Miller (National Energy Technology Laboratory), Bryan D. Morreale (National Energy Technology Laboratory), Christina R. Myers (National Energy Technology Laboratory), Jens Kehlet Nørskov (Stanford Linear Accelerator Center), Rumyana V. Petrova (International Iberian Nanotechnology Laboratory), Vladimir V. Pushkarev (Dow Corning Corporation), Sumathy Raman (Exxon Mobil Research and Engineering), Kevin P. Resnik (URS), Walter Richard Alesi (National Energy Technology Laboratory), Jan Rossmeisl (Kobenhavns Universitet), Edward M. Sabolsky (West Virginia University), Wei Shi (University of Pittsburgh), Nicholas S. Siefert (National Energy Technology Laboratory), Haiyan Su (Dalian Institute of Chemical Physics Chinese Academy of Sciences), Robert Lee Thompson (University of Pittsburgh Medical Center), Relja Vasić (SUNY College of Nanoscale Science and Engineering), Israel E. Wachs (Lehigh University), John D. Watkins (National Energy Technology Laboratory), Chunrong Yin (United States Department of Energy), Xu Zhou (Liquid Ion Solutions)


* DONE Interactive figures in blog posts with mpld3
  CLOSED: [2016-02-08 Mon 07:33]
  :PROPERTIES:
  :categories: python,plotting,interactive
  :date:     2016/02/08 07:33:23
  :updated:  2016/02/08 07:33:23
  :END:

Continuing the exploration of interactive figures, today we consider the Python plotting library [[http://mpld3.github.io/index.html][mpld3]]. We will again use our own published data. We wrote this great paper on core level shifts (CLS) in Cu-Pd alloys cite:boes-2015-core-cu. I want an interactive figure that shows the name of the calculation on each point as a tooltip. This data is all stored in the supporting information file, and you can see how we use it [[id:17D73543-F528-459D-95EF-B3AB3C4EEDC7][here]]. This figure shows how the core level shift of a Cu atom changes depending on the number of nearest neighbor Cu atoms. Just hover your mouse over a point to see the name and CLS for that point.

#+RESULTS: mpld3-figure
#+BEGIN_HTML


<style>

</style>

<div id="fig_el8116045214667689201799167"></div>
<script>
function mpld3_load_lib(url, callback){
  var s = document.createElement('script');
  s.src = url;
  s.async = true;
  s.onreadystatechange = s.onload = callback;
  s.onerror = function(){console.warn("failed to load library " + url);};
  document.getElementsByTagName("head")[0].appendChild(s);
}

if(typeof(mpld3) !== "undefined" && mpld3._mpld3IsLoaded){
   // already loaded: just create the figure
   !function(mpld3){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

       mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
   }(mpld3);
}else if(typeof define === "function" && define.amd){
   // require.js is available: use it to load d3/mpld3
   require.config({paths: {d3: "https://mpld3.github.io/js/d3.v3.min"}});
   require(["d3"], function(d3){
      window.d3 = d3;
      mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

         mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
      });
    });
}else{
    // require.js not available: dynamically load d3 & mpld3
    mpld3_load_lib("https://mpld3.github.io/js/d3.v3.min.js", function(){
         mpld3_load_lib("https://mpld3.github.io/js/mpld3.v0.2.js", function(){

    mpld3.register_plugin("htmltooltip", HtmlTooltipPlugin);
    HtmlTooltipPlugin.prototype = Object.create(mpld3.Plugin.prototype);
    HtmlTooltipPlugin.prototype.constructor = HtmlTooltipPlugin;
    HtmlTooltipPlugin.prototype.requiredProps = ["id"];
    HtmlTooltipPlugin.prototype.defaultProps = {labels:null, hoffset:0, voffset:10};
    function HtmlTooltipPlugin(fig, props){
        mpld3.Plugin.call(this, fig, props);
    };

    HtmlTooltipPlugin.prototype.draw = function(){
       var obj = mpld3.get_element(this.props.id);
       var labels = this.props.labels;
       var tooltip = d3.select("body").append("div")
                    .attr("class", "mpld3-tooltip")
                    .style("position", "absolute")
                    .style("z-index", "10")
                    .style("visibility", "hidden");

       obj.elements()
           .on("mouseover", function(d, i){
                              tooltip.html(labels[i])
                                     .style("visibility", "visible");})
           .on("mousemove", function(d, i){
                    tooltip
                      .style("top", d3.event.pageY + this.props.voffset + "px")
                      .style("left",d3.event.pageX + this.props.hoffset + "px");
                 }.bind(this))
           .on("mouseout",  function(d, i){
                           tooltip.style("visibility", "hidden");});
    };

                 mpld3.draw_figure("fig_el8116045214667689201799167", {"axes": [{"xlim": [-0.10000000000000001, 5.0999999999999996], "yscale": "linear", "axesbg": "#FFFFFF", "texts": [{"v_baseline": "hanging", "h_anchor": "middle", "color": "#000000", "text": "# Cu Nearest neighbors", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [0.5, -0.059895833333333329], "rotation": -0.0, "id": "el811604301509136"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Cu 2p(3/2) Core Level Shift (eV)", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 12.0, "position": [-0.081149193548387094, 0.5], "rotation": -90.0, "id": "el811604590615056"}, {"v_baseline": "auto", "h_anchor": "middle", "color": "#000000", "text": "Hover over a point to see the calculation name", "coordinates": "axes", "zorder": 3, "alpha": 1, "fontsize": 14.399999999999999, "position": [0.5, 1.0144675925925926], "rotation": -0.0, "id": "el811604590601360"}], "zoomable": true, "images": [], "xdomain": [-0.10000000000000001, 5.0999999999999996], "ylim": [-1.1499999999999999, -0.59999999999999998], "paths": [], "sharey": [], "sharex": [], "axesbgalpha": null, "axes": [{"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "bottom", "nticks": 8, "tickvalues": null}, {"scale": "linear", "tickformat": null, "grid": {"gridOn": false}, "fontsize": 12.0, "position": "left", "nticks": 8, "tickvalues": null}], "lines": [], "markers": [], "id": "el811604578565392", "ydomain": [-1.1499999999999999, -0.59999999999999998], "collections": [{"paths": [[[[0.0, -0.5], [0.13260155, -0.5], [0.25978993539242673, -0.44731684579412084], [0.3535533905932738, -0.3535533905932738], [0.44731684579412084, -0.25978993539242673], [0.5, -0.13260155], [0.5, 0.0], [0.5, 0.13260155], [0.44731684579412084, 0.25978993539242673], [0.3535533905932738, 0.3535533905932738], [0.25978993539242673, 0.44731684579412084], [0.13260155, 0.5], [0.0, 0.5], [-0.13260155, 0.5], [-0.25978993539242673, 0.44731684579412084], [-0.3535533905932738, 0.3535533905932738], [-0.44731684579412084, 0.25978993539242673], [-0.5, 0.13260155], [-0.5, 0.0], [-0.5, -0.13260155], [-0.44731684579412084, -0.25978993539242673], [-0.3535533905932738, -0.3535533905932738], [-0.25978993539242673, -0.44731684579412084], [-0.13260155, -0.5], [0.0, -0.5]], ["M", "C", "C", "C", "C", "C", "C", "C", "C", "Z"]]], "edgecolors": ["#000000"], "edgewidths": [1.0], "offsets": "data01", "yindex": 1, "id": "el811604578805904", "pathtransforms": [[5.555555555555555, 0.0, 0.0, 5.555555555555555, 0.0, 0.0]], "pathcoordinates": "display", "offsetcoordinates": "data", "zorder": 1, "xindex": 0, "alphas": [null], "facecolors": ["#007F00"]}], "xscale": "linear", "bbox": [0.125, 0.099999999999999978, 0.77500000000000002, 0.80000000000000004]}], "height": 480.0, "width": 640.0, "plugins": [{"type": "reset"}, {"enabled": false, "button": true, "type": "zoom"}, {"enabled": false, "button": true, "type": "boxzoom"}, {"voffset": 0, "labels": ["I2C0 (2, -0.935278)", "I2C1 (2, -0.946807)", "I2C2 (2, -0.943939)", "I3C0 (3, -0.833261)", "I3C1 (3, -0.843403)", "I3C2 (3, -0.855672)", "I4C0 (4, -0.724523)", "I4C1 (4, -0.747264)", "I4C2 (4, -0.747883)", "I4C3 (4, -0.735007)", "I4C4 (4, -0.736147)", "I5C0 (5, -0.632788)", "I5C1 (5, -0.646229)", "I5C2 (5, -0.654132)", "(1, -1.041875)", "(0, -1.127344)"], "type": "htmltooltip", "id": "el811604578805904", "hoffset": 10}], "data": {"data01": [[2.0, -0.9352779999999825], [2.0, -0.9468069999999216], [2.0, -0.9439389999999435], [3.0, -0.8332609999999363], [3.0, -0.8434029999999382], [3.0, -0.85567199999997], [4.0, -0.7245230000000049], [4.0, -0.747263999999916], [4.0, -0.7478829999999164], [4.0, -0.7350069999999391], [4.0, -0.7361470000000168], [5.0, -0.6327879999999766], [5.0, -0.6462289999999484], [5.0, -0.6541319999999757], [1.0, -1.0418749999999761], [0.0, -1.1273439999999653]]}, "id": "el811604521466768"});
            })
         });
}
</script>
#+END_HTML

** Data and code
   :PROPERTIES:
   :ID:       17D73543-F528-459D-95EF-B3AB3C4EEDC7
   :END:
You can check out our preprint at https://github.com/KitchinHUB/kitchingroup-51.  We are going to adapt the code to make Figure 6a in the manuscript interactive. The code needed a somewhat surprising amount of adaptation. Apparently the ase database interface has changed a lot since we write that paper, so the code here looks a bit different than what we published. The biggest difference is due to name-mangling so each key that started with a number now starts with _, and and periods are replaced by _ also. The rest of the script is nearly unchanged. At the end is the very small bit of mpld3 code that generates the figure for html. We will add tooltips onto datapoints to indicate what the name associated with each data point is. Here is the code.

#+name: mpld3-figure
#+BEGIN_SRC python :results output :wrap HTML
import matplotlib.pyplot as plt
from ase.db import connect

# loads the ASE database and select certain keywords
db = connect('~/Desktop/cappa/kitchingroup-51/supporting-information/data.json')

keys = ['bcc', 'GS', '_54atom', 'ensam']

CLS, IMP, labels = [], [], []
for k in db.select(keys + ['_1cl']):
    name = k.keywords[-2]

    Cu0 = db.select('bcc,GS,_72atom,_0cl,_1_00Cu').next().energy
    Cu1 = db.select('bcc,GS,_72atom,_1cl,_1_00Cu').next().energy
    x0 = db.select(','.join(keys + [name, '_0cl'])).next().energy
    x1 = k.energy

    cls0 = x0 - Cu0
    cls1 = x1 - Cu1

    IMP.append(int(name[1]))
    CLS.append(cls1 - cls0)
    labels += ['{0} ({1}, {2})'.format(name, int(name[1]), cls1 - cls0)]

Cu0 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_0cl', '_1_00Cu'])).next().energy
Cu1 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_1cl', '_1_00Cu'])).next().energy

x0 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_0cl', '_1'])).next().energy
x1 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_1cl', '_1'])).next().energy

cls0 = x0 - Cu0
cls1 = x1 - Cu1

IMP.append(1)
CLS.append(cls1 - cls0)
labels += ['(1, {0})'.format(cls1 - cls0)]

Cu0 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_0cl', '_1_00Cu'])).next().energy
Cu1 = db.select(','.join(['bcc', 'GS', '_72atom',
                          '_1cl', '_1_00Cu'])).next().energy

x0 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_0cl', '_0'])).next().energy
x1 = db.select(','.join(['bcc', 'GS', '_54atom',
                         '_1cl', '_0'])).next().energy

cls0 = x0 - Cu0
cls1 = x1 - Cu1

IMP.append(0)
CLS.append(cls1 - cls0)
labels += ['(0, {0})'.format(cls1 - cls0)]

fig = plt.figure()

p = plt.scatter(IMP, CLS, c='g', marker='o', s=25)
ax1 = plt.gca()
ax1.set_ylim(-1.15, -0.6)
ax1.set_xlim(-0.1, 5.1)

ax1.set_xlabel('# Cu Nearest neighbors')
ax1.set_ylabel('Cu 2p(3/2) Core Level Shift (eV)')

ax1.set_title('Hover over a point to see the calculation name')

# Now the mpld3 stuff.
import mpld3
from mpld3 import plugins

tooltip = plugins.PointHTMLTooltip(p, labels, voffset=0, hoffset=10)
plugins.connect(fig, tooltip)

print mpld3.fig_to_html(fig)
#+END_SRC

I like this workflow pretty well. It
 seems less functional than plotly and Bokeh (e.g. it does not look like it you can export the data from the html here), but it is well integrated with Matplotlib, with my blogging style, and does not require a server, oran account. The code outputs html that is self-contained in the body of the html. The smooth integration with Matplotlib means I could have static images in org-mode, and dynamic images in HTML potentially. Overall, this is a nice tool for making interactive plots in blog posts.

** References
bibliography:~/Dropbox/bibliography/references.bib
* DONE Interactive plots in HTML with Plotly
  CLOSED: [2016-02-06 Sat 12:44]
  :PROPERTIES:
  :categories: python,plotting,interactive
  :date:     2016/02/06 12:44:53
  :updated:  2016/02/06 12:44:53
  :END:

Most of the plots in this blog are static. Today, I look at making them interactive. I will use https://plot.ly for this. I want to use some data from a paper we published on the relative stabilities of oxide polymorphs cite:mehta-2015-ident-poten. We will make an interactive figure showing the relative stabilities of the RuO_{2} polymorphs. When you hover on a point, it will show you which polymorph the point refers to. Let's see the figure first here. If you think its interesting read on to see how we made it!

#+RESULTS: ruo2-html
#+BEGIN_HTML
<iframe id="igraph" scrolling="no" style="border:none;"seamless="seamless" src="https://plot.ly/~jkitchin/4.embed" height="525" width="100%"></iframe>
#+END_HTML


We get our data source here: http://pubs.acs.org/doi/suppl/10.1021/am4059149/suppl_file/am4059149_si_001.pdf.

Now, we extract the data files:
#+BEGIN_SRC sh
pdftk ~/Desktop/am4059149_si_001.pdf  unpack_files
#+END_SRC

That extracts a json file called supporting-information.json. We use it as suggested in the SI pdf to plot the equations of state for RuO_{2} for several polymorphs.

#+name: ruo2-html
#+BEGIN_SRC python :results output html
# coding=utf-8

import plotly.plotly as py
import plotly.graph_objs as go
import plotly.tools as tls
import numpy as np

import json
import matplotlib.pyplot as plt
from ase.utils.eos import EquationOfState
with open('supporting-information.json', 'rb') as f:
    d = json.loads(f.read())

BO2 = 'RuO2'
xc = 'PBE'

layout = go.Layout(title='Energy vs. Volume for RuO<sub>2</sub> polymorphs',
                   xaxis=dict(title='Volume (Å<sup>3</sup>)'),
                   yaxis=dict(title='Energy (eV)'))

traces = []

for polymorph in ['rutile','anatase','brookite','columbite','pyrite','fluorite']:

    # number of atoms in the unit cell - used to normalize
    natoms= len(d[BO2][polymorph][xc]['EOS']['calculations']
		[0]['atoms']['symbols'])
    volumes = [entry['data']['volume']*3./natoms for entry in
	       d[BO2][polymorph][xc]['EOS']['calculations']]
    energies =  [entry['data']['total_energy']*3./natoms for entry in
		 d[BO2][polymorph][xc]['EOS']['calculations']]

    trace = go.Scatter(x=np.array(volumes),
                       y=np.array(energies),
                       mode='lines+markers',
                       name=polymorph,
                       text=polymorph)

    traces += [trace]

fig = go.Figure(data=traces, layout=layout)
plot_url = py.plot(fig, filename='ruo2-2')

print tls.get_embed(plot_url)
#+END_SRC




Pretty nice, now we should have an interactive plot in our browser with the data points labeled with tags, zooming, etc... That is nice for the blog. It isn't so nice for daily work, as there is no visual version of the plot in my org-file. Of course, I can visit the url to see the plot in my browser, it is just different from what I am used to. For everyone else, this is probably better. It looks like you can actually get the data from the web page, including some minimal analysis like regression, and save your view to an image! That could be pretty nice for some data sets.

** Using Plotly yourself

First, go to https://plot.ly and sign up for an account. You will want to register your API key like this, which will save it in a file for your convenience. Then you can do things like I did above too.

#+BEGIN_SRC python
import plotly.tools as tls
tls.set_credentials_file(username='jkitchin', api_key='xxxxxxx')
#+END_SRC

** References

bibliography:~/Dropbox/bibliography/references.bib
* DONE Modern use of helm - sortable candidates
  CLOSED: [2016-01-24 Sun 14:48]
  :PROPERTIES:
  :categories: emacs,helm
  :date:     2016/01/24 14:48:13
  :updated:  2016/01/24 14:48:13
  :END:
[[https://github.com/emacs-helm/helm][helm]] continues to be my goto completion engine. I was perusing the source for helm-top, and noticed some cool new features, like sorting the candidates in the completion buffer! I also noticed that helm sources are preferably created with some new factory functions (as opposed to the a-lists I used to use). Here I explore some of these and illustrate how to make a sortable helm source.

First, we need a function to give us some candidates we will select from. I will use a function that returns a list of cons cells from a variable containing some data where each element in the data is a plist containing a number and key. I list strings as the number and key  so we can see what sorting does later. The data is just a list of plists containing a "number" and a key that is a string. We will create a helm function with these as candidates, and an ability to sort them in ascending/descending order on either the number or key.

#+BEGIN_SRC emacs-lisp :results output
(setq h-data '((:num 1 :key "apple")
	       (:num 9 :key "berry")
	       (:num 2 :key "cactus")
	       (:num 5 :key "dog")
	       (:num 4 :key "frog")))

(defun h-candidates ()
  "Returns candidates for the helm source."
  (loop for cand in h-data
	collect (cons (format "%s %s"
			      (plist-get cand :num)
			      (plist-get cand :key))
		      cand)))

(print (h-candidates))
#+END_SRC

#+RESULTS:
:
: (("1 apple" :num 1 :key "apple") ("9 berry" :num 9 :key "berry") ("2 cactus" :num 2 :key "cactus") ("5 dog" :num 5 :key "dog") ("4 frog" :num 4 :key "frog"))


Now, provide sorting, we need to create a candidate transformer function. This function will take the current candidates and source, and return a new list of candidates, possibly sorted. We use a variable to store how to sort the candidates. We also need a way to trigger the sorting. We will bind M-<down> to a function that will set the sort function, and refresh helm. Here is a keymap definition we will use later.

#+BEGIN_SRC emacs-lisp
(defvar h-map
  (let ((map (make-sparse-keymap)))
    (set-keymap-parent map helm-map)
    (define-key map (kbd "M-<down>")   'h-sort)
    map)
  "keymap for a helm source.")
#+END_SRC

#+RESULTS:
: h-map

Now, we define the sort variable, a function that sets the variable, refreshes the candidates, and finally resets the sort variable. A key point here is the sort functions must take two arguments, which will be two candidates, and each candidate is of the form (string . data). We want to sort on one of the elements in the data plists for this example.
#+BEGIN_SRC emacs-lisp
(defvar h-sort-fn nil)

(defun h-sort ()
  (interactive)
  (let ((action (read-char "#decreasing (d) | #increasing (i) | a-z (a) | z-a (z: ")))
    (cond
     ((eq action ?d)
      (setq h-sort-fn (lambda (c1 c2) (> (plist-get (cdr c1) :num) (plist-get (cdr c2) :num)))))
     ((eq action ?i)
      (setq h-sort-fn (lambda (c1 c2) (< (plist-get (cdr c1) :num) (plist-get (cdr c2) :num)))))
     ((eq action ?a)
      (setq h-sort-fn (lambda (c1 c2) (string< (plist-get (cdr c1) :key) (plist-get (cdr c2) :key)))))
     ((eq action ?z)
      (setq h-sort-fn (lambda (c1 c2) (string> (plist-get (cdr c1) :key) (plist-get (cdr c2) :key)))))
     (t (setq h-sort-fn nil)))
     (helm-refresh)
     (setq h-sort-fn nil)))
#+END_SRC

#+RESULTS:
: h-sort

Next, we define a candidate transformer. This function takes the list of candidates and the source. Here, if we have defined a sort function, we use it to sort the candidates, and if not, return the candidates. A subtle point here is the use of -sort from dash.el, which does not modify the original list at all. The build in function sort does modify the candidate list somehow, and it does not work the way you want it to here. This function gets run as the helm pattern changes.

#+BEGIN_SRC emacs-lisp
(defun h-candidate-transformer (candidates source)
  (if h-sort-fn
    (progn (message "Sorting with %s" h-sort-fn)
    (-sort h-sort-fn candidates))
  candidates))
#+END_SRC

#+RESULTS:
: h-candidate-transformer

Now, just for fun, we show that dynamically defined actions are possible. Here, we generate an action list that is different for even and odd numbers. These actions are pretty trivial, but give you an idea of what might be possible; custom, context specific actions.

#+BEGIN_SRC emacs-lisp
;; Make dynamic actions based on the candidate selected
(defun h-action-transformer (actions candidate)
  "Candidate is the result selected."
  (if (evenp (plist-get candidate :num))
      '(("Even" . identity))
    '(("Odd" . identity))))
#+END_SRC

#+RESULTS:
: h-action-transformer

Finally, we are ready to create a helm source. We use the new factory function for creating the source with our keymap, candidates and transformer functions.
#+BEGIN_SRC emacs-lisp
(setq h-source
      (helm-build-sync-source "number-selector"
	:keymap h-map
        :candidates #'h-candidates
        :filtered-candidate-transformer #'h-candidate-transformer
	:action-transformer #'h-action-transformer))
#+END_SRC

#+RESULTS:

Now, you can run the helm source like this.
#+BEGIN_SRC emacs-lisp
(helm :sources 'h-source)
#+END_SRC

#+RESULTS:

You can sort the numbers in descending order by typing M-<down> and pressing d. To get ascending order, press i instead. To sort on the keys, type a sort from a to z, and press z to sort on z to a. If you press tab on a selection, you will see that the actions you get depend on whether the selection is an even or odd number! So, you can get some context specific actions depending on your selection. Pretty awesome.
* DONE Colored text in org-mode with export to HTML
  CLOSED: [2016-01-16 Sat 19:35]
  :PROPERTIES:
  :ID:       E6655A7C-A4C4-4048-893B-49AF0320276B
  :categories: orgmode,emacs
  :date:     2016/01/16 19:34:57
  :updated:  2016/01/18 12:36:08
  :END:

Just for fun, I want to put colored text in org-mode using links. This is a simple hack that uses the description in an org-mode link as the text to color, and the path in link to specify the color. I use an overlay to do this because I could not figure out how to change the face foreground color. We provide a simple export to HTML. LaTeX is also doable, but a trickier export as you need to define the colors in the LaTeX header also.

Here is the code to make the color link, and put overlays on them with font-lock.

#+BEGIN_SRC emacs-lisp :results silent
(require 'ov)

(org-add-link-type
 "color"
 (lambda (path)
   "No follow action.")
 (lambda (color description backend)
   (cond
    ((eq backend 'html)
     (let ((rgb (assoc color color-name-rgb-alist))
	   r g b)
       (if rgb
	   (progn
	     (setq r (* 255 (/ (nth 1 rgb) 65535.0))
		   g (* 255 (/ (nth 2 rgb) 65535.0))
		   b (* 255 (/ (nth 3 rgb) 65535.0)))
	     (format "<span style=\"color: rgb(%s,%s,%s)\">%s</span>"
		     (truncate r) (truncate g) (truncate b)
		     (or description color)))
	 (format "No Color RGB for %s" color)))))))

(defun next-color-link (limit)
  (when (re-search-forward
	 "color:[a-zA-Z]\\{2,\\}" limit t)
    (forward-char -2)
    (let* ((next-link (org-element-context))
	   color beg end post-blanks)
      (if next-link
	  (progn
	    (setq color (org-element-property :path next-link)
		  beg (org-element-property :begin next-link)
		  end (org-element-property :end next-link)
		  post-blanks (org-element-property :post-blank next-link))
	    (set-match-data
	     (list beg
		   (- end post-blanks)))
	    (ov-clear beg end 'color)
	    (ov beg
		(- end post-blanks)
		'color t
		'face
		`((:foreground ,color)))
	    (goto-char end))
	(goto-char limit)
	nil))))

(add-hook 'org-mode-hook
	  (lambda ()
	    (font-lock-add-keywords
	     nil
	     '((next-color-link (0  'org-link t)))
	     t)))

(add-hook 'org-mode-hook 'org-overview t)
#+END_SRC

I do not love the use of overlays on this, but it is the only way I could figure out how to do this without creating a face for every single color. Setting the foreground color property on the links did not work.

Now, we use a loop to generate a lot of colored links to check it out. It basically works. I see some overlays pop up in folded headlines sometimes, but I don't mind that too much. Emacs slows down when the screen is full of these links, but it seems fine under normal numbers of links. Since colors are likely to only be for accent, I do not think performance will be a problem. This might be a nice way to add accents to draw attention to some text in org-mode. If you like this, you might can get the code here: https://github.com/jkitchin/jmax/blob/master/org-colored-text.el

Here is what the text looks like in my buffer.

[[./colored-text.png]]


#+BEGIN_SRC emacs-lisp :results output raw
(loop for color in color-name-rgb-alist
      do
      (princ (format "[[color:%s][Text colored in %s]]\n" (car color) (car color))))
#+END_SRC

#+RESULTS:
[[color:snow][Text colored in snow]]
[[color:ghostwhite][Text colored in ghostwhite]]
[[color:whitesmoke][Text colored in whitesmoke]]
[[color:gainsboro][Text colored in gainsboro]]
[[color:floralwhite][Text colored in floralwhite]]
[[color:oldlace][Text colored in oldlace]]
[[color:linen][Text colored in linen]]
[[color:antiquewhite][Text colored in antiquewhite]]
[[color:papayawhip][Text colored in papayawhip]]
[[color:blanchedalmond][Text colored in blanchedalmond]]
[[color:bisque][Text colored in bisque]]
[[color:peachpuff][Text colored in peachpuff]]
[[color:navajowhite][Text colored in navajowhite]]
[[color:moccasin][Text colored in moccasin]]
[[color:cornsilk][Text colored in cornsilk]]
[[color:ivory][Text colored in ivory]]
[[color:lemonchiffon][Text colored in lemonchiffon]]
[[color:seashell][Text colored in seashell]]
[[color:honeydew][Text colored in honeydew]]
[[color:mintcream][Text colored in mintcream]]
[[color:azure][Text colored in azure]]
[[color:aliceblue][Text colored in aliceblue]]
[[color:lavender][Text colored in lavender]]
[[color:lavenderblush][Text colored in lavenderblush]]
[[color:mistyrose][Text colored in mistyrose]]
[[color:white][Text colored in white]]
[[color:black][Text colored in black]]
[[color:darkslategray][Text colored in darkslategray]]
[[color:darkslategrey][Text colored in darkslategrey]]
[[color:dimgray][Text colored in dimgray]]
[[color:dimgrey][Text colored in dimgrey]]
[[color:slategray][Text colored in slategray]]
[[color:slategrey][Text colored in slategrey]]
[[color:lightslategray][Text colored in lightslategray]]
[[color:lightslategrey][Text colored in lightslategrey]]
[[color:gray][Text colored in gray]]
[[color:grey][Text colored in grey]]
[[color:lightgrey][Text colored in lightgrey]]
[[color:lightgray][Text colored in lightgray]]
[[color:midnightblue][Text colored in midnightblue]]
[[color:navy][Text colored in navy]]
[[color:navyblue][Text colored in navyblue]]
[[color:cornflowerblue][Text colored in cornflowerblue]]
[[color:darkslateblue][Text colored in darkslateblue]]
[[color:slateblue][Text colored in slateblue]]
[[color:mediumslateblue][Text colored in mediumslateblue]]
[[color:lightslateblue][Text colored in lightslateblue]]
[[color:mediumblue][Text colored in mediumblue]]
[[color:royalblue][Text colored in royalblue]]
[[color:blue][Text colored in blue]]
[[color:dodgerblue][Text colored in dodgerblue]]
[[color:deepskyblue][Text colored in deepskyblue]]
[[color:skyblue][Text colored in skyblue]]
[[color:lightskyblue][Text colored in lightskyblue]]
[[color:steelblue][Text colored in steelblue]]
[[color:lightsteelblue][Text colored in lightsteelblue]]
[[color:lightblue][Text colored in lightblue]]
[[color:powderblue][Text colored in powderblue]]
[[color:paleturquoise][Text colored in paleturquoise]]
[[color:darkturquoise][Text colored in darkturquoise]]
[[color:mediumturquoise][Text colored in mediumturquoise]]
[[color:turquoise][Text colored in turquoise]]
[[color:cyan][Text colored in cyan]]
[[color:lightcyan][Text colored in lightcyan]]
[[color:cadetblue][Text colored in cadetblue]]
[[color:mediumaquamarine][Text colored in mediumaquamarine]]
[[color:aquamarine][Text colored in aquamarine]]
[[color:darkgreen][Text colored in darkgreen]]
[[color:darkolivegreen][Text colored in darkolivegreen]]
[[color:darkseagreen][Text colored in darkseagreen]]
[[color:seagreen][Text colored in seagreen]]
[[color:mediumseagreen][Text colored in mediumseagreen]]
[[color:lightseagreen][Text colored in lightseagreen]]
[[color:palegreen][Text colored in palegreen]]
[[color:springgreen][Text colored in springgreen]]
[[color:lawngreen][Text colored in lawngreen]]
[[color:green][Text colored in green]]
[[color:chartreuse][Text colored in chartreuse]]
[[color:mediumspringgreen][Text colored in mediumspringgreen]]
[[color:greenyellow][Text colored in greenyellow]]
[[color:limegreen][Text colored in limegreen]]
[[color:yellowgreen][Text colored in yellowgreen]]
[[color:forestgreen][Text colored in forestgreen]]
[[color:olivedrab][Text colored in olivedrab]]
[[color:darkkhaki][Text colored in darkkhaki]]
[[color:khaki][Text colored in khaki]]
[[color:palegoldenrod][Text colored in palegoldenrod]]
[[color:lightgoldenrodyellow][Text colored in lightgoldenrodyellow]]
[[color:lightyellow][Text colored in lightyellow]]
[[color:yellow][Text colored in yellow]]
[[color:gold][Text colored in gold]]
[[color:lightgoldenrod][Text colored in lightgoldenrod]]
[[color:goldenrod][Text colored in goldenrod]]
[[color:darkgoldenrod][Text colored in darkgoldenrod]]
[[color:rosybrown][Text colored in rosybrown]]
[[color:indianred][Text colored in indianred]]
[[color:saddlebrown][Text colored in saddlebrown]]
[[color:sienna][Text colored in sienna]]
[[color:peru][Text colored in peru]]
[[color:burlywood][Text colored in burlywood]]
[[color:beige][Text colored in beige]]
[[color:wheat][Text colored in wheat]]
[[color:sandybrown][Text colored in sandybrown]]
[[color:tan][Text colored in tan]]
[[color:chocolate][Text colored in chocolate]]
[[color:firebrick][Text colored in firebrick]]
[[color:brown][Text colored in brown]]
[[color:darksalmon][Text colored in darksalmon]]
[[color:salmon][Text colored in salmon]]
[[color:lightsalmon][Text colored in lightsalmon]]
[[color:orange][Text colored in orange]]
[[color:darkorange][Text colored in darkorange]]
[[color:coral][Text colored in coral]]
[[color:lightcoral][Text colored in lightcoral]]
[[color:tomato][Text colored in tomato]]
[[color:orangered][Text colored in orangered]]
[[color:red][Text colored in red]]
[[color:hotpink][Text colored in hotpink]]
[[color:deeppink][Text colored in deeppink]]
[[color:pink][Text colored in pink]]
[[color:lightpink][Text colored in lightpink]]
[[color:palevioletred][Text colored in palevioletred]]
[[color:maroon][Text colored in maroon]]
[[color:mediumvioletred][Text colored in mediumvioletred]]
[[color:violetred][Text colored in violetred]]
[[color:magenta][Text colored in magenta]]
[[color:violet][Text colored in violet]]
[[color:plum][Text colored in plum]]
[[color:orchid][Text colored in orchid]]
[[color:mediumorchid][Text colored in mediumorchid]]
[[color:darkorchid][Text colored in darkorchid]]
[[color:darkviolet][Text colored in darkviolet]]
[[color:blueviolet][Text colored in blueviolet]]
[[color:purple][Text colored in purple]]
[[color:mediumpurple][Text colored in mediumpurple]]
[[color:thistle][Text colored in thistle]]
[[color:snow1][Text colored in snow1]]
[[color:snow2][Text colored in snow2]]
[[color:snow3][Text colored in snow3]]
[[color:snow4][Text colored in snow4]]
[[color:seashell1][Text colored in seashell1]]
[[color:seashell2][Text colored in seashell2]]
[[color:seashell3][Text colored in seashell3]]
[[color:seashell4][Text colored in seashell4]]
[[color:antiquewhite1][Text colored in antiquewhite1]]
[[color:antiquewhite2][Text colored in antiquewhite2]]
[[color:antiquewhite3][Text colored in antiquewhite3]]
[[color:antiquewhite4][Text colored in antiquewhite4]]
[[color:bisque1][Text colored in bisque1]]
[[color:bisque2][Text colored in bisque2]]
[[color:bisque3][Text colored in bisque3]]
[[color:bisque4][Text colored in bisque4]]
[[color:peachpuff1][Text colored in peachpuff1]]
[[color:peachpuff2][Text colored in peachpuff2]]
[[color:peachpuff3][Text colored in peachpuff3]]
[[color:peachpuff4][Text colored in peachpuff4]]
[[color:navajowhite1][Text colored in navajowhite1]]
[[color:navajowhite2][Text colored in navajowhite2]]
[[color:navajowhite3][Text colored in navajowhite3]]
[[color:navajowhite4][Text colored in navajowhite4]]
[[color:lemonchiffon1][Text colored in lemonchiffon1]]
[[color:lemonchiffon2][Text colored in lemonchiffon2]]
[[color:lemonchiffon3][Text colored in lemonchiffon3]]
[[color:lemonchiffon4][Text colored in lemonchiffon4]]
[[color:cornsilk1][Text colored in cornsilk1]]
[[color:cornsilk2][Text colored in cornsilk2]]
[[color:cornsilk3][Text colored in cornsilk3]]
[[color:cornsilk4][Text colored in cornsilk4]]
[[color:ivory1][Text colored in ivory1]]
[[color:ivory2][Text colored in ivory2]]
[[color:ivory3][Text colored in ivory3]]
[[color:ivory4][Text colored in ivory4]]
[[color:honeydew1][Text colored in honeydew1]]
[[color:honeydew2][Text colored in honeydew2]]
[[color:honeydew3][Text colored in honeydew3]]
[[color:honeydew4][Text colored in honeydew4]]
[[color:lavenderblush1][Text colored in lavenderblush1]]
[[color:lavenderblush2][Text colored in lavenderblush2]]
[[color:lavenderblush3][Text colored in lavenderblush3]]
[[color:lavenderblush4][Text colored in lavenderblush4]]
[[color:mistyrose1][Text colored in mistyrose1]]
[[color:mistyrose2][Text colored in mistyrose2]]
[[color:mistyrose3][Text colored in mistyrose3]]
[[color:mistyrose4][Text colored in mistyrose4]]
[[color:azure1][Text colored in azure1]]
[[color:azure2][Text colored in azure2]]
[[color:azure3][Text colored in azure3]]
[[color:azure4][Text colored in azure4]]
[[color:slateblue1][Text colored in slateblue1]]
[[color:slateblue2][Text colored in slateblue2]]
[[color:slateblue3][Text colored in slateblue3]]
[[color:slateblue4][Text colored in slateblue4]]
[[color:royalblue1][Text colored in royalblue1]]
[[color:royalblue2][Text colored in royalblue2]]
[[color:royalblue3][Text colored in royalblue3]]
[[color:royalblue4][Text colored in royalblue4]]
[[color:blue1][Text colored in blue1]]
[[color:blue2][Text colored in blue2]]
[[color:blue3][Text colored in blue3]]
[[color:blue4][Text colored in blue4]]
[[color:dodgerblue1][Text colored in dodgerblue1]]
[[color:dodgerblue2][Text colored in dodgerblue2]]
[[color:dodgerblue3][Text colored in dodgerblue3]]
[[color:dodgerblue4][Text colored in dodgerblue4]]
[[color:steelblue1][Text colored in steelblue1]]
[[color:steelblue2][Text colored in steelblue2]]
[[color:steelblue3][Text colored in steelblue3]]
[[color:steelblue4][Text colored in steelblue4]]
[[color:deepskyblue1][Text colored in deepskyblue1]]
[[color:deepskyblue2][Text colored in deepskyblue2]]
[[color:deepskyblue3][Text colored in deepskyblue3]]
[[color:deepskyblue4][Text colored in deepskyblue4]]
[[color:skyblue1][Text colored in skyblue1]]
[[color:skyblue2][Text colored in skyblue2]]
[[color:skyblue3][Text colored in skyblue3]]
[[color:skyblue4][Text colored in skyblue4]]
[[color:lightskyblue1][Text colored in lightskyblue1]]
[[color:lightskyblue2][Text colored in lightskyblue2]]
[[color:lightskyblue3][Text colored in lightskyblue3]]
[[color:lightskyblue4][Text colored in lightskyblue4]]
[[color:slategray1][Text colored in slategray1]]
[[color:slategray2][Text colored in slategray2]]
[[color:slategray3][Text colored in slategray3]]
[[color:slategray4][Text colored in slategray4]]
[[color:lightsteelblue1][Text colored in lightsteelblue1]]
[[color:lightsteelblue2][Text colored in lightsteelblue2]]
[[color:lightsteelblue3][Text colored in lightsteelblue3]]
[[color:lightsteelblue4][Text colored in lightsteelblue4]]
[[color:lightblue1][Text colored in lightblue1]]
[[color:lightblue2][Text colored in lightblue2]]
[[color:lightblue3][Text colored in lightblue3]]
[[color:lightblue4][Text colored in lightblue4]]
[[color:lightcyan1][Text colored in lightcyan1]]
[[color:lightcyan2][Text colored in lightcyan2]]
[[color:lightcyan3][Text colored in lightcyan3]]
[[color:lightcyan4][Text colored in lightcyan4]]
[[color:paleturquoise1][Text colored in paleturquoise1]]
[[color:paleturquoise2][Text colored in paleturquoise2]]
[[color:paleturquoise3][Text colored in paleturquoise3]]
[[color:paleturquoise4][Text colored in paleturquoise4]]
[[color:cadetblue1][Text colored in cadetblue1]]
[[color:cadetblue2][Text colored in cadetblue2]]
[[color:cadetblue3][Text colored in cadetblue3]]
[[color:cadetblue4][Text colored in cadetblue4]]
[[color:turquoise1][Text colored in turquoise1]]
[[color:turquoise2][Text colored in turquoise2]]
[[color:turquoise3][Text colored in turquoise3]]
[[color:turquoise4][Text colored in turquoise4]]
[[color:cyan1][Text colored in cyan1]]
[[color:cyan2][Text colored in cyan2]]
[[color:cyan3][Text colored in cyan3]]
[[color:cyan4][Text colored in cyan4]]
[[color:darkslategray1][Text colored in darkslategray1]]
[[color:darkslategray2][Text colored in darkslategray2]]
[[color:darkslategray3][Text colored in darkslategray3]]
[[color:darkslategray4][Text colored in darkslategray4]]
[[color:aquamarine1][Text colored in aquamarine1]]
[[color:aquamarine2][Text colored in aquamarine2]]
[[color:aquamarine3][Text colored in aquamarine3]]
[[color:aquamarine4][Text colored in aquamarine4]]
[[color:darkseagreen1][Text colored in darkseagreen1]]
[[color:darkseagreen2][Text colored in darkseagreen2]]
[[color:darkseagreen3][Text colored in darkseagreen3]]
[[color:darkseagreen4][Text colored in darkseagreen4]]
[[color:seagreen1][Text colored in seagreen1]]
[[color:seagreen2][Text colored in seagreen2]]
[[color:seagreen3][Text colored in seagreen3]]
[[color:seagreen4][Text colored in seagreen4]]
[[color:palegreen1][Text colored in palegreen1]]
[[color:palegreen2][Text colored in palegreen2]]
[[color:palegreen3][Text colored in palegreen3]]
[[color:palegreen4][Text colored in palegreen4]]
[[color:springgreen1][Text colored in springgreen1]]
[[color:springgreen2][Text colored in springgreen2]]
[[color:springgreen3][Text colored in springgreen3]]
[[color:springgreen4][Text colored in springgreen4]]
[[color:green1][Text colored in green1]]
[[color:green2][Text colored in green2]]
[[color:green3][Text colored in green3]]
[[color:green4][Text colored in green4]]
[[color:chartreuse1][Text colored in chartreuse1]]
[[color:chartreuse2][Text colored in chartreuse2]]
[[color:chartreuse3][Text colored in chartreuse3]]
[[color:chartreuse4][Text colored in chartreuse4]]
[[color:olivedrab1][Text colored in olivedrab1]]
[[color:olivedrab2][Text colored in olivedrab2]]
[[color:olivedrab3][Text colored in olivedrab3]]
[[color:olivedrab4][Text colored in olivedrab4]]
[[color:darkolivegreen1][Text colored in darkolivegreen1]]
[[color:darkolivegreen2][Text colored in darkolivegreen2]]
[[color:darkolivegreen3][Text colored in darkolivegreen3]]
[[color:darkolivegreen4][Text colored in darkolivegreen4]]
[[color:khaki1][Text colored in khaki1]]
[[color:khaki2][Text colored in khaki2]]
[[color:khaki3][Text colored in khaki3]]
[[color:khaki4][Text colored in khaki4]]
[[color:lightgoldenrod1][Text colored in lightgoldenrod1]]
[[color:lightgoldenrod2][Text colored in lightgoldenrod2]]
[[color:lightgoldenrod3][Text colored in lightgoldenrod3]]
[[color:lightgoldenrod4][Text colored in lightgoldenrod4]]
[[color:lightyellow1][Text colored in lightyellow1]]
[[color:lightyellow2][Text colored in lightyellow2]]
[[color:lightyellow3][Text colored in lightyellow3]]
[[color:lightyellow4][Text colored in lightyellow4]]
[[color:yellow1][Text colored in yellow1]]
[[color:yellow2][Text colored in yellow2]]
[[color:yellow3][Text colored in yellow3]]
[[color:yellow4][Text colored in yellow4]]
[[color:gold1][Text colored in gold1]]
[[color:gold2][Text colored in gold2]]
[[color:gold3][Text colored in gold3]]
[[color:gold4][Text colored in gold4]]
[[color:goldenrod1][Text colored in goldenrod1]]
[[color:goldenrod2][Text colored in goldenrod2]]
[[color:goldenrod3][Text colored in goldenrod3]]
[[color:goldenrod4][Text colored in goldenrod4]]
[[color:darkgoldenrod1][Text colored in darkgoldenrod1]]
[[color:darkgoldenrod2][Text colored in darkgoldenrod2]]
[[color:darkgoldenrod3][Text colored in darkgoldenrod3]]
[[color:darkgoldenrod4][Text colored in darkgoldenrod4]]
[[color:rosybrown1][Text colored in rosybrown1]]
[[color:rosybrown2][Text colored in rosybrown2]]
[[color:rosybrown3][Text colored in rosybrown3]]
[[color:rosybrown4][Text colored in rosybrown4]]
[[color:indianred1][Text colored in indianred1]]
[[color:indianred2][Text colored in indianred2]]
[[color:indianred3][Text colored in indianred3]]
[[color:indianred4][Text colored in indianred4]]
[[color:sienna1][Text colored in sienna1]]
[[color:sienna2][Text colored in sienna2]]
[[color:sienna3][Text colored in sienna3]]
[[color:sienna4][Text colored in sienna4]]
[[color:burlywood1][Text colored in burlywood1]]
[[color:burlywood2][Text colored in burlywood2]]
[[color:burlywood3][Text colored in burlywood3]]
[[color:burlywood4][Text colored in burlywood4]]
[[color:wheat1][Text colored in wheat1]]
[[color:wheat2][Text colored in wheat2]]
[[color:wheat3][Text colored in wheat3]]
[[color:wheat4][Text colored in wheat4]]
[[color:tan1][Text colored in tan1]]
[[color:tan2][Text colored in tan2]]
[[color:tan3][Text colored in tan3]]
[[color:tan4][Text colored in tan4]]
[[color:chocolate1][Text colored in chocolate1]]
[[color:chocolate2][Text colored in chocolate2]]
[[color:chocolate3][Text colored in chocolate3]]
[[color:chocolate4][Text colored in chocolate4]]
[[color:firebrick1][Text colored in firebrick1]]
[[color:firebrick2][Text colored in firebrick2]]
[[color:firebrick3][Text colored in firebrick3]]
[[color:firebrick4][Text colored in firebrick4]]
[[color:brown1][Text colored in brown1]]
[[color:brown2][Text colored in brown2]]
[[color:brown3][Text colored in brown3]]
[[color:brown4][Text colored in brown4]]
[[color:salmon1][Text colored in salmon1]]
[[color:salmon2][Text colored in salmon2]]
[[color:salmon3][Text colored in salmon3]]
[[color:salmon4][Text colored in salmon4]]
[[color:lightsalmon1][Text colored in lightsalmon1]]
[[color:lightsalmon2][Text colored in lightsalmon2]]
[[color:lightsalmon3][Text colored in lightsalmon3]]
[[color:lightsalmon4][Text colored in lightsalmon4]]
[[color:orange1][Text colored in orange1]]
[[color:orange2][Text colored in orange2]]
[[color:orange3][Text colored in orange3]]
[[color:orange4][Text colored in orange4]]
[[color:darkorange1][Text colored in darkorange1]]
[[color:darkorange2][Text colored in darkorange2]]
[[color:darkorange3][Text colored in darkorange3]]
[[color:darkorange4][Text colored in darkorange4]]
[[color:coral1][Text colored in coral1]]
[[color:coral2][Text colored in coral2]]
[[color:coral3][Text colored in coral3]]
[[color:coral4][Text colored in coral4]]
[[color:tomato1][Text colored in tomato1]]
[[color:tomato2][Text colored in tomato2]]
[[color:tomato3][Text colored in tomato3]]
[[color:tomato4][Text colored in tomato4]]
[[color:orangered1][Text colored in orangered1]]
[[color:orangered2][Text colored in orangered2]]
[[color:orangered3][Text colored in orangered3]]
[[color:orangered4][Text colored in orangered4]]
[[color:red1][Text colored in red1]]
[[color:red2][Text colored in red2]]
[[color:red3][Text colored in red3]]
[[color:red4][Text colored in red4]]
[[color:deeppink1][Text colored in deeppink1]]
[[color:deeppink2][Text colored in deeppink2]]
[[color:deeppink3][Text colored in deeppink3]]
[[color:deeppink4][Text colored in deeppink4]]
[[color:hotpink1][Text colored in hotpink1]]
[[color:hotpink2][Text colored in hotpink2]]
[[color:hotpink3][Text colored in hotpink3]]
[[color:hotpink4][Text colored in hotpink4]]
[[color:pink1][Text colored in pink1]]
[[color:pink2][Text colored in pink2]]
[[color:pink3][Text colored in pink3]]
[[color:pink4][Text colored in pink4]]
[[color:lightpink1][Text colored in lightpink1]]
[[color:lightpink2][Text colored in lightpink2]]
[[color:lightpink3][Text colored in lightpink3]]
[[color:lightpink4][Text colored in lightpink4]]
[[color:palevioletred1][Text colored in palevioletred1]]
[[color:palevioletred2][Text colored in palevioletred2]]
[[color:palevioletred3][Text colored in palevioletred3]]
[[color:palevioletred4][Text colored in palevioletred4]]
[[color:maroon1][Text colored in maroon1]]
[[color:maroon2][Text colored in maroon2]]
[[color:maroon3][Text colored in maroon3]]
[[color:maroon4][Text colored in maroon4]]
[[color:violetred1][Text colored in violetred1]]
[[color:violetred2][Text colored in violetred2]]
[[color:violetred3][Text colored in violetred3]]
[[color:violetred4][Text colored in violetred4]]
[[color:magenta1][Text colored in magenta1]]
[[color:magenta2][Text colored in magenta2]]
[[color:magenta3][Text colored in magenta3]]
[[color:magenta4][Text colored in magenta4]]
[[color:orchid1][Text colored in orchid1]]
[[color:orchid2][Text colored in orchid2]]
[[color:orchid3][Text colored in orchid3]]
[[color:orchid4][Text colored in orchid4]]
[[color:plum1][Text colored in plum1]]
[[color:plum2][Text colored in plum2]]
[[color:plum3][Text colored in plum3]]
[[color:plum4][Text colored in plum4]]
[[color:mediumorchid1][Text colored in mediumorchid1]]
[[color:mediumorchid2][Text colored in mediumorchid2]]
[[color:mediumorchid3][Text colored in mediumorchid3]]
[[color:mediumorchid4][Text colored in mediumorchid4]]
[[color:darkorchid1][Text colored in darkorchid1]]
[[color:darkorchid2][Text colored in darkorchid2]]
[[color:darkorchid3][Text colored in darkorchid3]]
[[color:darkorchid4][Text colored in darkorchid4]]
[[color:purple1][Text colored in purple1]]
[[color:purple2][Text colored in purple2]]
[[color:purple3][Text colored in purple3]]
[[color:purple4][Text colored in purple4]]
[[color:mediumpurple1][Text colored in mediumpurple1]]
[[color:mediumpurple2][Text colored in mediumpurple2]]
[[color:mediumpurple3][Text colored in mediumpurple3]]
[[color:mediumpurple4][Text colored in mediumpurple4]]
[[color:thistle1][Text colored in thistle1]]
[[color:thistle2][Text colored in thistle2]]
[[color:thistle3][Text colored in thistle3]]
[[color:thistle4][Text colored in thistle4]]
[[color:gray0][Text colored in gray0]]
[[color:grey0][Text colored in grey0]]
[[color:gray1][Text colored in gray1]]
[[color:grey1][Text colored in grey1]]
[[color:gray2][Text colored in gray2]]
[[color:grey2][Text colored in grey2]]
[[color:gray3][Text colored in gray3]]
[[color:grey3][Text colored in grey3]]
[[color:gray4][Text colored in gray4]]
[[color:grey4][Text colored in grey4]]
[[color:gray5][Text colored in gray5]]
[[color:grey5][Text colored in grey5]]
[[color:gray6][Text colored in gray6]]
[[color:grey6][Text colored in grey6]]
[[color:gray7][Text colored in gray7]]
[[color:grey7][Text colored in grey7]]
[[color:gray8][Text colored in gray8]]
[[color:grey8][Text colored in grey8]]
[[color:gray9][Text colored in gray9]]
[[color:grey9][Text colored in grey9]]
[[color:gray10][Text colored in gray10]]
[[color:grey10][Text colored in grey10]]
[[color:gray11][Text colored in gray11]]
[[color:grey11][Text colored in grey11]]
[[color:gray12][Text colored in gray12]]
[[color:grey12][Text colored in grey12]]
[[color:gray13][Text colored in gray13]]
[[color:grey13][Text colored in grey13]]
[[color:gray14][Text colored in gray14]]
[[color:grey14][Text colored in grey14]]
[[color:gray15][Text colored in gray15]]
[[color:grey15][Text colored in grey15]]
[[color:gray16][Text colored in gray16]]
[[color:grey16][Text colored in grey16]]
[[color:gray17][Text colored in gray17]]
[[color:grey17][Text colored in grey17]]
[[color:gray18][Text colored in gray18]]
[[color:grey18][Text colored in grey18]]
[[color:gray19][Text colored in gray19]]
[[color:grey19][Text colored in grey19]]
[[color:gray20][Text colored in gray20]]
[[color:grey20][Text colored in grey20]]
[[color:gray21][Text colored in gray21]]
[[color:grey21][Text colored in grey21]]
[[color:gray22][Text colored in gray22]]
[[color:grey22][Text colored in grey22]]
[[color:gray23][Text colored in gray23]]
[[color:grey23][Text colored in grey23]]
[[color:gray24][Text colored in gray24]]
[[color:grey24][Text colored in grey24]]
[[color:gray25][Text colored in gray25]]
[[color:grey25][Text colored in grey25]]
[[color:gray26][Text colored in gray26]]
[[color:grey26][Text colored in grey26]]
[[color:gray27][Text colored in gray27]]
[[color:grey27][Text colored in grey27]]
[[color:gray28][Text colored in gray28]]
[[color:grey28][Text colored in grey28]]
[[color:gray29][Text colored in gray29]]
[[color:grey29][Text colored in grey29]]
[[color:gray30][Text colored in gray30]]
[[color:grey30][Text colored in grey30]]
[[color:gray31][Text colored in gray31]]
[[color:grey31][Text colored in grey31]]
[[color:gray32][Text colored in gray32]]
[[color:grey32][Text colored in grey32]]
[[color:gray33][Text colored in gray33]]
[[color:grey33][Text colored in grey33]]
[[color:gray34][Text colored in gray34]]
[[color:grey34][Text colored in grey34]]
[[color:gray35][Text colored in gray35]]
[[color:grey35][Text colored in grey35]]
[[color:gray36][Text colored in gray36]]
[[color:grey36][Text colored in grey36]]
[[color:gray37][Text colored in gray37]]
[[color:grey37][Text colored in grey37]]
[[color:gray38][Text colored in gray38]]
[[color:grey38][Text colored in grey38]]
[[color:gray39][Text colored in gray39]]
[[color:grey39][Text colored in grey39]]
[[color:gray40][Text colored in gray40]]
[[color:grey40][Text colored in grey40]]
[[color:gray41][Text colored in gray41]]
[[color:grey41][Text colored in grey41]]
[[color:gray42][Text colored in gray42]]
[[color:grey42][Text colored in grey42]]
[[color:gray43][Text colored in gray43]]
[[color:grey43][Text colored in grey43]]
[[color:gray44][Text colored in gray44]]
[[color:grey44][Text colored in grey44]]
[[color:gray45][Text colored in gray45]]
[[color:grey45][Text colored in grey45]]
[[color:gray46][Text colored in gray46]]
[[color:grey46][Text colored in grey46]]
[[color:gray47][Text colored in gray47]]
[[color:grey47][Text colored in grey47]]
[[color:gray48][Text colored in gray48]]
[[color:grey48][Text colored in grey48]]
[[color:gray49][Text colored in gray49]]
[[color:grey49][Text colored in grey49]]
[[color:gray50][Text colored in gray50]]
[[color:grey50][Text colored in grey50]]
[[color:gray51][Text colored in gray51]]
[[color:grey51][Text colored in grey51]]
[[color:gray52][Text colored in gray52]]
[[color:grey52][Text colored in grey52]]
[[color:gray53][Text colored in gray53]]
[[color:grey53][Text colored in grey53]]
[[color:gray54][Text colored in gray54]]
[[color:grey54][Text colored in grey54]]
[[color:gray55][Text colored in gray55]]
[[color:grey55][Text colored in grey55]]
[[color:gray56][Text colored in gray56]]
[[color:grey56][Text colored in grey56]]
[[color:gray57][Text colored in gray57]]
[[color:grey57][Text colored in grey57]]
[[color:gray58][Text colored in gray58]]
[[color:grey58][Text colored in grey58]]
[[color:gray59][Text colored in gray59]]
[[color:grey59][Text colored in grey59]]
[[color:gray60][Text colored in gray60]]
[[color:grey60][Text colored in grey60]]
[[color:gray61][Text colored in gray61]]
[[color:grey61][Text colored in grey61]]
[[color:gray62][Text colored in gray62]]
[[color:grey62][Text colored in grey62]]
[[color:gray63][Text colored in gray63]]
[[color:grey63][Text colored in grey63]]
[[color:gray64][Text colored in gray64]]
[[color:grey64][Text colored in grey64]]
[[color:gray65][Text colored in gray65]]
[[color:grey65][Text colored in grey65]]
[[color:gray66][Text colored in gray66]]
[[color:grey66][Text colored in grey66]]
[[color:gray67][Text colored in gray67]]
[[color:grey67][Text colored in grey67]]
[[color:gray68][Text colored in gray68]]
[[color:grey68][Text colored in grey68]]
[[color:gray69][Text colored in gray69]]
[[color:grey69][Text colored in grey69]]
[[color:gray70][Text colored in gray70]]
[[color:grey70][Text colored in grey70]]
[[color:gray71][Text colored in gray71]]
[[color:grey71][Text colored in grey71]]
[[color:gray72][Text colored in gray72]]
[[color:grey72][Text colored in grey72]]
[[color:gray73][Text colored in gray73]]
[[color:grey73][Text colored in grey73]]
[[color:gray74][Text colored in gray74]]
[[color:grey74][Text colored in grey74]]
[[color:gray75][Text colored in gray75]]
[[color:grey75][Text colored in grey75]]
[[color:gray76][Text colored in gray76]]
[[color:grey76][Text colored in grey76]]
[[color:gray77][Text colored in gray77]]
[[color:grey77][Text colored in grey77]]
[[color:gray78][Text colored in gray78]]
[[color:grey78][Text colored in grey78]]
[[color:gray79][Text colored in gray79]]
[[color:grey79][Text colored in grey79]]
[[color:gray80][Text colored in gray80]]
[[color:grey80][Text colored in grey80]]
[[color:gray81][Text colored in gray81]]
[[color:grey81][Text colored in grey81]]
[[color:gray82][Text colored in gray82]]
[[color:grey82][Text colored in grey82]]
[[color:gray83][Text colored in gray83]]
[[color:grey83][Text colored in grey83]]
[[color:gray84][Text colored in gray84]]
[[color:grey84][Text colored in grey84]]
[[color:gray85][Text colored in gray85]]
[[color:grey85][Text colored in grey85]]
[[color:gray86][Text colored in gray86]]
[[color:grey86][Text colored in grey86]]
[[color:gray87][Text colored in gray87]]
[[color:grey87][Text colored in grey87]]
[[color:gray88][Text colored in gray88]]
[[color:grey88][Text colored in grey88]]
[[color:gray89][Text colored in gray89]]
[[color:grey89][Text colored in grey89]]
[[color:gray90][Text colored in gray90]]
[[color:grey90][Text colored in grey90]]
[[color:gray91][Text colored in gray91]]
[[color:grey91][Text colored in grey91]]
[[color:gray92][Text colored in gray92]]
[[color:grey92][Text colored in grey92]]
[[color:gray93][Text colored in gray93]]
[[color:grey93][Text colored in grey93]]
[[color:gray94][Text colored in gray94]]
[[color:grey94][Text colored in grey94]]
[[color:gray95][Text colored in gray95]]
[[color:grey95][Text colored in grey95]]
[[color:gray96][Text colored in gray96]]
[[color:grey96][Text colored in grey96]]
[[color:gray97][Text colored in gray97]]
[[color:grey97][Text colored in grey97]]
[[color:gray98][Text colored in gray98]]
[[color:grey98][Text colored in grey98]]
[[color:gray99][Text colored in gray99]]
[[color:grey99][Text colored in grey99]]
[[color:gray100][Text colored in gray100]]
[[color:grey100][Text colored in grey100]]
[[color:darkgrey][Text colored in darkgrey]]
[[color:darkgray][Text colored in darkgray]]
[[color:darkblue][Text colored in darkblue]]
[[color:darkcyan][Text colored in darkcyan]]
[[color:darkmagenta][Text colored in darkmagenta]]
[[color:darkred][Text colored in darkred]]
[[color:lightgreen][Text colored in lightgreen]]




* DONE Side by side figures in org-mode for different export outputs
  CLOSED: [2016-01-17 Sun 21:03]
  :PROPERTIES:
  :ID:       9F7C8565-AB1F-46C6-AA13-FA730CCDE3B1
  :categories: emacs,orgmode
  :date:     2016/01/17 21:03:13
  :updated:  2016/01/17 21:18:18
  :END:
#+LATEX_CLASS: article
#+OPTIONS: author:nil toc:nil
#+LATEX_HEADER: \usepackage{graphicx}
#+LATEX_HEADER: \usepackage{subfigure}

Occasionally, someone wants side by side figures with subcaptions that have individually referenceable labels. This is not too hard in LaTeX, and there is a solution here:  http://www.johndcook.com/blog/2009/01/14/how-to-display-side-by-side-figurs-in-latex/.

We can create side by side figures in raw LaTeX like this (note however, this will not show up in html export):

#+BEGIN_LaTeX
\begin{figure}
  \subfigure[Left graph \label{fig:a}]
    {\includegraphics[width=3in]{images/cos-plot.png}}
\enskip % horizontal spacking. tex.stackexchange.com/questions/41476/lengths-and-when-to-use-them
  \subfigure[Right graph. \label{fig:b}]
    {\includegraphics[width=3in]{images/eos-uncertainty.png}}
\caption{Text pertaining to both graphs,\ref{fig:a}and \ref{fig:b}. \label{fig12}}
\end{figure}
#+END_LaTeX

And in our text we can refer to the overall Figure ref:fig12, or the subfigures Figure ref:fig:a or Figure ref:fig:b. This works fine if your end goal is LaTeX export. It does not work fine if you want to consider HTML or some other output.

So, here we consider how we could remove the LaTeX dependency by representing the figures in a sexp data structure, for example something like this. I change the labels and captions a bit so they are actually distinguishable.

#+BEGIN_SRC emacs-lisp
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
#+END_SRC

#+RESULTS:
: "emacs-lisp"

This doesn't look much worse than the LaTeX code itself. It might not seem useful right away, but imagine if this was really code that could evaluate to the format we want. Remember the [[http://kitchingroup.cheme.cmu.edu/blog/2015/06/10/A-sexp-version-of-a-bibtex-entry/][sexp bibtex entry]] that could evaluate to bibtex, json or xml? Let's look at this here. What we consider is kind of like http://oremacs.com/2015/01/23/eltex/, but we could include other kinds of exports if we wanted.

Here is our special block in org-mode. It should render roughly as side by side images in LaTeX and HTML.

#+begin_sexp
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:sa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:sb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:sa")
  " and " (ref "fig:sb") "." (label "figs12")))
#+end_sexp

Now, we need a function to format the sexp block for export. It is easy, we just eval the contents of the block. We do assume here there is just one sexp to evaluate. This function will handle all special blocks, but we only want to do something different for the sexp blocks.

#+BEGIN_SRC emacs-lisp
(defun sb-format (sb contents info)
  (cond
     ((string= "SEXP" (org-element-property :type sb))
      (eval (read (buffer-substring
		   (org-element-property :contents-begin sb)
		   (org-element-property :contents-end sb)))))
     (t
      contents)))))
#+END_SRC

#+RESULTS:
: sb-format

All that is left is to define the functions. We do that next.

** Latex export
We do LaTeX export first because we know what it should look like. We need to define a function for each piece of the data structure that will evaluate to a string. Here are three easy ones.

#+BEGIN_SRC emacs-lisp
(defun label (arg)
  (format "\\label{%s}" arg))

(defun ref (arg)
  (format "\\ref{%s}" arg))

(defun caption (&rest body)
  (format "\\caption{%s}"
	 (mapconcat 'eval body "")))

(caption
  "Text pertaining to both graphs, " (ref "fig:a")
  " and " (ref "fig:b") "." (label "fig12"))
#+END_SRC
#+RESULTS:
: \caption{Text pertaining to both graphs, \ref{fig:a} and \ref{fig:b}.\label{fig12}}

Now, for includegraphics, we allow options and a path. The options we assume are in an a-list.

#+BEGIN_SRC emacs-lisp
(defun includegraphics (options path)
  (format "\\includegraphics%s{%s}"
	  (if options
	      (format "[%s]"
		      (mapconcat (lambda (ccell)
				   (format "%s=%s"
					   (car ccell)
					   (cdr ccell)))
				 options
				 ","))
	    "")
	  path))

(includegraphics '((width . "3in"))
		 "images/eos-uncertainty.png")
#+END_SRC
#+RESULTS:
: \includegraphics[width=3in]{images/eos-uncertainty.png}

Similarly for subfigure, we have options, and then a body of expressions. The options here are just expressions that should evaluate to strings. This is not consistent with the way we do options in includegraphics. This is just proof of concept work, so I don't know if this inconsistency is really problematic yet, or insufficient for all options.

#+BEGIN_SRC emacs-lisp
(defun subfigure (options &rest body)
  (format "\\subfigure%s{%s}"
	  (if options
	      (format "[%s]"
		      (mapconcat 'eval options ""))
	    "")
	  (mapconcat 'eval body "")))

(subfigure '("Right graph" (label "fig:b"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
#+END_SRC
#+RESULTS:
: \subfigure[Right graph\label{fig:b}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}

Now, we put the whole figure together.

#+BEGIN_SRC emacs-lisp
(defun figure (options &rest body)
  (format "\\begin{figure}
%s
\\end{figure}"
(mapconcat 'eval body "\n")))

(defun enskip () "\\enskip")
#+END_SRC
#+RESULTS:
: enskip

Now, we would have a block like this, and we can evaluate it.

#+BEGIN_SRC emacs-lisp :results latex
(figure ()
 (subfigure '("Left graph from sexp." (label "fig:ssa"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph from sexp" (label "fig:ssb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs from a sexp, " (ref "fig:ssa")
  " and " (ref "fig:ssb") "." (label "figss12")))
#+END_SRC

#+RESULTS:
#+BEGIN_LaTeX
\begin{figure}
\subfigure[Left graph from sexp.\label{fig:ssa}]{\includegraphics[width=3in]{images/cos-plot.png}}
\enskip
\subfigure[Right graph from sexp\label{fig:ssb}]{\includegraphics[width=3in]{images/eos-uncertainty.png}}
\caption{Text pertaining to both graphs from a sexp, \ref{fig:ssa} and \ref{fig:ssb}.\label{figss12}}
\end{figure}
#+END_LaTeX

Not the most beautiful LaTeX ever, but it works. Now, to get this to work, we need to handle our special sexp blocks differently. We do that with a new derived backend.

#+BEGIN_SRC emacs-lisp
(org-export-define-derived-backend 'my-latex 'latex
  :translate-alist '((special-block . sb-format)))

(org-latex-compile (org-export-to-file 'my-latex "custom-sb-export.tex"))
(org-open-file "custom-sb-export.pdf")
#+END_SRC

It works, and here is the pdf: [[./custom-sb-export.pdf]].

** HTML functions
We can use the same sexp block to get figures side-by-side in HTML. We need to redefine each element and its HTML output.

#+BEGIN_SRC emacs-lisp
(defun label (arg)
  (format "<a name=\"%s\"></a>" arg))

(defun ref (arg)
  (format "<a href=\"#%s\">%s</a>" arg arg))

(defun caption (&rest body)
  (format "<caption>%s</caption>"
	 (mapconcat 'eval body "")))

(caption
  "Text pertaining to both graphs, " (ref "fig:a")
  " and " (ref "fig:b") "." (label "fig12"))
#+END_SRC

#+RESULTS:
: <caption>Text pertaining to both graphs, <a href="#fig:a">fig:a</a> and <a href="#fig:b">fig:b</a>.<a name="fig12"></a></caption>


We will ignore options for the includegraphics html output. We would need to specify some way to do unit conversions for html. Here we fix the width.
#+BEGIN_SRC emacs-lisp
(defun includegraphics (options path)
  (format "<img src=\"/media/%s\" width=\"300\">"
	  path))

(includegraphics '((width . "3in"))
		 "images/eos-uncertainty.png")

#+END_SRC

#+RESULTS:
: <img src="/media/images/eos-uncertainty.png" width="300">

We wrap a subfigure in a table cell.
#+BEGIN_SRC emacs-lisp
(defun subfigure (options &rest body)
  (format "<td>%s%s</td>"
	  (mapconcat 'eval body "")
	  (when options
	    (concat "<br>"
		    (mapconcat 'eval options "")))))

(subfigure '("Right graph" (label "fig:b"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))

#+END_SRC

#+RESULTS:
: <td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:b"></a></td>

We assume we can put the images in a single row.

#+BEGIN_SRC emacs-lisp
(defun figure (options &rest body)
  (format "<span class=\"image\"><table>
<tr>%s</tr>
</table></span>"
(mapconcat 'eval body "\n")))

(defun enskip () "")
#+END_SRC

#+RESULTS:
: enskip

Now, here is our specification.
#+BEGIN_SRC emacs-lisp :results html
(figure ()
 (subfigure '("Left graph" (label "fig:ha"))
	    (includegraphics '((width . "3in"))
			     "images/cos-plot.png"))
 (enskip)
 (subfigure '("Right graph" (label "fig:hb"))
	    (includegraphics '((width . "3in"))
			     "images/eos-uncertainty.png"))
 (caption
  "Text pertaining to both graphs, " (ref "fig:ha")
  " and " (ref "fig:hb") "." (label "figh12")))
#+END_SRC

#+RESULTS:
#+BEGIN_HTML
<span class="image"><table>
<tr><td><img src="/media/images/cos-plot.png" width="300"><br>Left graph<a name="fig:ha"></a></td>

<td><img src="/media/images/eos-uncertainty.png" width="300"><br>Right graph<a name="fig:hb"></a></td>
<caption>Text pertaining to both graphs, <a href="#fig:ha">fig:ha</a> and <a href="#fig:hb">fig:hb</a>.<a name="figh12"></a></caption></tr>
</table></span>
#+END_HTML


And our derived backend for HTML.
#+BEGIN_SRC emacs-lisp
(org-export-define-derived-backend 'my-html 'html
  :translate-alist '((special-block . sb-format)))

(browse-url (org-export-to-file 'my-html "custom-sb-export.html"))
#+END_SRC

#+RESULTS:
: #<process open custom-sb-export.html>


** Summary thoughts
I think I like the idea. Obviously there are differences between what is possible between LaTeX and HTML, notably the attributes that may or may not be supported between them, including the units of the width, labels, and references. I still have not figured out an elegant way to switch between LaTeX and HTML exports since there is basically one set of functions that need different outputs under different conditions; maybe each function could have backend specific output.

For small things, you could achieve this with inline emacs-lisp src blocks, but I think those are limited to one liners. Alternatively, you could probably get by with output from an actual src block, but you would have to make sure it executed during export (I turn this off by default), and that it have backend specific output.

Finally, the only other alternative is a preprocessor that finds the sexps that define the data and replaces them with output.

The sexp block I described above is basically like a domain specific language (DSL). Something like this is described in "Practical Common Lisp" (http://www.gigamonkeys.com/book/practical-an-html-generation-library-the-interpreter.html). My version is not as sophisticated as the one there.  Notably, mine uses eval which has some limitations, such as no communication between sexp blocks.
* DONE 2016 in a nutshell for the Kitchin Research group
  CLOSED: [2017-01-01 Sun 18:13]
  :PROPERTIES:
  :categories: news
  :date:     2017/01/01 18:13:17
  :updated:  2017/01/01 18:20:59
  :END:

2016 was another good year for the Kitchin Research Group. Here are a few highlights.

** Student accomplishments

Elif Erdinc joined the group to work on her PhD in CO_{2} capture.

Sanjna Bhartiya and Jean Haddad joined the group as undergraduate researchers.

Zhongnan Xu and Alex Hallenbeck completed their PhDs and graduated. Zhongnan is doing postdoctoral work with Dane Morgan at the University of Wisconsin.

Chen Wang, Akshay Tharval, Teng Ma, Feiyang Geng, Devon Walker, and Tianyu Gao completed their MS degrees and have graduated.

Congratulations everyone!

** Publications

2016 was a moderate year for publications for us. We currently have five manuscripts under review. Here are the papers published in 2016.

Papers on org-mode and publishing:
- cite:kitchin-2015-data-surfac-scien :: A perspective on data sharing in surface science
- cite:kitchin-2016-autom-data :: concept to automate data embedding in publications

Machine learning and molecular simulation:
- cite:boes-2016-neural-networ :: Training neural networks with DFT for molecular simulations

Collaborations:
- cite:bligaard-2016-towar-bench :: A perspective on benchmarking in catalysis
- cite:deshpande-2016-quant-uncer :: Uncertainty in volcano relationships
- cite:calfa-2016-proper-predic :: A machine learning approach to materials design
- cite:kitchin-2016-high-throug :: A perspective on highthroughput methods in engineering

Accepted in 2016:
- cite:boes-2016-neural-networ-pdo :: Neural networks for coverage dependent adsorption properties
- cite:xu-2017-first-princ :: Predictions of epitaxial stabilization of oxide films



For the first year, it looks like we got fewer citations than the previous year. I am not sure what that means.

[[./screenshots/date-01-01-2017-time-17-39-44.png]]


bibliography:../../../Dropbox/bibliography/references.bib

** Emacs and org-mode

We have continued to develop Emacs and org-mode into a fantastic scientific writing tool. scimax (https://github.com/jkitchin/scimax) replaced jmax as our emacs starterkit.

org-ref (https://github.com/jkitchin/org-ref) has been downloaded more than 10,000 times now from MELPA! I helped rewrite the link code for org-mode version 9 to make it easier to do some things we invented in org-ref (custom colored links, link keymaps, etc...). org-mode 9 is out now, and our standard. org-ref continues to get better.

We released ox-clip (https://melpa.org/#/ox-clip) which lets you copy formatted org-mode into applications like MS Word.

This year I hope to focus on integrating org-mode files with a backend database to make searching more powerful and to make it easier to create novel agendas. Another goal is figuring how to get human-readable, semantically marked up data in scientific documents. Finally, I hope to make some progress in developing interactive tutorials to help people learn how to use scimax.

** vaspy

We rewrote the Python library for Vasp in ASE (https://github.com/jkitchin/vasp) and updated dft-book to use it. This new version is ase-compliant, and allows a more functional style of scripting with integration to the queue system.

** Social media
*** github

It was a busy year for me on https://github.com/jkitchin. We use github for everything from software development to scientific paper writing.

#+attr_org: :width 300
[[./screenshots/date-01-01-2017-time-17-58-31.png]]

*** Youtube

Wow, over 100,000 minutes of [[https://www.youtube.com/analytics?o=U#dt=ty,fe=17165,fr=lw-001,fs=16801;fc=0,fcr=0,r=views,rpg=93][watch time]] on our videos in 2016! Check out our channel: https://www.youtube.com/channel/UCQp2VLAOlvq142YN3JO3y8w if you have not already.

#+caption: Watch time for our Youtube videos for 2016.
[[./screenshots/date-01-01-2017-time-17-23-24.png]]


Here are the most popular videos of 2016:
[[./screenshots/date-01-01-2017-time-17-24-01.png]]

*** DONE kitchingroup.cheme.cmu.edu

Our research blog (this one) continues to grow bit by bit. We only had about 58 blog posts in 2016. For the first time it got slightly more pageviews than matlab.cheme.cmu.edu. That is pretty amazing since I have not added anything to matlab.cheme.cmu.edu since the summer of 2013!

Google analytics on kitchingroup.cheme.cmu.edu for 2016.
#+attr_org: :width 300
[[./screenshots/date-01-01-2017-time-17-29-15.png]]



Google analytics on matlab.cheme.cmu.edu for 2016.
#+attr_org: :width 300
[[./screenshots/date-01-01-2017-time-17-27-41.png]]



* DONE Context-specific org-mode speed keys
  CLOSED: [2016-12-22 Thu 13:18]
  :PROPERTIES:
  :categories: emacs,orgmode
  :date:     2016/12/22 13:18:06
  :updated:  2016/12/22 13:18:06
  :END:

I have been using org-mode to make a contact database. A contact is basically just a headline with an EMAIL property, e.g. https://julien.danjou.info/projects/emacs-packages#org-contacts.  I thought it would be nice to have an org-mode speed key so that if I was at the beginning of a contact headline, I could just press "e" to open an email buffer to that contact. This might generally be useful to have different speed keys that serve different purposes or are only defined on specific types of headlines.

Org-mode already had this feature in mind for speed keys. All you have to do is define the list of speed keys and their functions, provide a function that picks the right one, and add it to the org-speed-command-hook. Here is the code that makes this possible. This defines "c" to copy the email to the clipboard, "e" to email the contact, and "m" to copy a "name <email>" string to the clipboard, but only when you are on a headline with an EMAIL property. If there is not a contact specific speed key defined, then a user-defined speed key or a default key will be used if it is defined. In case I do not remember the keys, "?" will show them to me. It is small hack, but if you end up using the contact headlines for much, it might be really helpful as an alternative to M-x some-contacts-command.

#+BEGIN_SRC emacs-lisp
(setq org-speed-commands-contacts
      '(("c" . (lambda ()
		 "Copy the email address to the clipboard."
		 (message (kill-new (org-entry-get (point) "EMAIL")))))
	("e" . (lambda ()
		 "Send an email to the contact."
		 (let ((email (org-entry-get (point) "EMAIL")))
		   (compose-mail)
		   (message-goto-to)
		   (insert email)
		   (message-goto-subject))))
	("m" . (lambda ()
		 "Copy \"name <email>\""
		 (message (kill-new
			   (format "%s <%s>"
				   (nth 4 (org-heading-components))
				   (org-entry-get (point) "EMAIL"))))))
	("?" . (lambda ()
		 "Print contacts speed key help."
		 (with-output-to-temp-buffer "*Help*"
		   (princ "Contacts Speed commands\n===========================\n")
		   (mapc #'org-print-speed-command org-speed-commands-contacts)
		   (princ "\n")
		   (princ "User-defined Speed commands\n===========================\n")
		   (mapc #'org-print-speed-command org-speed-commands-user)
		   (princ "Built-in Speed commands\n=======================\n")
		   (mapc #'org-print-speed-command org-speed-commands-default))
		 (with-current-buffer "*Help*"
		   (setq truncate-lines t))))))

(defun org-speed-contacts (keys)
  (when (and (bolp) (looking-at org-outline-regexp)
	     (not (null (org-entry-get (point) "EMAIL"))))
    (cdr (assoc keys org-speed-commands-contacts))))

(add-hook 'org-speed-command-hook 'org-speed-contacts)
#+END_SRC
* DONE Justifying LaTeX preview fragments in org-mode
  CLOSED: [2016-11-06 Sun 20:44]
  :PROPERTIES:
  :categories: emacs,orgmode,latex
  :date:     2016/11/06 20:44:53
  :updated:  2016/11/06 20:44:53
  :END:

A colleague asked if I knew how to center the preview images of LaTeX equations in an org-buffer. This might make org-mode notes look nicer when lecturing, for example. We thought it might be possible to just offset the overlay with a before-string made up of the right number of spaces. I worked out a full solution that lets you "justify" the preview images. You have to add a :justify option to org-format-latex-options, and the option is either 'center or 'right (anything else means left-justified as the default). This will only justify equations that start at the beginning of a line to avoid modifying fragments that are in text. You should see the video to see this in action:

#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/nA9YzooqpWY" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT

Equation 1:
\(e^{i\pi} + 1 = 0\)

An $x^2 = -1$ equation in the text is not affected.

A display equation with some space after the equation:
\[e^{i \cdot \pi} + 1 = 0\]

This is a numbered equation.

\begin{equation}
\int x^2 dx
\end{equation}

The idea is pretty simple, we get the width of the window, and the width of the image, and compute the offset that approximately centers or right justifies the overlay, and then add the before-string property to the overlay. While we are at it, I will add a tooltip to the image so you can see the LaTeX code that created it, and make it clickable so you can toggle it back to the code.
I apply the function?ns as after advice to the function that creates the overlay, so we do not have to adapt the org code at all. Here is the code that does it.

#+BEGIN_SRC emacs-lisp
;; specify the justification you want
(plist-put org-format-latex-options :justify 'center)

(defun org-justify-fragment-overlay (beg end image imagetype)
  "Adjust the justification of a LaTeX fragment.
The justification is set by :justify in
`org-format-latex-options'. Only equations at the beginning of a
line are justified."
  (cond
   ;; Centered justification
   ((and (eq 'center (plist-get org-format-latex-options :justify))
	 (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
	   (width (car (image-size img)))
	   (offset (floor (- (/ (window-text-width) 2) (/ width 2)))))
      (message "width: %s" width)
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))
   ;; Right justification
   ((and (eq 'right (plist-get org-format-latex-options :justify))
	 (= beg (line-beginning-position)))
    (let* ((img (create-image image 'imagemagick t))
	   (width (car (image-display-size (overlay-get (ov-at) 'display))))
	   (offset (floor (- (window-text-width) width (- (line-end-position) end)))))
      (overlay-put (ov-at) 'before-string (make-string offset ? ))))))

(defun org-latex-fragment-tooltip (beg end image imagetype)
  "Add the fragment tooltip to the overlay and set click function to toggle it."
  (overlay-put (ov-at) 'help-echo
	       (concat (buffer-substring beg end)
		       "mouse-1 to toggle."))
  (overlay-put (ov-at) 'local-map (let ((map (make-sparse-keymap)))
				    (define-key map [mouse-1]
				      `(lambda ()
					 (interactive)
					 (org-remove-latex-fragment-image-overlays ,beg ,end)))
				    map)))

;; advise the function to a
(advice-add 'org--format-latex-make-overlay :after 'org-justify-fragment-overlay)
(advice-add 'org--format-latex-make-overlay :after 'org-latex-fragment-tooltip)
#+END_SRC

#+RESULTS:

That is it. If you get tired of the advice, remove it like this:

#+BEGIN_SRC emacs-lisp
(advice-remove 'org--format-latex-make-overlay 'org-justify-fragment-overlay)
(advice-remove 'org--format-latex-make-overlay 'org-latex-fragment-tooltip)
#+END_SRC
#+RESULTS:


From Chris Genovese
#+BEGIN_SRC emacs-lisp
(defun imagep (object)
  "Is object a valid image descriptor?"
  (and object (consp object) (eq (car object) 'image)
       (image-type-available-p (plist-get (cdr object) :type))))

(defun org-justify-latex-fragment (beg end image imagetype)
  "Shift the overlay to justify a previewed LaTeX fragment.

This attempts to only justify displays (e.g., displayed
equations) but not in-line math. The justification type is
determined by the `:justify' key in the property list
`org-format-latex-options'.

This function should not be used directly. Instead, use the
command `org-latex-preview/justify-displays' to set or disable
justification."
  (let ((justification (plist-get org-format-latex-options :justify))
        (shift (- beg (line-beginning-position))))
    (when (and (memq justification '(center right))
               (save-excursion
                 (goto-char beg) ; TeX display math not necessarily at bol
                 (or (and (zerop shift) (not (looking-at-p "\\$[^$]")))
                     (looking-at-p "\\s-*\\$\\$"))))
      (let* ((ov (car (overlays-at (point))))
             (img (if-let ((ov-image (overlay-get ov 'display))
                           (ov-image (and (imagep ov-image) ov-image)))
                      ov-image
                    (create-image image (intern-soft imagetype))))
             (space-left (- (window-text-width) (car (image-display-size img))))
             (offset (floor (if (eq justification 'center)
                                (- (/ space-left 2) shift)
                              (- space-left shift)))))
        (when (> offset 0)
          (overlay-put ov 'before-string (make-string offset ?\ )))))))

(defun org-latex-preview/justify-displays (justification)
  "Set justification type for displayed equations in org latex preview.

If JUSTIFICATION is either the symbol 'center or 'right, new
overlays are center or right justified, respectively; otherwise,
new overlays are left justified."
  (interactive
   (list (intern-soft
          (completing-read "Justification (left): " '(left center right)
                           nil t nil nil 'left))))
  (if (memq justification '(center right))
      (progn
        (plist-put org-format-latex-options :justify justification)
        (advice-add 'org--format-latex-make-overlay
                    :after 'org-justify-latex-fragment))
    (plist-put org-format-latex-options :justify 'left)
    (advice-remove 'org--format-latex-make-overlay
		   'org-justify-latex-fragment)))
(org-latex-preview/justify-displays 'right)
#+END_SRC

* DONE Better equation numbering in LaTeX fragments in org-mode
  CLOSED: [2016-11-07 Mon 07:02]
  :PROPERTIES:
  :categories: emacs,orgmode,latex
  :date:     2016/11/07 07:02:19
  :updated:  2016/11/07 07:02:19
  :END:

In org-mode we can use LaTeX equations, and toggle an overlay that shows what the rendered equation will look like. One thing that has always bothered me though, is that each fragment is created in isolation. That means numbering is almost always wrong, and typically with each numbered equation starting with (1). Here we look at a way to fix that. Fixing it means we have to find a way to not create each fragment image in isolation; each one needs a context that enables the numbering to be correct. The idea we try here is simple: we just figure out in advance what the numbering for each equation should be, and then figure out how to get that information to the image generation.

See this video of the post in action:
#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/pcMuJlUvKCw" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT

Here are some example equations to see how it works.

This should be numbered (1)
\begin{equation}
\int x^2 dx
\end{equation}

This is a numbered equation with a custom number. This should have (E1) as the number.
\begin{equation}\tag{E1}
\int x^2 dx
\end{equation}

But equation* is not numbered
\begin{equation*}
\int x^2 dx
\end{equation*}

LaTeX align environments are numbered. The first line is (2), the second line is not numbered (because we put =\nonumber= in the line), and the third line is (3).
\begin{align}
a = 5 \\
b=6 \nonumber \\
c = 8
\end{align}

But align* environments are not numbered.
\begin{align*}
a = 5 \\
b=6
\end{align*}

This should be numbered (4).

\begin{equation}
\int x^3 dx
\end{equation}

These should be numbered (5), (6) and (7).
\begin{align}
a = 5 \\
b=6  \\
c = 8
\end{align}

This should be numbered with (E2).
\begin{equation}\tag{E2}
\int x^2 dx
\end{equation}

And this should be numbered (8).
\begin{equation}
\int x^2 dx
\end{equation}

Note: This will be numbered (1) because it is exactly the same equation as a previous one!
\begin{equation}
\int x^2 dx
\end{equation}


We can change the numbering of an equation with code like this. After this code, the next equation will be numbered (5).

#+BEGIN_EXPORT latex
 \setcounter{equation}{4}
#+END_EXPORT

The only fragments that should be numbered are equation environments, and align environments (these are the main ones that we consider here). The align environment is tricky since there is potentially more than one number in the environment.

So, we get all the fragments, and generate a list of which ones should be numbered, and if they should what the number should be. That means we will need to count the number of numbered equations in an align environment. We will do that by getting the number of line breaks, and subtracting the number of nonumbers.

Here is the code block that does that, using advice again. A downside of this approach is that we generate the list for every fragment, which is not efficient, since it should not change in a synchronous approach to generating them.

#+BEGIN_SRC emacs-lisp
(defun org-renumber-environment (orig-func &rest args)
  (let ((results '())
	(counter -1)
	(numberp))

    (setq results (loop for (begin .  env) in
			(org-element-map (org-element-parse-buffer) 'latex-environment
			  (lambda (env)
			    (cons
			     (org-element-property :begin env)
			     (org-element-property :value env))))
			collect
			(cond
			 ((and (string-match "\\\\begin{equation}" env)
			       (not (string-match "\\\\tag{" env)))
			  (incf counter)
			  (cons begin counter))
			 ((string-match "\\\\begin{align}" env)
			  (prog2
			      (incf counter)
			      (cons begin counter)
			    (with-temp-buffer
			      (insert env)
			      (goto-char (point-min))
			      ;; \\ is used for a new line. Each one leads to a number
			      (incf counter (count-matches "\\\\$"))
			      ;; unless there are nonumbers.
			      (goto-char (point-min))
			      (decf counter (count-matches "\\nonumber")))))
			 (t
			  (cons begin nil)))))

    (when (setq numberp (cdr (assoc (point) results)))
      (setf (car args)
	    (concat
	     (format "\\setcounter{equation}{%s}\n" numberp)
	     (car args)))))

  (apply orig-func args))

(advice-add 'org-create-formula-image :around #'org-renumber-environment)
#+END_SRC

#+RESULTS:


You can remove the advice like this.

#+BEGIN_SRC emacs-lisp
(advice-remove 'org-create-formula-image #'org-renumber-environment)
#+END_SRC

#+RESULTS:

* DONE New and improved asynchronous org-babel python blocks
  CLOSED: [2016-11-09 Wed 11:00]
  :PROPERTIES:
  :categories: emacs,python,orgmode
  :date:     2016/11/09 11:00:01
  :updated:  2016/11/09 11:00:01
  :END:

About a year ago I posted some code to run org-babel python blocks [[http://kitchingroup.cheme.cmu.edu/blog/2015/11/20/Asynchronously-running-python-blocks-in-org-mode/][asynchronously]]. This year, my students asked for some enhancements related to debugging. Basically, they were frustrated by a few things when they got errors. First, they found it difficult to find the line number in the Traceback in the src block because there are no line numbers in the block, and it is annoying to do a special edit just for line numbers.

I thought about this, and figured out how to significantly improve the situation. The async python code in scimax now has the following features:

1. When you get a Traceback, it goes in the results, and each file listed in it is hyperlinked to the source file and line so it is easy to get to them.
2. The cursor jumps to the last line in the code block that is listed in the Traceback, and a beacon shines to show you the line
3. You can turn on temporary line numbers in the code block to see where the lines are in the block, and these disappear when you start typing. This is done in the variable `org-babel-async-python-show-line-numbers'.
4. You can control whether a buffer of the results shows or not via the variable `org-babel-async-python-show-results'.
5. When you run the block, you get a clickable link in the RESULTS section to kill the process.
6. You may also find the `autopep8' and `pylint' functions helpful.

The code for this is currently found here:
https://github.com/jkitchin/scimax/blob/org-9/scimax-org-babel-python.el

Eventually, I will merge this into master, after I am sure about all the changes needed for org 9.0. That is not likely to happen until the semester ends, so I do not mess up my students who use scimax in class. So, sometime mid-December it will make into master.

To make async the default way to run a python block use this code, so that you can use C-c C-c to run them:

#+BEGIN_SRC emacs-lisp :results silent
(require 'scimax-org-babel-python)
(add-to-list 'org-ctrl-c-ctrl-c-hook 'org-babel-async-execute:python)
#+END_SRC

As with the past few posts, this video will make it much more clear what the post is about:

#+BEGIN_EXPORT html
<iframe width="560" height="315" src="https://www.youtube.com/embed/m4vCXM7_p_o" frameborder="0" allowfullscreen></iframe>
#+END_EXPORT


Here is a prototypical example that shows how it works. While it runs you can view the progress if you click on the link to show the results.

#+BEGIN_SRC python :results output org drawer
import time

for i in range(5):
    print(i)
    time.sleep(2)
#+END_SRC

#+RESULTS:
:RESULTS:
0
1
2
3
4
Traceback (most recent call last):
  File "Org SRC", line 5, in <module>
    time.sleep(2)
KeyboardInterrupt
:END:




This block has a pretty obvious issue when we run it. The cursor jumps right to the problem!

#+BEGIN_SRC python :results output org drawer
print('This line is ok')
# 5 / 0
print('We will not see this')
#+END_SRC

#+RESULTS:
:RESULTS:
This line is ok
We will not see this
:END:



This block shows we can access any of the links in the Traceback. Here we have an error in calling a function that is raised in an external file.

#+BEGIN_SRC python :results output org drawer
import numpy as np
from scipy.integrate import odeint

Vspan = np.linspace(0, 2) # L

# dF/dV = F
def dFdV(F, V, v0):
    return F


print(odeint(dFdV, 1.0, Vspan))
#+END_SRC

#+RESULTS:
:RESULTS:
Traceback (most recent call last):
  File "Org SRC", line 11, in <module>
    print(odeint(dFdV, 1.0, Vspan))
  File "/Users/jkitchin/anaconda3/lib/python3.5/site-packages/scipy/integrate/odepack.py", line 215, in odeint
    ixpr, mxstep, mxhnil, mxordn, mxords)
TypeError: dFdV() missing 1 required positional argument: 'v0'
:END:


Here we show how nice it is to be able to kill a process. This block will not end on its own.

#+BEGIN_SRC python :results output org drawer
while True:
    pass
#+END_SRC

#+RESULTS:
:RESULTS:
Traceback (most recent call last):
  File "Org SRC", line 2, in <module>
    pass
KeyboardInterrupt
:END:

** autopep8

[[https://pypi.python.org/pypi/autopep8][autopep8]] is a tool for reformatting Python code. We wrapped this into an Emacs command so you can quickly reformat a Python code block.

#+BEGIN_SRC python :results output org drawer
a = 4
b = 5
c = a * b  # comment
# another comment


def f(x):
    return x
print(f(5))
#+END_SRC

** pylint

[[https://www.pylint.org][pylint]] is a great tool for checking your Python code for errors, style and conventions. We also wrapped this into an Emacs command so you can run it on a Python src block. The report that is generated had clickable links to help you get right to the lines in your code block with problems.

#+BEGIN_SRC python :results output org drawer
import numpy as np

a = np.array(5, 5)

def f(x): return x

print(f(6))
#+END_SRC


* DONE New color link in org 9.0 using font-lock to color the text
  CLOSED: [2016-11-08 Tue 18:36]
  :PROPERTIES:
  :categories: emacs,orgmode
  :date:     2016/11/08 18:36:28
  :updated:  2016/11/08 18:36:28
  :END:
I previously blogged about [[http://kitchingroup.cheme.cmu.edu/blog/2016/01/16/Colored-text-in-org-mode-with-export-to-HTML/][colored text in org-mode]] using links. Back in org 8.0, we had to do some tricky work with font-lock to get the colors to work, and particularly had to use overlays to get reliable coloring. Org 9.0 improves this a lot, with the font-lock built right in, and some other nice features like completion. The integration of font-lock means we do not have to deal with overlays! Here is what it looks like in my buffer:

#+attr_org: :width 300
[[./screenshots/date-08-11-2016-time-18-31-18.png]]

And it exports nicely to HTML. You can see the code here: [[id:FA2E424A-84B3-4DD0-A683-98702F9E51BF][Code for the color link]]. This is good for small bits of text you want colored. It is not good for paragraphs, or text with line breaks in it, because links do not support that. It also is not useful in code blocks since the link syntax would break the code. You need an alternative approach for those applications which is more complicated than these simple links. One nice feature of this is the persistence (I mean it comes back when you open the file after closing it) of the color since it is explicit markup in the file.

#+BEGIN_SRC emacs-lisp :results output org drawer
(loop for color in color-name-rgb-alist
      do
      (princ (format "[[color:%s][Text colored in %s]] " (car color) (car color))))
#+END_SRC

#+RESULTS:
:RESULTS:
[[color:snow][Text colored in snow]] [[color:ghostwhite][Text colored in ghostwhite]] [[color:whitesmoke][Text colored in whitesmoke]] [[color:gainsboro][Text colored in gainsboro]] [[color:floralwhite][Text colored in floralwhite]] [[color:oldlace][Text colored in oldlace]] [[color:linen][Text colored in linen]] [[color:antiquewhite][Text colored in antiquewhite]] [[color:papayawhip][Text colored in papayawhip]] [[color:blanchedalmond][Text colored in blanchedalmond]] [[color:bisque][Text colored in bisque]] [[color:peachpuff][Text colored in peachpuff]] [[color:navajowhite][Text colored in navajowhite]] [[color:moccasin][Text colored in moccasin]] [[color:cornsilk][Text colored in cornsilk]] [[color:ivory][Text colored in ivory]] [[color:lemonchiffon][Text colored in lemonchiffon]] [[color:seashell][Text colored in seashell]] [[color:honeydew][Text colored in honeydew]] [[color:mintcream][Text colored in mintcream]] [[color:azure][Text colored in azure]] [[color:aliceblue][Text colored in aliceblue]] [[color:lavender][Text colored in lavender]] [[color:lavenderblush][Text colored in lavenderblush]] [[color:mistyrose][Text colored in mistyrose]] [[color:white][Text colored in white]] [[color:black][Text colored in black]] [[color:darkslategray][Text colored in darkslategray]] [[color:darkslategrey][Text colored in darkslategrey]] [[color:dimgray][Text colored in dimgray]] [[color:dimgrey][Text colored in dimgrey]] [[color:slategray][Text colored in slategray]] [[color:slategrey][Text colored in slategrey]] [[color:lightslategray][Text colored in lightslategray]] [[color:lightslategrey][Text colored in lightslategrey]] [[color:gray][Text colored in gray]] [[color:grey][Text colored in grey]] [[color:lightgrey][Text colored in lightgrey]] [[color:lightgray][Text colored in lightgray]] [[color:midnightblue][Text colored in midnightblue]] [[color:navy][Text colored in navy]] [[color:navyblue][Text colored in navyblue]] [[color:cornflowerblue][Text colored in cornflowerblue]] [[color:darkslateblue][Text colored in darkslateblue]] [[color:slateblue][Text colored in slateblue]] [[color:mediumslateblue][Text colored in mediumslateblue]] [[color:lightslateblue][Text colored in lightslateblue]] [[color:mediumblue][Text colored in mediumblue]] [[color:royalblue][Text colored in royalblue]] [[color:blue][Text colored in blue]] [[color:dodgerblue][Text colored in dodgerblue]] [[color:deepskyblue][Text colored in deepskyblue]] [[color:skyblue][Text colored in skyblue]] [[color:lightskyblue][Text colored in lightskyblue]] [[color:steelblue][Text colored in steelblue]] [[color:lightsteelblue][Text colored in lightsteelblue]] [[color:lightblue][Text colored in lightblue]] [[color:powderblue][Text colored in powderblue]] [[color:paleturquoise][Text colored in paleturquoise]] [[color:darkturquoise][Text colored in darkturquoise]] [[color:mediumturquoise][Text colored in mediumturquoise]] [[color:turquoise][Text colored in turquoise]] [[color:cyan][Text colored in cyan]] [[color:lightcyan][Text colored in lightcyan]] [[color:cadetblue][Text colored in cadetblue]] [[color:mediumaquamarine][Text colored in mediumaquamarine]] [[color:aquamarine][Text colored in aquamarine]] [[color:darkgreen][Text colored in darkgreen]] [[color:darkolivegreen][Text colored in darkolivegreen]] [[color:darkseagreen][Text colored in darkseagreen]] [[color:seagreen][Text colored in seagreen]] [[color:mediumseagreen][Text colored in mediumseagreen]] [[color:lightseagreen][Text colored in lightseagreen]] [[color:palegreen][Text colored in palegreen]] [[color:springgreen][Text colored in springgreen]] [[color:lawngreen][Text colored in lawngreen]] [[color:green][Text colored in green]] [[color:chartreuse][Text colored in chartreuse]] [[color:mediumspringgreen][Text colored in mediumspringgreen]] [[color:greenyellow][Text colored in greenyellow]] [[color:limegreen][Text colored in limegreen]] [[color:yellowgreen][Text colored in yellowgreen]] [[color:forestgreen][Text colored in forestgreen]] [[color:olivedrab][Text colored in olivedrab]] [[color:darkkhaki][Text colored in darkkhaki]] [[color:khaki][Text colored in khaki]] [[color:palegoldenrod][Text colored in palegoldenrod]] [[color:lightgoldenrodyellow][Text colored in lightgoldenrodyellow]] [[color:lightyellow][Text colored in lightyellow]] [[color:yellow][Text colored in yellow]] [[color:gold][Text colored in gold]] [[color:lightgoldenrod][Text colored in lightgoldenrod]] [[color:goldenrod][Text colored in goldenrod]] [[color:darkgoldenrod][Text colored in darkgoldenrod]] [[color:rosybrown][Text colored in rosybrown]] [[color:indianred][Text colored in indianred]] [[color:saddlebrown][Text colored in saddlebrown]] [[color:sienna][Text colored in sienna]] [[color:peru][Text colored in peru]] [[color:burlywood][Text colored in burlywood]] [[color:beige][Text colored in beige]] [[color:wheat][Text colored in wheat]] [[color:sandybrown][Text colored in sandybrown]] [[color:tan][Text colored in tan]] [[color:chocolate][Text colored in chocolate]] [[color:firebrick][Text colored in firebrick]] [[color:brown][Text colored in brown]] [[color:darksalmon][Text colored in darksalmon]] [[color:salmon][Text colored in salmon]] [[color:lightsalmon][Text colored in lightsalmon]] [[color:orange][Text colored in orange]] [[color:darkorange][Text colored in darkorange]] [[color:coral][Text colored in coral]] [[color:lightcoral][Text colored in lightcoral]] [[color:tomato][Text colored in tomato]] [[color:orangered][Text colored in orangered]] [[color:red][Text colored in red]] [[color:hotpink][Text colored in hotpink]] [[color:deeppink][Text colored in deeppink]] [[color:pink][Text colored in pink]] [[color:lightpink][Text colored in lightpink]] [[color:palevioletred][Text colored in palevioletred]] [[color:maroon][Text colored in maroon]] [[color:mediumvioletred][Text colored in mediumvioletred]] [[color:violetred][Text colored in violetred]] [[color:magenta][Text colored in magenta]] [[color:violet][Text colored in violet]] [[color:plum][Text colored in plum]] [[color:orchid][Text colored in orchid]] [[color:mediumorchid][Text colored in mediumorchid]] [[color:darkorchid][Text colored in darkorchid]] [[color:darkviolet][Text colored in darkviolet]] [[color:blueviolet][Text colored in blueviolet]] [[color:purple][Text colored in purple]] [[color:mediumpurple][Text colored in mediumpurple]] [[color:thistle][Text colored in thistle]] [[color:snow1][Text colored in snow1]] [[color:snow2][Text colored in snow2]] [[color:snow3][Text colored in snow3]] [[color:snow4][Text colored in snow4]] [[color:seashell1][Text colored in seashell1]] [[color:seashell2][Text colored in seashell2]] [[color:seashell3][Text colored in seashell3]] [[color:seashell4][Text colored in seashell4]] [[color:antiquewhite1][Text colored in antiquewhite1]] [[color:antiquewhite2][Text colored in antiquewhite2]] [[color:antiquewhite3][Text colored in antiquewhite3]] [[color:antiquewhite4][Text colored in antiquewhite4]] [[color:bisque1][Text colored in bisque1]] [[color:bisque2][Text colored in bisque2]] [[color:bisque3][Text colored in bisque3]] [[color:bisque4][Text colored in bisque4]] [[color:peachpuff1][Text colored in peachpuff1]] [[color:peachpuff2][Text colored in peachpuff2]] [[color:peachpuff3][Text colored in peachpuff3]] [[color:peachpuff4][Text colored in peachpuff4]] [[color:navajowhite1][Text colored in navajowhite1]] [[color:navajowhite2][Text colored in navajowhite2]] [[color:navajowhite3][Text colored in navajowhite3]] [[color:navajowhite4][Text colored in navajowhite4]] [[color:lemonchiffon1][Text colored in lemonchiffon1]] [[color:lemonchiffon2][Text colored in lemonchiffon2]] [[color:lemonchiffon3][Text colored in lemonchiffon3]] [[color:lemonchiffon4][Text colored in lemonchiffon4]] [[color:cornsilk1][Text colored in cornsilk1]] [[color:cornsilk2][Text colored in cornsilk2]] [[color:cornsilk3][Text colored in cornsilk3]] [[color:cornsilk4][Text colored in cornsilk4]] [[color:ivory1][Text colored in ivory1]] [[color:ivory2][Text colored in ivory2]] [[color:ivory3][Text colored in ivory3]] [[color:ivory4][Text colored in ivory4]] [[color:honeydew1][Text colored in honeydew1]] [[color:honeydew2][Text colored in honeydew2]] [[color:honeydew3][Text colored in honeydew3]] [[color:honeydew4][Text colored in honeydew4]] [[color:lavenderblush1][Text colored in lavenderblush1]] [[color:lavenderblush2][Text colored in lavenderblush2]] [[color:lavenderblush3][Text colored in lavenderblush3]] [[color:lavenderblush4][Text colored in lavenderblush4]] [[color:mistyrose1][Text colored in mistyrose1]] [[color:mistyrose2][Text colored in mistyrose2]] [[color:mistyrose3][Text colored in mistyrose3]] [[color:mistyrose4][Text colored in mistyrose4]] [[color:azure1][Text colored in azure1]] [[color:azure2][Text colored in azure2]] [[color:azure3][Text colored in azure3]] [[color:azure4][Text colored in azure4]] [[color:slateblue1][Text colored in slateblue1]] [[color:slateblue2][Text colored in slateblue2]] [[color:slateblue3][Text colored in slateblue3]] [[color:slateblue4][Text colored in slateblue4]] [[color:royalblue1][Text colored in royalblue1]] [[color:royalblue2][Text colored in royalblue2]] [[color:royalblue3][Text colored in royalblue3]] [[color:royalblue4][Text colored in royalblue4]] [[color:blue1][Text colored in blue1]] [[color:blue2][Text colored in blue2]] [[color:blue3][Text colored in blue3]] [[color:blue4][Text colored in blue4]] [[color:dodgerblue1][Text colored in dodgerblue1]] [[color:dodgerblue2][Text colored in dodgerblue2]] [[color:dodgerblue3][Text colored in dodgerblue3]] [[color:dodgerblue4][Text colored in dodgerblue4]] [[color:steelblue1][Text colored in steelblue1]] [[color:steelblue2][Text colored in steelblue2]] [[color:steelblue3][Text colored in steelblue3]] [[color:steelblue4][Text colored in steelblue4]] [[color:deepskyblue1][Text colored in deepskyblue1]] [[color:deepskyblue2][Text colored in deepskyblue2]] [[color:deepskyblue3][Text colored in deepskyblue3]] [[color:deepskyblue4][Text colored in deepskyblue4]] [[color:skyblue1][Text colored in skyblue1]] [[color:skyblue2][Text colored in skyblue2]] [[color:skyblue3][Text colored in skyblue3]] [[color:skyblue4][Text colored in skyblue4]] [[color:lightskyblue1][Text colored in lightskyblue1]] [[color:lightskyblue2][Text colored in lightskyblue2]] [[color:lightskyblue3][Text colored in lightskyblue3]] [[color:lightskyblue4][Text colored in lightskyblue4]] [[color:slategray1][Text colored in slategray1]] [[color:slategray2][Text colored in slategray2]] [[color:slategray3][Text colored in slategray3]] [[color:slategray4][Text colored in slategray4]] [[color:lightsteelblue1][Text colored in lightsteelblue1]] [[color:lightsteelblue2][Text colored in lightsteelblue2]] [[color:lightsteelblue3][Text colored in lightsteelblue3]] [[color:lightsteelblue4][Text colored in lightsteelblue4]] [[color:lightblue1][Text colored in lightblue1]] [[color:lightblue2][Text colored in lightblue2]] [[color:lightblue3][Text colored in lightblue3]] [[color:lightblue4][Text colored in lightblue4]] [[color:lightcyan1][Text colored in lightcyan1]] [[color:lightcyan2][Text colored in lightcyan2]] [[color:lightcyan3][Text colored in lightcyan3]] [[color:lightcyan4][Text colored in lightcyan4]] [[color:paleturquoise1][Text colored in paleturquoise1]] [[color:paleturquoise2][Text colored in paleturquoise2]] [[color:paleturquoise3][Text colored in paleturquoise3]] [[color:paleturquoise4][Text colored in paleturquoise4]] [[color:cadetblue1][Text colored in cadetblue1]] [[color:cadetblue2][Text colored in cadetblue2]] [[color:cadetblue3][Text colored in cadetblue3]] [[color:cadetblue4][Text colored in cadetblue4]] [[color:turquoise1][Text colored in turquoise1]] [[color:turquoise2][Text colored in turquoise2]] [[color:turquoise3][Text colored in turquoise3]] [[color:turquoise4][Text colored in turquoise4]] [[color:cyan1][Text colored in cyan1]] [[color:cyan2][Text colored in cyan2]] [[color:cyan3][Text colored in cyan3]] [[color:cyan4][Text colored in cyan4]] [[color:darkslategray1][Text colored in darkslategray1]] [[color:darkslategray2][Text colored in darkslategray2]] [[color:darkslategray3][Text colored in darkslategray3]] [[color:darkslategray4][Text colored in darkslategray4]] [[color:aquamarine1][Text colored in aquamarine1]] [[color:aquamarine2][Text colored in aquamarine2]] [[color:aquamarine3][Text colored in aquamarine3]] [[color:aquamarine4][Text colored in aquamarine4]] [[color:darkseagreen1][Text colored in darkseagreen1]] [[color:darkseagreen2][Text colored in darkseagreen2]] [[color:darkseagreen3][Text colored in darkseagreen3]] [[color:darkseagreen4][Text colored in darkseagreen4]] [[color:seagreen1][Text colored in seagreen1]] [[color:seagreen2][Text colored in seagreen2]] [[color:seagreen3][Text colored in seagreen3]] [[color:seagreen4][Text colored in seagreen4]] [[color:palegreen1][Text colored in palegreen1]] [[color:palegreen2][Text colored in palegreen2]] [[color:palegreen3][Text colored in palegreen3]] [[color:palegreen4][Text colored in palegreen4]] [[color:springgreen1][Text colored in springgreen1]] [[color:springgreen2][Text colored in springgreen2]] [[color:springgreen3][Text colored in springgreen3]] [[color:springgreen4][Text colored in springgreen4]] [[color:green1][Text colored in green1]] [[color:green2][Text colored in green2]] [[color:green3][Text colored in green3]] [[color:green4][Text colored in green4]] [[color:chartreuse1][Text colored in chartreuse1]] [[color:chartreuse2][Text colored in chartreuse2]] [[color:chartreuse3][Text colored in chartreuse3]] [[color:chartreuse4][Text colored in chartreuse4]] [[color:olivedrab1][Text colored in olivedrab1]] [[color:olivedrab2][Text colored in olivedrab2]] [[color:olivedrab3][Text colored in olivedrab3]] [[color:olivedrab4][Text colored in olivedrab4]] [[color:darkolivegreen1][Text colored in darkolivegreen1]] [[color:darkolivegreen2][Text colored in darkolivegreen2]] [[color:darkolivegreen3][Text colored in darkolivegreen3]] [[color:darkolivegreen4][Text colored in darkolivegreen4]] [[color:khaki1][Text colored in khaki1]] [[color:khaki2][Text colored in khaki2]] [[color:khaki3][Text colored in khaki3]] [[color:khaki4][Text colored in khaki4]] [[color:lightgoldenrod1][Text colored in lightgoldenrod1]] [[color:lightgoldenrod2][Text colored in lightgoldenrod2]] [[color:lightgoldenrod3][Text colored in lightgoldenrod3]] [[color:lightgoldenrod4][Text colored in lightgoldenrod4]] [[color:lightyellow1][Text colored in lightyellow1]] [[color:lightyellow2][Text colored in lightyellow2]] [[color:lightyellow3][Text colored in lightyellow3]] [[color:lightyellow4][Text colored in lightyellow4]] [[color:yellow1][Text colored in yellow1]] [[color:yellow2][Text colored in yellow2]] [[color:yellow3][Text colored in yellow3]] [[color:yellow4][Text colored in yellow4]] [[color:gold1][Text colored in gold1]] [[color:gold2][Text colored in gold2]] [[color:gold3][Text colored in gold3]] [[color:gold4][Text colored in gold4]] [[color:goldenrod1][Text colored in goldenrod1]] [[color:goldenrod2][Text colored in goldenrod2]] [[color:goldenrod3][Text colored in goldenrod3]] [[color:goldenrod4][Text colored in goldenrod4]] [[color:darkgoldenrod1][Text colored in darkgoldenrod1]] [[color:darkgoldenrod2][Text colored in darkgoldenrod2]] [[color:darkgoldenrod3][Text colored in darkgoldenrod3]] [[color:darkgoldenrod4][Text colored in darkgoldenrod4]] [[color:rosybrown1][Text colored in rosybrown1]] [[color:rosybrown2][Text colored in rosybrown2]] [[color:rosybrown3][Text colored in rosybrown3]] [[color:rosybrown4][Text colored in rosybrown4]] [[color:indianred1][Text colored in indianred1]] [[color:indianred2][Text colored in indianred2]] [[color:indianred3][Text colored in indianred3]] [[color:indianred4][Text colored in indianred4]] [[color:sienna1][Text colored in sienna1]] [[color:sienna2][Text colored in sienna2]] [[color:sienna3][Text colored in sienna3]] [[color:sienna4][Text colored in sienna4]] [[color:burlywood1][Text colored in burlywood1]] [[color:burlywood2][Text colored in burlywood2]] [[color:burlywood3][Text colored in burlywood3]] [[color:burlywood4][Text colored in burlywood4]] [[color:wheat1][Text colored in wheat1]] [[color:wheat2][Text colored in wheat2]] [[color:wheat3][Text colored in wheat3]] [[color:wheat4][Text colored in wheat4]] [[color:tan1][Text colored in tan1]] [[color:tan2][Text colored in tan2]] [[color:tan3][Text colored in tan3]] [[color:tan4][Text colored in tan4]] [[color:chocolate1][Text colored in chocolate1]] [[color:chocolate2][Text colored in chocolate2]] [[color:chocolate3][Text colored in chocolate3]] [[color:chocolate4][Text colored in chocolate4]] [[color:firebrick1][Text colored in firebrick1]] [[color:firebrick2][Text colored in firebrick2]] [[color:firebrick3][Text colored in firebrick3]] [[color:firebrick4][Text colored in firebrick4]] [[color:brown1][Text colored in brown1]] [[color:brown2][Text colored in brown2]] [[color:brown3][Text colored in brown3]] [[color:brown4][Text colored in brown4]] [[color:salmon1][Text colored in salmon1]] [[color:salmon2][Text colored in salmon2]] [[color:salmon3][Text colored in salmon3]] [[color:salmon4][Text colored in salmon4]] [[color:lightsalmon1][Text colored in lightsalmon1]] [[color:lightsalmon2][Text colored in lightsalmon2]] [[color:lightsalmon3][Text colored in lightsalmon3]] [[color:lightsalmon4][Text colored in lightsalmon4]] [[color:orange1][Text colored in orange1]] [[color:orange2][Text colored in orange2]] [[color:orange3][Text colored in orange3]] [[color:orange4][Text colored in orange4]] [[color:darkorange1][Text colored in darkorange1]] [[color:darkorange2][Text colored in darkorange2]] [[color:darkorange3][Text colored in darkorange3]] [[color:darkorange4][Text colored in darkorange4]] [[color:coral1][Text colored in coral1]] [[color:coral2][Text colored in coral2]] [[color:coral3][Text colored in coral3]] [[color:coral4][Text colored in coral4]] [[color:tomato1][Text colored in tomato1]] [[color:tomato2][Text colored in tomato2]] [[color:tomato3][Text colored in tomato3]] [[color:tomato4][Text colored in tomato4]] [[color:orangered1][Text colored in orangered1]] [[color:orangered2][Text colored in orangered2]] [[color:orangered3][Text colored in orangered3]] [[color:orangered4][Text colored in orangered4]] [[color:red1][Text colored in red1]] [[color:red2][Text colored in red2]] [[color:red3][Text colored in red3]] [[color:red4][Text colored in red4]] [[color:deeppink1][Text colored in deeppink1]] [[color:deeppink2][Text colored in deeppink2]] [[color:deeppink3][Text colored in deeppink3]] [[color:deeppink4][Text colored in deeppink4]] [[color:hotpink1][Text colored in hotpink1]] [[color:hotpink2][Text colored in hotpink2]] [[color:hotpink3][Text colored in hotpink3]] [[color:hotpink4][Text colored in hotpink4]] [[color:pink1][Text colored in pink1]] [[color:pink2][Text colored in pink2]] [[color:pink3][Text colored in pink3]] [[color:pink4][Text colored in pink4]] [[color:lightpink1][Text colored in lightpink1]] [[color:lightpink2][Text colored in lightpink2]] [[color:lightpink3][Text colored in lightpink3]] [[color:lightpink4][Text colored in lightpink4]] [[color:palevioletred1][Text colored in palevioletred1]] [[color:palevioletred2][Text colored in palevioletred2]] [[color:palevioletred3][Text colored in palevioletred3]] [[color:palevioletred4][Text colored in palevioletred4]] [[color:maroon1][Text colored in maroon1]] [[color:maroon2][Text colored in maroon2]] [[color:maroon3][Text colored in maroon3]] [[color:maroon4][Text colored in maroon4]] [[color:violetred1][Text colored in violetred1]] [[color:violetred2][Text colored in violetred2]] [[color:violetred3][Text colored in violetred3]] [[color:violetred4][Text colored in violetred4]] [[color:magenta1][Text colored in magenta1]] [[color:magenta2][Text colored in magenta2]] [[color:magenta3][Text colored in magenta3]] [[color:magenta4][Text colored in magenta4]] [[color:orchid1][Text colored in orchid1]] [[color:orchid2][Text colored in orchid2]] [[color:orchid3][Text colored in orchid3]] [[color:orchid4][Text colored in orchid4]] [[color:plum1][Text colored in plum1]] [[color:plum2][Text colored in plum2]] [[color:plum3][Text colored in plum3]] [[color:plum4][Text colored in plum4]] [[color:mediumorchid1][Text colored in mediumorchid1]] [[color:mediumorchid2][Text colored in mediumorchid2]] [[color:mediumorchid3][Text colored in mediumorchid3]] [[color:mediumorchid4][Text colored in mediumorchid4]] [[color:darkorchid1][Text colored in darkorchid1]] [[color:darkorchid2][Text colored in darkorchid2]] [[color:darkorchid3][Text colored in darkorchid3]] [[color:darkorchid4][Text colored in darkorchid4]] [[color:purple1][Text colored in purple1]] [[color:purple2][Text colored in purple2]] [[color:purple3][Text colored in purple3]] [[color:purple4][Text colored in purple4]] [[color:mediumpurple1][Text colored in mediumpurple1]] [[color:mediumpurple2][Text colored in mediumpurple2]] [[color:mediumpurple3][Text colored in mediumpurple3]] [[color:mediumpurple4][Text colored in mediumpurple4]] [[color:thistle1][Text colored in thistle1]] [[color:thistle2][Text colored in thistle2]] [[color:thistle3][Text colored in thistle3]] [[color:thistle4][Text colored in thistle4]] [[color:gray0][Text colored in gray0]] [[color:grey0][Text colored in grey0]] [[color:gray1][Text colored in gray1]] [[color:grey1][Text colored in grey1]] [[color:gray2][Text colored in gray2]] [[color:grey2][Text colored in grey2]] [[color:gray3][Text colored in gray3]] [[color:grey3][Text colored in grey3]] [[color:gray4][Text colored in gray4]] [[color:grey4][Text colored in grey4]] [[color:gray5][Text colored in gray5]] [[color:grey5][Text colored in grey5]] [[color:gray6][Text colored in gray6]] [[color:grey6][Text colored in grey6]] [[color:gray7][Text colored in gray7]] [[color:grey7][Text colored in grey7]] [[color:gray8][Text colored in gray8]] [[color:grey8][Text colored in grey8]] [[color:gray9][Text colored in gray9]] [[color:grey9][Text colored in grey9]] [[color:gray10][Text colored in gray10]] [[color:grey10][Text colored in grey10]] [[color:gray11][Text colored in gray11]] [[color:grey11][Text colored in grey11]] [[color:gray12][Text colored in gray12]] [[color:grey12][Text colored in grey12]] [[color:gray13][Text colored in gray13]] [[color:grey13][Text colored in grey13]] [[color:gray14][Text colored in gray14]] [[color:grey14][Text colored in grey14]] [[color:gray15][Text colored in gray15]] [[color:grey15][Text colored in grey15]] [[color:gray16][Text colored in gray16]] [[color:grey16][Text colored in grey16]] [[color:gray17][Text colored in gray17]] [[color:grey17][Text colored in grey17]] [[color:gray18][Text colored in gray18]] [[color:grey18][Text colored in grey18]] [[color:gray19][Text colored in gray19]] [[color:grey19][Text colored in grey19]] [[color:gray20][Text colored in gray20]] [[color:grey20][Text colored in grey20]] [[color:gray21][Text colored in gray21]] [[color:grey21][Text colored in grey21]] [[color:gray22][Text colored in gray22]] [[color:grey22][Text colored in grey22]] [[color:gray23][Text colored in gray23]] [[color:grey23][Text colored in grey23]] [[color:gray24][Text colored in gray24]] [[color:grey24][Text colored in grey24]] [[color:gray25][Text colored in gray25]] [[color:grey25][Text colored in grey25]] [[color:gray26][Text colored in gray26]] [[color:grey26][Text colored in grey26]] [[color:gray27][Text colored in gray27]] [[color:grey27][Text colored in grey27]] [[color:gray28][Text colored in gray28]] [[color:grey28][Text colored in grey28]] [[color:gray29][Text colored in gray29]] [[color:grey29][Text colored in grey29]] [[color:gray30][Text colored in gray30]] [[color:grey30][Text colored in grey30]] [[color:gray31][Text colored in gray31]] [[color:grey31][Text colored in grey31]] [[color:gray32][Text colored in gray32]] [[color:grey32][Text colored in grey32]] [[color:gray33][Text colored in gray33]] [[color:grey33][Text colored in grey33]] [[color:gray34][Text colored in gray34]] [[color:grey34][Text colored in grey34]] [[color:gray35][Text colored in gray35]] [[color:grey35][Text colored in grey35]] [[color:gray36][Text colored in gray36]] [[color:grey36][Text colored in grey36]] [[color:gray37][Text colored in gray37]] [[color:grey37][Text colored in grey37]] [[color:gray38][Text colored in gray38]] [[color:grey38][Text colored in grey38]] [[color:gray39][Text colored in gray39]] [[color:grey39][Text colored in grey39]] [[color:gray40][Text colored in gray40]] [[color:grey40][Text colored in grey40]] [[color:gray41][Text colored in gray41]] [[color:grey41][Text colored in grey41]] [[color:gray42][Text colored in gray42]] [[color:grey42][Text colored in grey42]] [[color:gray43][Text colored in gray43]] [[color:grey43][Text colored in grey43]] [[color:gray44][Text colored in gray44]] [[color:grey44][Text colored in grey44]] [[color:gray45][Text colored in gray45]] [[color:grey45][Text colored in grey45]] [[color:gray46][Text colored in gray46]] [[color:grey46][Text colored in grey46]] [[color:gray47][Text colored in gray47]] [[color:grey47][Text colored in grey47]] [[color:gray48][Text colored in gray48]] [[color:grey48][Text colored in grey48]] [[color:gray49][Text colored in gray49]] [[color:grey49][Text colored in grey49]] [[color:gray50][Text colored in gray50]] [[color:grey50][Text colored in grey50]] [[color:gray51][Text colored in gray51]] [[color:grey51][Text colored in grey51]] [[color:gray52][Text colored in gray52]] [[color:grey52][Text colored in grey52]] [[color:gray53][Text colored in gray53]] [[color:grey53][Text colored in grey53]] [[color:gray54][Text colored in gray54]] [[color:grey54][Text colored in grey54]] [[color:gray55][Text colored in gray55]] [[color:grey55][Text colored in grey55]] [[color:gray56][Text colored in gray56]] [[color:grey56][Text colored in grey56]] [[color:gray57][Text colored in gray57]] [[color:grey57][Text colored in grey57]] [[color:gray58][Text colored in gray58]] [[color:grey58][Text colored in grey58]] [[color:gray59][Text colored in gray59]] [[color:grey59][Text colored in grey59]] [[color:gray60][Text colored in gray60]] [[color:grey60][Text colored in grey60]] [[color:gray61][Text colored in gray61]] [[color:grey61][Text colored in grey61]] [[color:gray62][Text colored in gray62]] [[color:grey62][Text colored in grey62]] [[color:gray63][Text colored in gray63]] [[color:grey63][Text colored in grey63]] [[color:gray64][Text colored in gray64]] [[color:grey64][Text colored in grey64]] [[color:gray65][Text colored in gray65]] [[color:grey65][Text colored in grey65]] [[color:gray66][Text colored in gray66]] [[color:grey66][Text colored in grey66]] [[color:gray67][Text colored in gray67]] [[color:grey67][Text colored in grey67]] [[color:gray68][Text colored in gray68]] [[color:grey68][Text colored in grey68]] [[color:gray69][Text colored in gray69]] [[color:grey69][Text colored in grey69]] [[color:gray70][Text colored in gray70]] [[color:grey70][Text colored in grey70]] [[color:gray71][Text colored in gray71]] [[color:grey71][Text colored in grey71]] [[color:gray72][Text colored in gray72]] [[color:grey72][Text colored in grey72]] [[color:gray73][Text colored in gray73]] [[color:grey73][Text colored in grey73]] [[color:gray74][Text colored in gray74]] [[color:grey74][Text colored in grey74]] [[color:gray75][Text colored in gray75]] [[color:grey75][Text colored in grey75]] [[color:gray76][Text colored in gray76]] [[color:grey76][Text colored in grey76]] [[color:gray77][Text colored in gray77]] [[color:grey77][Text colored in grey77]] [[color:gray78][Text colored in gray78]] [[color:grey78][Text colored in grey78]] [[color:gray79][Text colored in gray79]] [[color:grey79][Text colored in grey79]] [[color:gray80][Text colored in gray80]] [[color:grey80][Text colored in grey80]] [[color:gray81][Text colored in gray81]] [[color:grey81][Text colored in grey81]] [[color:gray82][Text colored in gray82]] [[color:grey82][Text colored in grey82]] [[color:gray83][Text colored in gray83]] [[color:grey83][Text colored in grey83]] [[color:gray84][Text colored in gray84]] [[color:grey84][Text colored in grey84]] [[color:gray85][Text colored in gray85]] [[color:grey85][Text colored in grey85]] [[color:gray86][Text colored in gray86]] [[color:grey86][Text colored in grey86]] [[color:gray87][Text colored in gray87]] [[color:grey87][Text colored in grey87]] [[color:gray88][Text colored in gray88]] [[color:grey88][Text colored in grey88]] [[color:gray89][Text colored in gray89]] [[color:grey89][Text colored in grey89]] [[color:gray90][Text colored in gray90]] [[color:grey90][Text colored in grey90]] [[color:gray91][Text colored in gray91]] [[color:grey91][Text colored in grey91]] [[color:gray92][Text colored in gray92]] [[color:grey92][Text colored in grey92]] [[color:gray93][Text colored in gray93]] [[color:grey93][Text colored in grey93]] [[color:gray94][Text colored in gray94]] [[color:grey94][Text colored in grey94]] [[color:gray95][Text colored in gray95]] [[color:grey95][Text colored in grey95]] [[color:gray96][Text colored in gray96]] [[color:grey96][Text colored in grey96]] [[color:gray97][Text colored in gray97]] [[color:grey97][Text colored in grey97]] [[color:gray98][Text colored in gray98]] [[color:grey98][Text colored in grey98]] [[color:gray99][Text colored in gray99]] [[color:grey99][Text colored in grey99]] [[color:gray100][Text colored in gray100]] [[color:grey100][Text colored in grey100]] [[color:darkgrey][Text colored in darkgrey]] [[color:darkgray][Text colored in darkgray]] [[color:darkblue][Text colored in darkblue]] [[color:darkcyan][Text colored in darkcyan]] [[color:darkmagenta][Text colored in darkmagenta]] [[color:darkred][Text colored in darkred]] [[color:lightgreen][Text colored in lightgreen]]
:END:


** Code for the color link
   :PROPERTIES:
   :ID:       FA2E424A-84B3-4DD0-A683-98702F9E51BF
   :END:
#+BEGIN_SRC emacs-lisp
(require 's)

(defun color-comp (&optional arg)
  "Completion function for color links."
  (let ((color-data (prog2
			(save-selected-window
			  (list-colors-display))
			(with-current-buffer (get-buffer "*Colors*")
			  (mapcar (lambda (line)
				    (append (list line)
					    (s-split " " line t)))
				  (s-split "\n" (buffer-string))))
		      (kill-buffer "*Colors*"))))
    (format "color:%s"
	    (s-trim (cadr (assoc (completing-read "Color: " color-data) color-data))))))


(defun color-link-face (path)
  "Face function for color links."
  (or (cdr (assoc path org-link-colors))
      `(:foreground ,path)))


(defun color-link-export (path description backend)
  "Export function for color links."
  (cond
   ((eq backend 'html)
    (let ((rgb (assoc (downcase path) color-name-rgb-alist))
	  r g b)
      (setq r (* 255 (/ (nth 1 rgb) 65535.0))
	    g (* 255 (/ (nth 2 rgb) 65535.0))
	    b (* 255 (/ (nth 3 rgb) 65535.0)))
      (format "<span style=\"color: rgb(%s,%s,%s)\">%s</span>"
	      (truncate r) (truncate g) (truncate b)
	      (or description path))))))

(org-link-set-parameters "color"
			 :face 'color-link-face
			 :complete 'color-comp
			 :export 'color-link-export)
#+END_SRC

#+RESULTS:
| :face | color-link-face | :complete | color-comp | :export | color-link-export |


* DONE A new take on altmetrics - the Altmetrics API
  CLOSED: [2016-08-13 Sat 10:16]
  :PROPERTIES:
  :ID:       0645FB39-C057-4ABC-B855-FFADF24E7EB9
  :categories: altmetrics
  :date:     2016/08/12 14:30:38
  :updated:  2016/08/13 14:46:26
  :END:
I [[http://kitchingroup.cheme.cmu.edu/blog/2015/08/08/Altmetrics-meet-my-publications/][previously]] wrote about altmetrics, and in that post showed how to embed an altmetric badge in html about a paper. Since then, I have learned about the [[http://api.altmetric.com][Altmetric API]] which allows you to gather the altmetric data into tabular form. You will need my [[https://github.com/jkitchin/scopus][scopus]] Python library, my [[https://github.com/jkitchin/pycse][pycse]] library, and to follow along with this, and the Python code in Section [[id:0645FB39-C057-4ABC-B855-FFADF24E7EB9][A new take on altmetrics]] to do this analysis yourself.

So, here, we get a list of my publications from Scopus (scopusid:7004212771), get the DOI and current citations for each of these that are categorized as "Journal", and then the altmetric data for each of those where there is altmetric data. The altmetric data is returned as json, which we can easily convert to a dictionary for easy analysis.

#+BEGIN_SRC python :results raw
from scopus.scopus_search import ScopusSearch
from scopus.scopus_api import ScopusAbstract
from altmetric import altmetric
import pycse.orgmode as org

s = ScopusSearch(query='au-id(7004212771)', fields='dc:identifier', refresh=True)

abstracts = [ScopusAbstract(eid) for eid in s.EIDS
             if ScopusAbstract(eid).aggregationType == 'Journal']

DOIs = [ab.doi for ab in abstracts]
cites = [ab.citedby_count for ab in abstracts]
dates = [ab.coverDate for ab in abstracts]

data = [altmetric('doi/' + doi) if doi is not None else None for doi in DOIs ]

results = sorted([[j.get('title', 'No title').replace('\n', ''),
                   '[[{}][doi]]'.format(j['url']),
                   '[[{}][details]]'.format(j['details_url']),
                   j.get('cited_by_tweeters_count', 0),
                   j.get('cited_by_fbwalls_count', 0),
                   int(j['readers'].get('mendeley', 0)),
                   j.get('cited_by_posts_count', 0),
                   cite, date]
                  for j, cite, date in zip(data, cites, dates) if j],
                 key=lambda x: x[3], reverse=True)

results = [['title', 'doi', 'details', 'tweets', 'facebook', 'Mendeley', 'blogs', 'cites', 'date'],
           ['<50>',  '',    '',         '',      '',         '',   '', ''],
           None] + results

org.table(results, caption='Altmetric data for my publications.', name='alt-met')
#+END_SRC

#+RESULTS:
#+CAPTION: Altmetric data for my publications.
#+TBLNAME: alt-met
| title                                              | doi | details | tweets | facebook | Mendeley | blogs | cites |       date |
| <50>                                               |     |         |        |          |          |       |       |            |
|----------------------------------------------------+-----+---------+--------+----------+----------+-------+-------+------------|
| Examples of Effective Data Sharing in Scientific Publishing | [[https://doi.org/10.1021/acscatal.5b00538][doi]] | [[http://www.altmetric.com/details.php?citation_id=3988563][details]] |     24 |        0 |       36 |    38 |     2 | 2015-06-05 |
| Towards Benchmarking in Catalysis Science:Best Practices, Opportunities, and Challenges | [[http://dx.doi.org/10.1021/acscatal.6b00183][doi]] | [[http://www.altmetric.com/details.php?citation_id=6142336][details]] |     15 |        0 |       56 |    18 |     2 | 2016-04-01 |
| Neural network and ReaxFF comparison for Au properties | [[http://dx.doi.org/10.1002/qua.25115][doi]] | [[http://www.altmetric.com/details.php?citation_id=6043176][details]] |      9 |        0 |        5 |    12 |     0 | 2016-01-01 |
| Estimating Bulk-Composition-Dependent H2 Adsorption Energies on CuxPd1–x Alloy (111) Surfaces | [[http://dx.doi.org/10.1021/cs501585k][doi]] | [[http://www.altmetric.com/details.php?citation_id=3014101][details]] |      4 |        1 |        9 |     8 |     5 | 2015-02-06 |
| Relationships between the surface electronic and chemical properties of doped 4d and 5d late transition metal dioxides | [[http://dx.doi.org/10.1063/1.4914093][doi]] | [[http://www.altmetric.com/details.php?citation_id=4384407][details]] |      2 |        0 |       17 |     2 |     2 | 2015-03-14 |
| The role of vdW interactions in coverage dependent adsorption energies of atomic adsorbates on Pt(111) and Pd(111) | [[http://dx.doi.org/10.1016/j.susc.2015.10.001][doi]] | [[http://www.altmetric.com/details.php?citation_id=4776685][details]] |      2 |        0 |        4 |     2 |     0 | 2016-08-01 |
| Comparative microfluidic screening of amino acid salt solutions for post-combustion CO2 capture | [[http://dx.doi.org/10.1016/j.ijggc.2015.10.026][doi]] | [[http://www.altmetric.com/details.php?citation_id=4776468][details]] |      2 |        0 |        4 |     2 |     0 | 2015-12-01 |
| Alkaline Electrolyte and Fe Impurity Effects on the Performance and Active-phase Structure of NiOOH Thin Films for OER Catalysis Applications | [[https://doi.org/10.1021/acs.jpcc.5b02458][doi]] | [[http://www.altmetric.com/details.php?citation_id=3978987][details]] |      2 |        0 |       17 |     2 |     6 | 2015-05-28 |
| Property Prediction of Crystalline Solids from Composition and Crystal Structure | [[https://doi.org/10.1002/aic.15251][doi]] | [[http://www.altmetric.com/details.php?citation_id=6609390][details]] |      1 |        0 |        4 |     1 |     0 | 2016-01-01 |
| Property Prediction of Crystalline Solids from Composition and Crystal Structure | [[https://doi.org/10.1002/aic.15251][doi]] | [[http://www.altmetric.com/details.php?citation_id=6609390][details]] |      1 |        0 |        4 |     1 |     0 | 2016-08-01 |
| High-throughput methods using composition and structure spread libraries | [[https://doi.org/10.1002/aic.15294][doi]] | [[http://www.altmetric.com/details.php?citation_id=7300151][details]] |      1 |        0 |        0 |     1 |     0 | 2016-01-01 |
| A Linear Response DFT+U Study of Trends in the Oxygen Evolution Activity of Transition Metal Rutile Dioxides | [[https://doi.org/10.1021/jp511426q][doi]] | [[http://www.altmetric.com/details.php?citation_id=3863449][details]] |      1 |        0 |       30 |     1 |     9 | 2015-01-01 |
| Electrocatalytic Oxygen Evolution with an Immobilized TAML Activator | [[https://doi.org/10.1021/ja5015986][doi]] | [[http://www.altmetric.com/details.php?citation_id=2268505][details]] |      1 |        0 |       40 |     1 |    10 | 2014-04-16 |
| The outlook for improved carbon capture technology | [[https://doi.org/10.1016/j.pecs.2012.03.003][doi]] | [[http://www.altmetric.com/details.php?citation_id=1215868][details]] |      1 |        0 |      183 |     1 |   150 | 2012-10-01 |
| The redox mediated separation of carbon dioxide from flue gas | [[https://doi.org/10.1021/acs.energyfuels.5b01807][doi]] | [[http://www.altmetric.com/details.php?citation_id=4584956][details]] |      1 |        0 |        4 |     1 |     0 | 2015-11-19 |
| Core level shifts in Cu–Pd alloys as a function of bulk composition and structure | [[https://doi.org/10.1016/j.susc.2015.02.011][doi]] | [[http://www.altmetric.com/details.php?citation_id=3884024][details]] |      1 |        0 |        6 |     1 |     0 | 2015-01-01 |
| Chemical and Molecular Descriptors for the Reactivity of Amines with CO              2 | [[https://doi.org/10.1021/ie301419q][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280138][details]] |      0 |        0 |        6 |     0 |    11 | 2012-10-24 |
| Simulating Temperature Programmed Desorption of Oxygen on Pt(111) Using DFT Derived Coverage Dependent Desorption Barriers | [[https://doi.org/10.1007/s11244-013-0166-3][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280822][details]] |      0 |        0 |       22 |     0 |     6 | 2014-02-01 |
| Comparisons of amine solvents for post-combustion CO2 capture: A multi-objective analysis approach | [[https://doi.org/10.1016/j.ijggc.2013.06.020][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280140][details]] |      0 |        0 |       30 |     0 |    10 | 2013-10-01 |
| Correlation of Electronic Structure with Catalytic Activity: H              2              –D              2              Exchange across Cu                              x                            Pd                              1–                x                            Composition Space | [[https://doi.org/10.1021/cs501586t][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280791][details]] |      0 |        0 |        3 |     0 |     0 | 2015-05-01 |
| Origin of the Overpotential for Oxygen Reduction at a Fuel-Cell Cathode | [[https://doi.org/10.1021/jp047349j][doi]] | [[http://www.altmetric.com/details.php?citation_id=661246][details]] |      0 |        0 |      743 |     1 |  1464 | 2004-11-18 |
| Interactions in 1-ethyl-3-methyl imidazolium tetracyanoborate ion pair: Spectroscopic and density functional study | [[https://doi.org/10.1016/j.molstruc.2013.01.046][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280139][details]] |      0 |        0 |       27 |     0 |    11 | 2013-04-24 |
| Separation of CO2 from flue gas using electrochemical cells | [[https://doi.org/10.1016/j.fuel.2009.11.036][doi]] | [[http://www.altmetric.com/details.php?citation_id=3135675][details]] |      0 |        0 |       17 |     1 |    26 | 2010-06-01 |
| Universality in Oxygen Evolution Electrocatalysis on Oxide Surfaces | [[https://doi.org/10.1002/cctc.201000397][doi]] | [[http://www.altmetric.com/details.php?citation_id=3705157][details]] |      0 |        0 |      359 |     5 |   373 | 2011-07-11 |
| Probing the effect of electron donation on CO2 absorbing 1,2,3-triazolide ionic liquids | [[https://doi.org/10.1039/c3ra47097k][doi]] | [[http://www.altmetric.com/details.php?citation_id=10280141][details]] |      0 |        0 |       13 |     0 |     7 | 2014-03-17 |



Obviously not all of my papers (67 now) have altmetric data, and most of the ones that do have very little altmetric data ;(. The Mendeley data is interesting, and this next analysis shows it is reasonably correlated with the number of citations, at least for the few highly cited papers I have. For my typical papers though, it is not clear the correlation is that high.

#+BEGIN_SRC python :results output org drawer :var data=alt-met
import matplotlib.pyplot as plt
import pycse.orgmode as org

mendeley = [x[5] for x in data[2:]]
cites = [x[7] for x in data[2:]]

plt.plot(mendeley, cites, 'bo')
plt.xlabel('Mendeley readers')
plt.ylabel('Citation count')
org.figure(plt.savefig('images/alt-metrics.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:images/alt-metrics.png]]
:END:

In summary, the Altmetric API gives you access to data, and (in conjunction with Scopus) an ability to systematically compare metrics and altmetrics across any set of documents you can create via queries.

** The altmetric Python code
   :PROPERTIES:
   :ID:       62451438-267E-4995-8EBA-39175979D987
   :END:

You may want to look at https://pypi.python.org/pypi/pyaltmetric and https://github.com/ropensci/rAltmetric for more advance Python code to work with the Altmetric API. This one has some features they do not, and was easy to write.

#+BEGIN_SRC python :tangle altmetric.py
import hashlib
import os
import json
import requests
import time

def altmetric(query, version='v1', refresh=False, throttle=1):
    """Return dictionary of altmetric data for query.
    query is a string like: doi/10.1007/s00799-016-0173-7

    Results are cached in ~/.altmetric_data, unless refresh is True.
    throttle is a delay in seconds to avoid too many requests too fast.

    see http://api.altmetric.com

    """
    m = hashlib.md5()

    url = 'http://api.altmetric.com/' + version + '/' + query
    m.update(url.encode('utf-8'))
    md5 = m.hexdigest()

    datafile = os.path.join('/Users/jkitchin/.altmetric_data', md5)

    if os.path.exists(datafile) and not refresh:
        with open(datafile) as f:
            results = json.loads(f.read())
    else:
        req = requests.get(url)
        if req.status_code != 404:
            results = req.json()
        else:
            results = {}
        with open(datafile, 'w') as f:
            f.write(json.dumps(results))
        if throttle:
            time.sleep(throttle)  # throttle how many requests we make.

    return results
#+END_SRC


* DONE Writing lisp code from Python
  CLOSED: [2016-05-30 Mon 09:26]
  :PROPERTIES:
  :categories: python,lisp
  :date:     2016/05/30 09:26:05
  :updated:  2016/05/30 12:38:20
  :END:

Some time ago I [[http://kitchingroup.cheme.cmu.edu/blog/2015/05/16/Python-data-structures-to-lisp/][wrote about converting python data structures to lisp]]. I have expanded on that idea to writing lisp programs from Python! The newly expanded code that makes this possible can be found at https://github.com/jkitchin/pycse/blob/master/pycse/lisp.py.

Here are the simple data types known to pycse.lisp:

#+BEGIN_SRC python :wrap EXAMPLE
import pycse.lisp
import numpy as np

print("a string".lisp)
a = 5
b = 5.0
print(a.lisp)
print(b.lisp)
print([1, 2, 3].lisp)
print((1, 2, 3).lisp)
print({'a': 4}.lisp)
print(np.array([1, 2, 3]).lisp)
print(np.array([1.0, 2.0, 3.0]).lisp)
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
"a string"
5
5.0
(1 2 3)
(1 2 3)
(:a 4)
(1 2 3)
(1.0 2.0 3.0)
#+END_EXAMPLE

There are also some more complex types.

#+BEGIN_SRC python :wrap EXAMPLE
import pycse.lisp as pl

print(pl.Symbol('lambda'))
print(pl.Quote('lambda'))
print(pl.SharpQuote('lambda'))
print(pl.Cons("a", 5))
print(pl.Alist(["a", 2, "b", 5]))
print(pl.Vector([1, 2, 3]))

print(pl.Backquote([]))
print(pl.Comma([1, 2, 3]))
print(pl.Splice([1, 2, 3]))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
lambda
'lambda
#'lambda
("a" . 5)
(("a" . 2) ("b" . 5))
[1 2 3]
`()
,(1 2 3)
,@(1 2 3)
#+END_EXAMPLE

You can nest these too.

#+BEGIN_SRC python :wrap EXAMPLE
import pycse.lisp as pl
print(pl.Quote(pl.Alist(["a", 2, "b", 5])))
print(pl.Backquote([pl.Symbol('+'), pl.Comma(pl.Symbol('b')), 5]))
#+END_SRC

#+RESULTS:
#+BEGIN_EXAMPLE
'(("a" . 2) ("b" . 5))
`(+ ,b 5)
#+END_EXAMPLE

All that means we can use Python /code/ to generate lisp programs. Here is an example where we make two sub-programs, and combine them into an overall program, then add one more subprogram to it. We wrap the results in an emacs-lisp block, then actually run the block!

#+BEGIN_SRC python :wrap SRC emacs-lisp
import pycse.lisp as pl

p1 = [pl.Symbol('mapcar'),
      [pl.Symbol('lambda'),
       [pl.Symbol('x')],
       [pl.Symbol('*'),
        pl.Symbol('x'),
        pl.Symbol('x')]],
      pl.Quote([1, 2, 3, 4])]

p2 = [pl.Symbol('princ'), "Hello world"]

p = [pl.Symbol('list'), p1, p2]
p.append([pl.Symbol('+'), 5, 5])

print(p.lisp)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(list (mapcar (lambda (x) (* x x)) '(1 2 3 4)) (princ "Hello world") (+ 5 5))
#+END_SRC

#+RESULTS:
| (1 4 9 16) | Hello world | 10 |

Wow, it worked! Here is another example of setting up a macro and then running it.
#+BEGIN_SRC python :wrap SRC emacs-lisp
import pycse.lisp as pl
s = pl.Symbol
bq = pl.Backquote
c = pl.Comma

p1 = [s('defmacro'), s('f'), [s('x')],
      "A docstring",
      bq([s('*'), c(s('x')), 5])]


p2 = [s('f'), 5]

print(p1.lisp)

print(p2.lisp)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(defmacro f (x) "A docstring" `(* ,x 5))
(f 5)
#+END_SRC

#+RESULTS:
: 25

I am not too sure where this will be super useful, but it is an interesting proof of concept. I haven't tested this much beyond the original post and this one. Let me know if you find issues with it.

* DONE Expanding orgmode.py to get better org-python integration
  CLOSED: [2016-05-29 Sun 15:51]
  :PROPERTIES:
  :categories: orgmode,python
  :date:     2016/05/29 14:03:34
  :updated:  2016/05/29 15:51:52
  :END:

I have only ever been about 80% satisfied with Python/org-mode integration. I have developed a particular workflow that I like a lot, and works well for solving scientific and engineering problems. I typically use stand-alone Python blocks, i.e. not sessions. I tend to use print statements to create output that I want to see, e.g. the value of a calculation. I also tend to create multiple figures in a single block, which I want to display in the buffer. This workflow is represented extensively in [[http://kitchingroup.cheme.cmu.edu/pycse/][PYCSE]] and [[https://github.com/jkitchin/dft-book][dft-book]] which collectively have 700+ src blocks! So I use it alot ;)

There are some deficiencies though. For one, I have had to hand build any figures/tables that are generated from the code blocks. That means duplicating filenames, adding the captions, etc... It is not that easy to update captions from the code blocks, and there has been limited ability to use markup in the output.

Well finally I had some ideas to change this. The ideas are:

1. Patch matplotlib so that savefig actually returns a figure link that can be printed to the output. savefig works the same otherwise.

2. Patch matplotlib.pyplot.show to save the figure, and print a figure link in thhe output.

3. Create special functions to generate org tables and figures.

4. Create some other functions to generate some blocks and elements.

Then we could just import the library in our Python scripts (or add it as a prologue) and get this nice functionality. You can find the code for this here:

https://github.com/jkitchin/pycse/blob/master/pycse/orgmode.py

Finally, it seems like a good idea to specify that we want our results to be an org drawer. This makes the figures/tables export, and allows us to generate math and other markup in our programs. That has the downside of making exported results not be in the "verbatim" markup I am used to, but that may be solvable in other ways. We can make the org drawer output the default like this:

#+BEGIN_SRC emacs-lisp
(setq org-babel-default-header-args:python
      (cons '(:results . "output org drawer replace")
	    (assq-delete-all :results org-babel-default-header-args)))
#+END_SRC

With these, using Python blocks in org-mode gets quite a bit better!

Here is the first example, with savefig. I have the savefig function return the link, so we have to print it. We use this feature later. The figure is automatically inserted to the buffer. Like magic!

Here is a fun figure from http://matplotlib.org/xkcd/examples/pie_and_polar_charts/polar_scatter_demo.html
#+BEGIN_SRC python :results org drawer
import pycse.orgmode

import numpy as np
import matplotlib.pyplot as plt
plt.xkcd()

N = 150
r = 2 * np.random.rand(N)
theta = 2 * np.pi * np.random.rand(N)
area = 200 * r**2 * np.random.rand(N)
colors = theta

ax = plt.subplot(111, polar=True)
c = plt.scatter(theta, r, c=colors, s=area, cmap=plt.cm.hsv)
c.set_alpha(0.75)

print(plt.savefig('test.png'))
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:test.png]]
:END:

How about another example with show. This just prints the link directly. It seems to make sense to do it that way. This is from http://matplotlib.org/xkcd/examples/showcase/xkcd.html.

#+BEGIN_SRC python
import pycse.orgmode as org

from matplotlib import pyplot as plt
import numpy as np

plt.xkcd()

fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
plt.xticks([])
plt.yticks([])
ax.set_ylim([-30, 10])

data = np.ones(100)
data[70:] -= np.arange(30)

plt.annotate(
    'THE DAY I REALIZED\nI COULD COOK BACON\nWHENEVER I WANTED',
    xy=(70, 1), arrowprops=dict(arrowstyle='->'), xytext=(15, -10))

plt.plot(data)

plt.xlabel('time')
plt.ylabel('my overall health')
plt.show()

# An intermediate result
print('Some intermediate result for x - 4 = 6:')
x = 6 + 4
org.fixed_width('x = {}'.format(x))

# And another figure
fig = plt.figure()
ax = fig.add_subplot(1, 1, 1)
ax.bar([-0.125, 1.0-0.125], [0, 100], 0.25)
ax.spines['right'].set_color('none')
ax.spines['top'].set_color('none')
ax.xaxis.set_ticks_position('bottom')
ax.set_xticks([0, 1])
ax.set_xlim([-0.5, 1.5])
ax.set_ylim([0, 110])
ax.set_xticklabels(['CONFIRMED BY\nEXPERIMENT', 'REFUTED BY\nEXPERIMENT'])
plt.yticks([])

plt.title("CLAIMS OF SUPERNATURAL POWERS")

plt.show()
#+END_SRC

#+RESULTS:
:RESULTS:
[[file:pyshow/56bc77cfebd90f8a1cb22421c1c4f2c4a05fedeb.png]]
Some intermediate result for x - 4 = 6:
: x = 10
[[file:pyshow/2daee706d3b906a25914a6ca975906047af7fa35.png]]
:END:

See, the figures show where they belong, with intermediate results that have some formatting, and they export correctly. Nice.


** A Figure from Python

It has been a long desire of mine to generate full figures with captions from code blocks, and to get them where I want like this one:

#+RESULTS: fig-1
:RESULTS:
#+CAPTION: An italicized /histogram/ of 10000 points
#+LABEL: fig:1
#+ATTR_LATEX: :width 3in
#+ATTR_HTML: :width 300
#+ATTR_ORG: :width 300
[[file:smarts.png]]
:END:

Here is the code to generate the full figure. Note we use the output of savefig as the filename. That lets us save some intermediate variable construction. That seems nice.

#+name: fig-1
#+BEGIN_SRC python
import pycse.orgmode as org
import matplotlib.pyplot as plt
plt.xkcd()

import numpy as np
import matplotlib.mlab as mlab
import matplotlib.pyplot as plt

# example data
mu = 100 # mean of distribution
sigma = 15 # standard deviation of distribution
x = mu + sigma * np.random.randn(10000)

num_bins = 50
# the histogram of the data
n, bins, patches = plt.hist(x, num_bins, normed=1, facecolor='green', alpha=0.5)
# add a 'best fit' line
y = mlab.normpdf(bins, mu, sigma)
plt.plot(bins, y, 'r--')
plt.xlabel('Smarts')
plt.ylabel('Probability')
plt.title(r'Histogram of IQ: $\mu=100$, $\sigma=15$')

# Tweak spacing to prevent clipping of ylabel
plt.subplots_adjust(left=0.15)

org.figure(plt.savefig('smarts.png'),
           label='fig:1',
           caption='An italicized /histogram/ of {} points'.format(len(x)),
           attributes=[('LATEX', ':width 3in'),
                       ('HTML', ':width 300'),
                       ('ORG', ':width 300')])
#+END_SRC

That is pretty awesome. You cannot put figures in more than one place like this, and you might not want to mix results with this, but it is still pretty awesome!

** An example table.
Finally, I have wanted the same thing for tables. Here is the resulting table.

#+RESULTS: table-1
:RESULTS:
#+TBLNAME: table-1
#+CAPTION: Dependence of the energy on the encut value.
|   <5> |        <11> |
| ENCUT | Energy (eV) |
|-------+-------------|
|   100 |         N/A |
|   200 |      21.233 |
|   300 |      31.233 |
|   400 |      41.233 |
|   500 |      51.233 |
:END:

Here is the code block that generated it.

#+name: table-1
#+BEGIN_SRC python :results org drawer
import pycse.orgmode as org

data = [['<5>', '<11>'],  # Column aligners
        ['ENCUT', 'Energy (eV)'],
        None]

for encut in [100, 200, 300, 400, 500]:
    data += [[encut, 1.233 + 0.1 * encut]]

org.table(data,
          name='table-1',
          caption='Dependence of the energy on the encut value.')

#+END_SRC


The only obvious improvement on this is similar to getting images to redisplay after running a code block, it might be nice to reformat tables to make sure they are pretty looking. Otherwise this is good.


Let's go ahead and try that. Here we narrow down to the results, and align the tables in that region.

#+BEGIN_SRC emacs-lisp
(defun org-align-visible-tables ()
  "Align all the tables in the results."
  (let ((location (org-babel-where-is-src-block-result)) start)
    (when location
      (setq start (- location 1))
      (save-excursion
	(save-restriction
	  (goto-char location) (forward-line 1)
	  (narrow-to-region start (org-babel-result-end))
	  (goto-char (point-min))
	  (while (re-search-forward org-table-any-line-regexp nil t)
	    (org-table-align)
	    (or (looking-at org-table-line-regexp)
		(forward-char 1)))
	  (re-search-forward org-table-any-border-regexp nil 1))))))

(add-hook 'org-babel-after-execute-hook
	  (lambda () (org-align-visible-tables)))
#+END_SRC
#+RESULTS:
| lambda | nil | (org-align-visible-tables) |
| lambda | nil | (org-refresh-images)       |

And that seems to solve that problem now too!

** Miscellaneous outputs
Here are some examples of getting org-output from the pycse.orgmode module.

#+BEGIN_SRC python
import pycse.orgmode as org

org.verbatim('One liner verbatim')

org.verbatim('''multiline
output
   with indentation
       at a few levels
that is verbatim.''')

org.fixed_width('your basic result')

org.fixed_width('''your
  basic
    result
on a few lines.''')

# A latex block
org.latex('\(e^{i\pi} - 1 = 0\)')

org.org(r'The equation is \(E = h \nu\).')

#+END_SRC
#+RESULTS:
:RESULTS:
=One liner=

#+BEGIN_EXAMPLE
multiline
output
   with indentation
       at a few levels
that is verbatim.
#+END_EXAMPLE

: your basic result
: your
:   basic
:     result
: on a few lines.

#+BEGIN_LATEX
\(e^{i\pi} - 1 = 0\)
#+END_LATEX

The equation is \(E = h \nu\).
:END:

** Summary
This looks promising to me. There are a few things to get used to, like always having org output, and some minor differences in making figures. On the whole this looks like a big improvement though! I look forward to working with it more.

* DONE When in python do as Pythonistas unless...
  CLOSED: [2016-05-06 Fri 19:46]
  :PROPERTIES:
  :categories: python
  :date:     2016/05/06 19:46:51
  :updated:  2016/05/06 19:46:51
  :END:

Many lisps have a when/unless conditional syntax that works like this:

#+BEGIN_SRC emacs-lisp :results output
(when t (print "when evaluated"))

(unless nil (print "unless evaluated"))
#+END_SRC

#+RESULTS:
:
: "when evaluated"
:
: "unless evaluated"

Those are actually just macros that expand to the more verbose if function:

#+BEGIN_SRC emacs-lisp :results code
(macroexpand '(unless nil (print "unless evaluated")))
#+END_SRC

#+RESULTS:
#+BEGIN_SRC emacs-lisp
(if nil nil
  (print "unless evaluated"))
#+END_SRC

In Python, we only have this syntax for this kind of construct:

#+BEGIN_SRC python
if True: print "when equivalent"

if not False: print "unless equivalent"
#+END_SRC

#+RESULTS:
: when equivalent
: unless equivalent

I thought is would be fun to get as close as possible to the lisp syntax in Python. It is not that easy though. The benefit of a macro is we do not evaluate the arguments until they need to be evaluated. In Python, all arguments of functions are immediately evaluated.

One way to avoid this is to put code inside a function. Then it will not be executed until the function is called. So, here is an example of how to get an unless function in Python that conditionally evaluates a function.

#+BEGIN_SRC python
def unless(condition, f):
    if not condition:
        return f()

def func():
    return "executed. Condition was not true."


print unless(1 > 0, func)

print unless(1 < 0, func)
#+END_SRC

#+RESULTS:
: None
: executed. Condition was not true.

That is close, but requires us to wrap our code in a function. There does not seem to be any alternative though. It thought maybe a context manager could be used, but there does not seem to be a way to bypass the execution of the code (https://www.python.org/dev/peps/pep-0377/). Still, it might be a useful way to change how to think about doing some things differently in Python.

* DONE Another approach to docstrings and validation of args and kwargs in Python
  CLOSED: [2016-04-30 Sat 10:28]
  :PROPERTIES:
  :categories: python
  :date:     2016/04/30 10:22:30
  :updated:  2016/04/30 10:28:51
  :END:

We have been [[http://kitchingroup.cheme.cmu.edu/blog/2016/04/29/Enough-with-the-hyperbole-hy-does-things-that-are-not-as-easy-in-Python/][exploring various ways]] to add documentation and validation to arbitrary arguments that our molecular simulation codes use. In our previous we derived a method where we created functions that provide docstrings, and validate the input. One issue we had was the duplication of keywords and function names. Here we consider an approach that allows this kind of syntax:

#+BEGIN_SRC python
calc = Calculator('/tmp',
                  encut(400),
                  xc('PBE'),
                  generic('kpts', [1, 1, 1]))
#+END_SRC

Those are regular *args, not **kwargs.

Compare this to:

#+BEGIN_SRC python
calc = Calculator('/tmp',
                  encut=encut(400),
                  xc=xc('PBE'),
                  kpts=generic('kpts', [1, 1, 1]))
#+END_SRC

where those are kwargs. The duplication of the keywords is what we aim to eliminate, because 1) they are redundant, 2) why type things twice?

Here we work out an approach with *args that avoids the duplication. We use the same kind of validation functions as before, but we will decorate each one so it returns a tuple of (key, value), where key is based on the function name. This is so we don't have to duplicate the function name ourselves; we let the decorator do it for us. Then, in our Calculator class __init__ function, we use this tuple to assign the values to self.key as the prototypical way to handle the *args. Other setter functions could also be used.

Here is the template for this approach.

#+BEGIN_SRC python
def input(func):
    """Input decorator to convert a validation function to input function."""
    def inner(*args, **kwargs):
        res = func.__name__, func(*args, **kwargs)
        print('{} validated to {}'.format(func.__name__, res))
        return res
    # magic incantations to make the decorated function look like the old one.
    inner.__name__ = func.__name__
    inner.__doc__ = func.__doc__
    return inner

@input
def encut(cutoff):
    "Planewave cutoff in eV."
    assert isinstance(cutoff, int) and (cutoff > 0)
    return cutoff

@input
def xc(s):
    """Exchange-correlation functional.

    Should be 'PBE' or 'LDA'

    """
    assert isinstance(s, str)
    assert s in ['PBE', 'LDA']
    return s

def generic(key, val):
    """Generic function with no validation.

    Use this for other key,val inputs not yet written.

    """
    return (key, val)

class Calculator(object):
    def __init__(self, wd, *args):
        """each arg should be of the form (attr, val)."""
        self.wd = wd
        self.args = args
        for attr, val in args:
            setattr(self, attr, val)

    def __str__(self):
        return '\n'.join(['{}'.format(x) for x in self.args])

##################################################################

calc = Calculator('/tmp',
                  encut(400),
                  xc('PBE'),
                  generic('kpts', [1, 1, 1]))

print(calc)

print(help(encut))
#+END_SRC

#+RESULTS:
#+begin_example
encut validated to ('encut', 400)
xc validated to ('xc', 'PBE')
('encut', 400)
('xc', 'PBE')
('kpts', [1, 1, 1])
Help on function encut in module __main__:

encut(*args, **kwargs)
    Planewave cutoff in eV.

None
#+end_example

This approach obviously works. I don't think I like the syntax as much, although in most python editors, it should directly give access to the docstrings of the functions. This is pretty explicit in what is happening, which is an advantage. Compare this to the following approach, which uses our traditional kwarg syntax, with dynamic, but hidden validation.

#+BEGIN_SRC python
def encut(cutoff):
    "Planewave cutoff in eV."
    assert isinstance(cutoff, int) and (cutoff > 0)
    return cutoff

def xc(s):
    """Exchange-correlation functional.

    Should be 'PBE' or 'LDA'.

    """
    assert isinstance(s, str), "xc should be a string"
    assert s in ['PBE', 'LDA'], "xc should be 'PBE' or 'LDA'"
    return s


class Calculator(object):
    def __init__(self, wd, **kwargs):
        """each arg should be of the form (attr, val)."""
        self.wd = wd

        for kwarg, val in kwargs.iteritems():
            f = globals().get(kwarg, None)
            if f is not None:
                print('{} evaluated to {}'.format(kwarg, f(val)))
            else:
                print('No validation for {}'.format(kwarg))

            setattr(self, kwarg, val)

##################################################################

calc = Calculator('/tmp',
                  encut=400,
                  xc='PBE',
                  kpts=[1, 1, 1])

print(calc.encut)
help(xc)
#+END_SRC
#+RESULTS:
#+begin_example
xc evaluated to PBE
No validation for kpts
encut evaluated to 400
400
Help on function xc in module __main__:

xc(s)
    Exchange-correlation functional.

    Should be 'PBE' or 'LDA'.

#+end_example

The benefit of this approach is no change in the syntax we are used to. We still get access to docstrings via tools like pydoc. It should not be too hard to get helpful tooltips in Emacs for this, using pydoc to access the docstrings. This might be the winner.

It is up for debate if we should use assert or Exceptions. If anyone uses python with -O the assert statements are ignored. That might not be desirable though. Maybe it would be better to use Exceptions, with a user customizable variable that determines if validation is performed.

* DONE Automatic decorating of class methods to run them in a context
  CLOSED: [2016-05-01 Sun 09:16]
  :PROPERTIES:
  :categories: python
  :date:     2016/05/01 09:16:29
  :updated:  2016/05/01 09:16:29
  :END:

We [[http://kitchingroup.cheme.cmu.edu/blog/2016/04/28/Managing-contexts-Python-vs-hy/][previously examined]] approaches to running code in a context. With hy, we even managed to remove the need for a with statement through the use of a macro that expanded behind the scenes to manage the context. In our jasp code, we frequently need a context manager that temporarily changes the working directory to run some code, then changes back. The use of the context manager was a design decision to avoid decorating every single function. Why? There are a lot of functions that need decorating, and they are spread over a lot of files. Not all of the entries from the next block are methods, but most of them are.

#+BEGIN_SRC python
from jasp import *

c = Vasp()
print(dir(c))
#+END_SRC

#+RESULTS:
: ['__doc__', '__init__', '__module__', '__repr__', '__str__', 'add_to_db', 'archive', 'atoms', 'bader', 'bool_params', 'calculate', 'calculation_required', 'check_state', 'chgsum', 'clean', 'clone', 'create_metadata', 'dict', 'dict_params', 'exp_params', 'float_params', 'get_atoms', 'get_beefens', 'get_bz_k_points', 'get_charge_density', 'get_default_number_of_electrons', 'get_dipole_moment', 'get_eigenvalues', 'get_elapsed_time', 'get_electronic_temperature', 'get_elf', 'get_energy_components', 'get_fermi_level', 'get_forces', 'get_ibz_k_points', 'get_ibz_kpoints', 'get_infrared_intensities', 'get_k_point_weights', 'get_local_potential', 'get_magnetic_moment', 'get_magnetic_moments', 'get_name', 'get_nearest_neighbor_table', 'get_neb', 'get_nonselfconsistent_energies', 'get_number_of_bands', 'get_number_of_electrons', 'get_number_of_grid_points', 'get_number_of_ionic_steps', 'get_number_of_iterations', 'get_number_of_spins', 'get_occupation_numbers', 'get_orbital_occupations', 'get_potential_energy', 'get_property', 'get_pseudo_density', 'get_pseudo_wavefunction', 'get_pseudopotentials', 'get_required_memory', 'get_spin_polarized', 'get_stress', 'get_valence_electrons', 'get_version', 'get_vibrational_frequencies', 'get_vibrational_modes', 'get_xc_functional', 'initialize', 'input_params', 'int_params', 'is_neb', 'job_in_queue', 'json', 'list_params', 'name', 'nbands', 'org', 'output_template', 'plot_neb', 'positions', 'post_run_hooks', 'prepare_input_files', 'pretty_json', 'python', 'read', 'read_convergence', 'read_default_number_of_electrons', 'read_dipole', 'read_eigenvalues', 'read_electronic_temperature', 'read_energy', 'read_fermi', 'read_forces', 'read_ibz_kpoints', 'read_incar', 'read_k_point_weights', 'read_kpoints', 'read_ldau', 'read_magnetic_moment', 'read_magnetic_moments', 'read_metadata', 'read_nbands', 'read_number_of_electrons', 'read_number_of_iterations', 'read_occupation_numbers', 'read_outcar', 'read_potcar', 'read_relaxed', 'read_stress', 'read_version', 'read_vib_freq', 'register_post_run_hook', 'register_pre_run_hook', 'restart', 'restart_load', 'results', 'run', 'run_counts', 'set', 'set_atoms', 'set_nbands', 'set_results', 'special_params', 'string_params', 'strip', 'strip_warnings', 'todict', 'track_output', 'update', 'write_incar', 'write_kpoints', 'write_metadata', 'write_potcar', 'write_sort_file', 'xml']

The use of a context manager is really useful for a single calculation, and it saves us a lot of boilerplate code to manage changing directories. It limits us though for looping through calculations. We are stuck with traditional for loops that have the with statement embedded in them. We also cannot get too functional, e.g. with list comprehension.

In other words, this is ok:

#+BEGIN_SRC python
E = []
for d in np.linspace(1, 1.5):
    atoms = Atoms(...,d)
    with jasp('calculated-name-{}'.format(d),
              ...,
              atoms=atoms) as calc:
        E.append(atoms.get_potential_energy())

#+END_SRC

But this code is not possible:

#+BEGIN_SRC python
bond_lengths = np.linspace(1, 1.5)

A = [Atoms(...,d) for d in bond_lengths]

calcs = [JASP('calculated-name-{}'.format(d),...,atoms=atoms)
         for d, atoms in zip(bond-lengths, A)]

E = [atoms.get_potential_energy() for atoms in A]
#+END_SRC

It is not legal syntax to embed a with statement inside a list comprehension. The code will not work because to get the potential energy we have to switch into the calculation directory and read it from a file there, then switch back.

To make that possible, we need to decorate the class functions so that the right thing happens when needed. I still do not want to decorate each function manually. Although there is a case to make for it, as I mentioned earlier, the functions are all over the place, and numerous. Now is not the time to fix it.

Instead, we consider a solution that will automatically decorate class functions for us! Enter the Metaclass. This is a class that modifies how classes are created. The net effect of the code below is our Calculator class now has all functions automatically decorated with a function that changes to the working directory, runs the function, and then ensures we change back even in the event of an exception. This approach is adapted from http://stackoverflow.com/questions/3467526/attaching-a-decorator-to-all-functions-within-a-class.

I am pretty sure this is the right way to do this. We cannot simply decorate the functions of ase.calculators.vasp.Vasp because our decorator needs access to the directory defined in a /class instance/. That is what the __init__ method of the metaclass enables.

We will put this code into a library called meta_calculator.py for reuse in later examples.

#+BEGIN_SRC python :tangle meta_calculator.py
import os
import types

class WithCurrentDirectory(type):
   """Metaclass that decorates all of its methods except __init__."""
   def __new__(cls, name, bases, attrs):
      return super(WithCurrentDirectory, cls).__new__(cls, name, bases, attrs)

   def __init__(cls, name, bases, attrs):
      """Decorate all the methods of the class instance with the classmethod cd.

      We skip __init__ because that is where the attributes are actually set.
      It is an error to access them before they are set.
      """
      for attr_name, attr_value in attrs.iteritems():
         if attr_name != '__init__' and isinstance(attr_value, types.FunctionType):
            setattr(cls, attr_name, cls.cd(attr_value))


   @classmethod
   def cd(cls, func):
      """Decorator to temporarily run cls.func in the directory stored in cls.wd.

      The working directory is restored to the original directory afterwards.
      """
      def wrapper(self, *args, **kwargs):
         if self.verbose:
            print('\nRunning {}'.format(func.__name__))
            print("Started in {}".format(os.getcwd()))
         os.chdir(self.wd)
         if self.verbose:
            print("  Entered {}".format(os.getcwd()))
         try:
            result = func(self, *args, **kwargs)
            if self.verbose:
               print('  {}'.format(result))
            return result
         except Exception, e:
            # this is where you would use an exception handling function
            print('  Caught {}'.format(e))
            pass
         finally:
            os.chdir(self.owd)
            if self.verbose:
               print("  Exited to {}\n".format(os.getcwd()))

      wrapper.__name__ = func.__name__
      wrapper.__doc__ = func.__doc__
      return wrapper


class Calculator(object):
   """Class we use for a calculator.

   Every method is decorated by the metaclass so it runs in the working
   directory defined by the class instance.

   """

   __metaclass__ = WithCurrentDirectory

   def __init__(self, wd, verbose=False):
      self.owd = os.getcwd()
      self.wd = wd
      self.verbose = verbose
      if not os.path.isdir(wd):
         os.makedirs(wd)


   def create_input(self, **kwargs):
      with open('INCAR', 'w') as f:
         for key, val in kwargs.iteritems():
            f.write('{} = {}\n'.format(key, val))


   def exc(self):
      "This raises an exception to see what happens"
      1 / 0

   def read_input(self):
      with open('INCAR', 'r') as f:
         return f.read()

   def __str__(self):
      return 'In {}. Contains: {}'.format(os.getcwd(),
                                          os.listdir('.'))
#+END_SRC

#+RESULTS:

Here is how we might use it.

#+BEGIN_SRC python
from meta_calculator import *

c = Calculator('/tmp/calc-1', verbose=True)
print c.create_input(xc='PBE', encut=450)
print c.read_input()
print c.exc()
print c
#+END_SRC
#+RESULTS:
#+begin_example

Running create_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  None
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running read_input
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  xc = PBE
encut = 450

  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

xc = PBE
encut = 450


Running exc
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  Caught integer division or modulo by zero
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

None

Running __str__
Started in /Users/jkitchin/blogofile-jkitchin.github.com/_blog
  Entered /private/tmp/calc-1
  In /private/tmp/calc-1. Contains: ['INCAR']
  Exited to /Users/jkitchin/blogofile-jkitchin.github.com/_blog

In /private/tmp/calc-1. Contains: ['INCAR']
#+end_example

As we can see, in each function call, we evidently do change into the path that /tmp/calc-1 points to (it is apparently /private/tmp on Mac OSX), runs the method, and then changes back out, even when exceptions occur.

Here is a functional approach to using our new calculator.
#+BEGIN_SRC python
from meta_calculator import *

encuts = [100, 200, 300, 400]
calcs = [Calculator('encut-{}'.format(encut)) for encut in encuts]

# list-comprehension for the side-effect
[calc.create_input(encut=encut) for calc,encut in zip(calcs, encuts)]

inputs = [calc.read_input() for calc in calcs]

print(inputs)
print([calc.wd for calc in calcs])
#+END_SRC
#+RESULTS:
: ['encut = 100\n', 'encut = 200\n', 'encut = 300\n', 'encut = 400\n']
: ['encut-100', 'encut-200', 'encut-300', 'encut-400']

Sweet. And here is our evidence that the directories got created and have the files in them.

#+BEGIN_SRC sh
find . -type f -print | grep "encut-[1-4]00" | xargs -n 1 -I {} -i bash -c 'echo {}; cat {}; echo'
#+END_SRC
#+RESULTS:
#+begin_example
./encut-100/INCAR
encut = 100

./encut-200/INCAR
encut = 200

./encut-300/INCAR
encut = 300

./encut-400/INCAR
encut = 400

#+end_example

This looks like another winner that will be making its way into [[https://github.com/jkitchin/jasp][jasp]] soon. I guess it will require at least some minor surgery on a class in ase.calculators.vasp. It might be time to move a copy of it all the way into jasp.

* DONE More on Hy and why I think it is a big deal
  CLOSED: [2016-03-31 Thu 13:41]
  :PROPERTIES:
  :categories: python,emacs,hylang
  :date:     2016/03/31 13:41:43
  :updated:  2016/04/01 13:58:26
  :END:
[[http://kitchingroup.cheme.cmu.edu/blog/2016/03/30/OMG-A-Lisp-that-runs-python/][Yesterday]] I talked about [[https://github.com/hylang/hy][hylang]], a Lisp that basically compiles to and runs Python code. Today, I want to show a few reasons why this is a great idea, and an important one. Below I give a few examples of why the hylang approach is better (in my opinion of course) than Python with a few examples of things I have always wanted in Python but couldn't get.

** Editing with hy-mode and lispy
There is a major mode for Hy: https://github.com/hylang/hy-mode also on MELPA. It gives us some syntax highlighting and better access to a REPL.

Let's load lispy (https://github.com/abo-abo/lispy) for it so we also get amazing editing. I always wanted to use lispy style navigation and editing in Python, but the whitespace and indentation did not make it that easy. Problem solved with these. @abo-abo already added basic eval support for Hy to lispy since the post yesterday (https://github.com/abo-abo/lispy/commit/f7f71e38e241d92b6add05be6628ac987067b11c); Thanks!

#+BEGIN_SRC emacs-lisp :results silent
(add-hook 'hy-mode-hook
	  (lambda ()
	    (lispy-mode 1)))
#+END_SRC

** Python with no whitespace, or commas in lists
You can still use indentation (it is good style), but this works!
#+BEGIN_SRC hy
(for [x [0 1 2 3 4 5]]
(if (> x 3) (print "too big")
(print x)))
#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 3
: too big
: too big

This looks nicer.
#+BEGIN_SRC hy
(for [x [0 1 2 3 4 5]]
  (if (> x 3)
    (print "too big")
    (print x)))
#+END_SRC

#+RESULTS:
: 0
: 1
: 2
: 3
: too big
: too big

This is a big deal too. Using Python in sessions in org-mode has always been a little complicated by the indentation and whitespace, especially with nested loops and functions. That problem is probably gone.

** No confusion in expressions in statements
In Python you can do this:
#+BEGIN_SRC python
a = 5
print(a)
print(a + 5)
#+END_SRC

#+RESULTS:
: 5
: 10

But not this:
#+BEGIN_SRC python
print(a=5)
print(a + 5)
#+END_SRC

#+RESULTS:
:   File "<stdin>", line 1
:    print(a=5)
:           ^
: SyntaxError: invalid syntax

You can't put assignment statements and expression statements anywhere you want, they are only legal syntax in some places. For example, a=5 above actually looks like the print function has an argument of a that set to 5. Not true in Lisp; there are only expressions! So this works fine.

#+BEGIN_SRC hy
(print (setv a 5))
(print (+ a 5))
#+END_SRC

#+RESULTS:
: 5
: 10

I just like this style of simple syntax.

** Proper multiline lambda functions
Python syntax fundamentally limits you to one line lambdas. Not so for Hy. Let's use one in a filter to print even numbers. Here is an example with a two-liner but you could make them more complicated. In Python, you have to make a separate function for this. That isn't terrible, but if it is never used for anything else, it could be avoided.

#+name: lambda
#+BEGIN_SRC hy
(setv a [0 1 2 3 4 5 6 7 8])

(defn display [list filter]
  (for [x list] (if (filter x) (print x))))

(display a (lambda [x]
             (= (% x 2) 0)))
#+END_SRC

#+RESULTS:
: 0
: 2
: 4
: 6
: 8

** Macros and Extensible syntax
It is not easy to get real macro (code expansion) behavior in Python. Yes, there are decorators, and closures, and related things that get close to it. But there are not lisp-like macros.

Here is a (too) simple macro to allow for infix notation. It only works for two arguments, but could be extended for multiple arguments.
#+BEGIN_SRC hy
(defmacro infix [code]
  (quasiquote ((unquote (get code 1))
               (unquote (get code 0))
               (unquote (get code 2)))))

(print (infix (1 + 1)))
#+END_SRC
#+RESULTS:
: 2

If we want new syntax we can get it!
#+BEGIN_SRC hy
(defreader $ [code]
  (quasiquote
   ((unquote (get code 1))
    (unquote (get code 0))
    (unquote (get code 2)))))

(print #$(1 + 1))
#+END_SRC

#+RESULTS:
: 2

Why is this nice? Here is a math example that shows why you might want to change syntax.

*** Some math
See http://kitchingroup.cheme.cmu.edu/blog/2013/02/07/Solving-Bessel-s-Equation-numerically/ for the Python version of solving the Bessel equation numerically. Here we do it with hylang.

Why would we want infix notation? Here is a good reason. The prefix notation is not easy to read. Compare:

#+BEGIN_SRC python
dzdx = 1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)
#+END_SRC

to

#+BEGIN_SRC hy
(setv dzdx (* (/ 1.0 (** x 2)) (- (* (* -1 x) z) (* (- (** x 2) (** nu 2)) y))))
#+END_SRC

The infix notation is simpler to read. Still, the code below is not that hard to figure out, especially if there was a generalized infix notation that allowed (with parens for explicit operation precedence):

#+BEGIN_SRC hy
(setv dzdx (nfx (1.0 / x**2) * ((-x * z) - ((x**2 - nu**2) * y))))
#+END_SRC

So, here is the hylang equivalent to my previous Python version.

#+BEGIN_SRC hy
(import [numpy :as np])
(import [scipy.integrate [odeint]])
(import [scipy.special [jn]])
(import [matplotlib.pyplot :as plt])

(defn fbessel [Y x]
  "System of 1st order ODEs for the Bessel equation."
  (setv nu 0.0
        y (get Y 0)
        z (get Y 1))

  ;; define the derivatives
  (setv dydx z
        dzdx (* (/ 1.0 (** x 2)) (- (* (* -1 x) z) (* (- (** x 2) (** nu 2)) y))))
  ;; return derivatives
  [dydx dzdx])

(setv x0 1e-15
      y0 1.0
      z0 0.0
      Y0 [y0 z0])

(setv xspan (np.linspace 1e-15 10)
      sol (odeint fbessel Y0 xspan))

(plt.plot xspan (. sol [[Ellipsis 0]]) :label "Numerical solution")
(plt.plot xspan (jn 0 xspan) "r--" :label "Analytical solution")
(plt.legend :loc "best")

(plt.savefig "hy-ode.png")
#+END_SRC

#+RESULTS:
: 2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
: 2016-04-01 13:48:17.499 Python[12151:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.
: None

[[./hy-ode.png]]

This looks really good to me, except for that prefix math. The array slice syntax is interesting. Not that obvious yet.

** Interoperability with Python
http://docs.hylang.org/en/latest/tutorial.html#hy-python-interop

Write Hy code and use it in Python. Use Python code in Hy. Repeat. Sweet.

** Integration of emacs and Hy

This isn't so beautiful but it illustrates  a pretty awesome integration of Hy(python) into Emacs!

#+BEGIN_SRC emacs-lisp
(defmacro hy (body)
  `(let* ((temporary-file-directory ".")
	  (tempfile (make-temp-file "hy-")))
     (message (format "code: %S" ,body))
     (with-temp-file tempfile
       (mapc (lambda (form) (insert (format "%s" form))) ,body))
     (read (unwind-protect
	       (shell-command-to-string
		(format "hy %s" tempfile))
	     (delete-file tempfile)))))

(aref (hy '((import numpy)
	    (setv a (numpy.array [1 2 3]))
	    (setv b (numpy.array [1 2 3]))
	    (print (* a b))))
      1)
#+END_SRC

#+RESULTS:
: 4

This isn't perfect, and there are many ways it could break down. But if you are careful to make the output "read"able, you can literally embed Hy code in Emacs lisp and use the results, a total win for Science! I feel like it might need something like progn, but that would not change what this does dramatically.

** Hypster and Hy Society.
http://notes.pault.ag/hy-survival-guide/  ROTFL. *ironically* of course ;)

And the [[https://twitter.com/hylang][@hylang]] Twitter account is run by Hy Society. Nice.

** What do we still need?

1. Experience. Hy seems relatively young compared to other Lisps. It isn't clear yet if this could work like Python does at scale in research. I sure look forward to finding out though!
2. Proper infix notation for engineering math. I could live with no operator precedence if it led to a quicker solution for now. As long as something like (1.0 / x**2 * (-x * z - (x**2 - nu**2) * y)) is legal!
3. A proper integration with org-mode and the REPL.
4. Toolchains like emacs-lisp has. I just love those. Killer debugging, access to hyperlinked documentation, code navigation, ... Maybe integration with something like SLIME or CIDER? Hyder?
5. Use it in a proper big project to find out where the limitations are, maybe Hycse as a companion to Pycse (http://kitchingroup.cheme.cmu.edu/pycse/)? or a rewrite of http://kitchingroup.cheme.cmu.edu/dft-book/ in Hy?

Overall, I am pretty excited about this project. The syntax is a bit reminiscent of Clojure, and Racket, the former by design. Lots of new ideas still seem to be percolating in, so there is likely good stuff to see in the future!

I haven't used it enough to see the warts yet, but already the top issues I had with Python are largely addressed, so I see this as a way to continue progress with all the benefits of Python.

#+BEGIN_HTML
<img src="https://imgs.xkcd.com/comics/lisp_cycles.png">
#+END_HTML
* DONE OMG A Lisp that runs python
  CLOSED: [2016-03-30 Wed 17:10]
  :PROPERTIES:
  :categories: python,lisp
  :date:     2016/03/30 17:10:17
  :updated:  2016/03/31 13:54:47
  :END:

For a year now I have struggled with abandoning Python for Lisp. It's complicated, I have used Python for 15 years now, and have a lot of skill and knowledge in it. I have used emacs-lisp for about 5 years now, and have a far bit of skill with it too. They solve really different problems. Between the two, I find I /like/ writing and editing elisp *lots* better than writing Python, except it lacks the scipy+numpy+matplotlib stack. I looked into Racket and Common Lisp, but they also don't really have that as nicely as Python does at the moment. It hit me earlier today that a Lisp that compiled to Python might be the right middle ground. I had seen this project Hy (http://docs.hylang.org/en/latest/quickstart.html) earlier, but didn't connect the dots to this.

Let me do that here. First, an obligatory execute function to run org-mode code blocks.

#+BEGIN_SRC emacs-lisp
(defun org-babel-execute:hy (body params)
  (let* ((temporary-file-directory ".")
	 (tempfile (make-temp-file "hy-")))
    (with-temp-file tempfile
      (insert body))
    (unwind-protect
	(shell-command-to-string
	 (format "hy %s" tempfile))
      (delete-file tempfile))))
#+END_SRC

#+RESULTS:
: org-babel-execute:hy

Now the basic Hello world example. It looks like lisp.
#+BEGIN_SRC hy
(print "Hy world")
#+END_SRC

#+RESULTS:
: Hy world

Now for a use that looks like Python:

#+BEGIN_SRC hy
(import numpy)
(setv a (numpy.array [1 2 3]))
(setv b (numpy.array [1 2 3]))
(print (numpy.dot a b))
#+END_SRC

#+RESULTS:
: 14

WHAT!!!!

A simple plot? Surely it can't be so easy...
#+BEGIN_SRC hy
(import [matplotlib.pyplot :as plt])
(plt.plot [1 2 4 8])
(plt.xlabel "x")
(plt.ylabel "y")
(plt.savefig "hy-test.png")
#+END_SRC

#+RESULTS:
: 2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Client called CTFontCreateWithName() using name "Lucida Grande" and got font with PostScript name "LucidaGrande". For best performance, only use PostScript names when calling this API.
: 2016-03-30 17:09:40.826 Python[94292:d13] CoreText performance note: Set a breakpoint on CTFontLogSuboptimalRequest to debug.

[[./hy-test.png]]

Wow. I am not sure what the warnings are, I seem to get them on my Mac for some reason. How about solving an equation?

#+BEGIN_SRC hy
(import [scipy.optimize [fsolve]])
(defn objective [x] (- 2 x))
(print (fsolve objective -1))
#+END_SRC

#+RESULTS:
: [ 2.]


#+BEGIN_EXAMPLE
     _.-^^---....,,--
 _--                  --_
<                        >)
|                         |
 \._                   _./
    ```--. . , ; .--'''
          | |   |
       .-=||  | |=-.
       `-=#$%&%$#=-'
          | ;  :|
 _____.,-#%&$@%#&#~,._____
       _---~~(~~-_.
     _{        )   )
   ,   ) -~~- ( ,-' )_
  (  `-,_..`., )-- '_,)
 ( ` _)  (  -~( -_ `,  }
 (_-  _  ~_-~~~~`,  ,' )  <---- My brain right now...
   `~ -^(    __;-,((()))
         ~~~~ {_ -_(())
                `\  }
                  { }
#+END_EXAMPLE

I may not be able to sleep tonight...

Ascii art courtesy of http://chris.com/ascii/index.php?art=people/body%20parts/brains and http://www.ascii-code.com/ascii-art/weapons/explosives.php.
* DONE Jump to a tagged src block
  CLOSED: [2016-03-30 Wed 14:26]
  :PROPERTIES:
  :categories: emacs,orgmode
  :date:     2016/03/30 14:26:35
  :updated:  2016/03/30 14:26:35
  :END:
If you have a lot of src-blocks in your org-file, it might be nice to "tag" them and be able to jump around between them using tag expressions, or by the name of the block, language etc... Here we develop a way to do that and create a handy function to jump to blocks in the current buffer.

First, we look at how to "tag" a src-block. One way is to use a header like this:

#+BEGIN_EXAMPLE
#+header: :tags cool idiom two
#+END_EXAMPLE

These are not tags in the usual org-mode sense, they are just a space separated list of words we will later treat as tags. We can get the tags on a src-block with this function.

#+header: :tags cool idiom two
#+BEGIN_SRC emacs-lisp
(defun src-block-tags (src-block)
  "Return tags for SRC-BLOCK (an org element)."
  (let* ((headers (-flatten
		   (mapcar 'org-babel-parse-header-arguments
			   (org-element-property :header src-block))))
	 (tags (cdr (assoc :tags headers))))
    (when tags
      (split-string tags))))
#+END_SRC

#+RESULTS:
: src-block-tags

Now, we make a src-block with the tags "test" "one" and "idiom", and see how to tell if the block matches the tag expression "test+idiom".

#+header: :tags test one idiom
#+name: tag-matcher
#+BEGIN_SRC emacs-lisp
(let* ((lexical-binding nil)
       (todo-only nil)
       (tags-list (src-block-tags (org-element-context)))
       (tag-expression "test+idiom"))
  (eval (cdr (org-make-tags-matcher tag-expression))))

#+END_SRC
#+RESULTS: tag-matcher
: t

It does, so we wrap that up into a function that tells us if a src-block matches some tag expression.

#+header: :tags one
#+BEGIN_SRC emacs-lisp
(defun src-block-match-tag-expression-p (src-block tag-expression)
  "Determine if SRC-BLOCK matches TAG-EXPRESSION."
  (let* ((lexical-binding nil)
	 (todo-only nil)
	 (tags-list (src-block-tags src-block)))
    (eval (cdr (org-make-tags-matcher tag-expression)))))
#+END_SRC
#+RESULTS:
: src-block-match-tag-expression-p

Here we test that on a block tagged "one three" on the expression "one-two" which means tagged one and not two.
#+header: :tags one three
#+BEGIN_SRC emacs-lisp
(src-block-match-tag-expression-p (org-element-context) "one-two")
#+END_SRC
#+RESULTS:
: t

Those are the main pieces we need to jump around. We just need a selection tool with a list of filtered candidates. We get a list of src-block candidates to choose from in the next block as an example. Here we get blocks tagged one but not two. We can incorporate this into a selection backend like helm or ivy.

#+BEGIN_SRC emacs-lisp :results code
(org-element-map (org-element-parse-buffer) 'src-block
  (lambda (src-block)
    (when (src-block-match-tag-expression-p src-block "one-two")
      ;; Get a string and marker
      (cons
       (format "%15s|%15s|%s"
	       (org-element-property :name src-block)
	       (org-element-property :language src-block)
	       (org-element-property :header src-block))
       (org-element-property :begin src-block)))))
#+END_SRC
#+RESULTS:

#+BEGIN_SRC emacs-lisp
(("    tag-matcher|     emacs-lisp|(:tags test one idiom)" . 1222)
 ("            nil|     emacs-lisp|(:tags one)" . 1641)
 ("            nil|     emacs-lisp|(:tags one three)" . 2120))
#+END_SRC

Now let us put that into ivy. We will ask for an expression to filter the blocks on, and then use ivy to narrow what is left, and the only action is to jump to the position of the selected block. You can start with a tag expression, or press enter to get all the tags. Then you can use ivy to further narrow by language, block name, or other tags.

#+header: :tags three
#+BEGIN_SRC emacs-lisp
(defun ivy-jump-to-src (tag-expression)
  (interactive "sTag expression: ")
  (ivy-read "Select: "
	    (org-element-map (org-element-parse-buffer) 'src-block
	      (lambda (src-block)
		(when (src-block-match-tag-expression-p src-block tag-expression)
		  ;; Get a string and marker
		  (cons
		   (format "%15s|%15s|%s"
			   (org-element-property :name src-block)
			   (org-element-property :language src-block)
			   (org-element-property :header src-block))
		   (org-element-property :begin src-block)))))
	    :require-match t
	    :action '(1
		      ("j" (lambda (pos) (interactive) (goto-char pos))))))
#+END_SRC

#+RESULTS:
: ivy-jump-to-src

For fun, here is a python block just for testing.
#+BEGIN_SRC python
print(42)
#+END_SRC

#+RESULTS:
: 42

That is it! It seems to work ok. There are some variations that might be preferrable, like putting the tags in as params in the src-block header to avoid needing a separate header line. It isn't clear how much I would use this, and it is slow if you have /a lot/ of src blocks in a /large/org-file because of the parsing. (how large? I noticed a notable lag on my 22,800 line org-file this is in ;).

* DONE Another approach to embedded molecular data in org-mode
  CLOSED: [2016-03-28 Mon 11:25]
  :PROPERTIES:
  :categories: orgmode,emacs,chemistry
  :date:     2016/03/28 11:25:16
  :updated:  2016/03/28 11:28:27
  :END:
#+HTML_HEAD_EXTRA:  <style>.molecule {background-color:LightSkyBlue;}</style>
#+BEGIN_HTML
<style>.molecule {background-color:LightSkyBlue;}</style>
#+END_HTML
In the [[http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/][last post]] we examined a molecule link to a src-block defining a molecule in some format. We blurred the distinction between program and data there. Here we re-separate them to try out some different ideas. We will use an [[http://orgmode.org/manual/Special-blocks.html][org-mode special block]] to contain the "data" which is a molecular representation in some format. Then, we will use open-babel to convert the format to various other formats to explore using the data.

Here is a methane molecule (with 4 implicit hydrogens in the SMILES format). We put it in a named special block in org-mode, and even put a header on it to indicate the format and a display name!

#+CAPTION: A special MOLECULE block containing Methane in SMILES format.
#+header: :display-name methane
#+header: :format smiles
#+name: methane-smiles
#+BEGIN_MOLECULE
C
#+END_MOLECULE

We can use the SMILES representation block as input to a new command that converts it to the CML format, with coordinates. We use a simple shell command here and pass the contents of the molecule in as a variable. That is nice because in SMILES methane is represented by a single "C", and this CML is /much/ more verbose.

#+name: methane-cml
#+BEGIN_SRC sh :var input=methane-smiles
echo $input | obabel -ismi -o cml --gen3d
#+END_SRC

#+RESULTS: methane-cml
#+begin_example
<?xml version="1.0"?>
<molecule xmlns="http://www.xml-cml.org/schema">
 <atomArray>
  <atom id="a1" elementType="C" x3="1.047517" y3="-0.064442" z3="0.060284"/>
  <atom id="a2" elementType="H" x3="2.139937" y3="-0.064341" z3="0.059898"/>
  <atom id="a3" elementType="H" x3="0.683568" y3="-0.799429" z3="-0.661322"/>
  <atom id="a4" elementType="H" x3="0.683566" y3="0.927794" z3="-0.216100"/>
  <atom id="a5" elementType="H" x3="0.683669" y3="-0.321317" z3="1.056822"/>
 </atomArray>
 <bondArray>
  <bond atomRefs2="a1 a2" order="1"/>
  <bond atomRefs2="a1 a3" order="1"/>
  <bond atomRefs2="a1 a4" order="1"/>
  <bond atomRefs2="a1 a5" order="1"/>
 </bondArray>
</molecule>
#+end_example

We can also use the CML output as input to a command that generates an SVG image, again, passing the CML in via a variable in the header.

#+BEGIN_SRC sh :var cml=methane-cml :file methane.svg
echo $cml | obabel -icml -o svg
#+END_SRC

#+RESULTS:
[[file:methane.svg]]

With our previous [[http://kitchingroup.cheme.cmu.edu/blog/2016/03/26/A-molecule-link-for-org-mode/][molecule link]] we can refer to these in our text now as molecule:methane-smiles and molecule:methane-cml.

So far it all looks good. Let us do something new. We will use the SMILES representation to create an [[https://wiki.fysik.dtu.dk/ase/ase/atoms.html][ase.atoms]] object in Python. First, we create an xyz format that =ase= can read. Rather than clutter up our document with the output, we silence it.

#+name: methane-xyz
#+BEGIN_SRC sh :var input=methane-smiles :results silent
echo $input | obabel -ismi -o xyz --gen3d
#+END_SRC

Now, we can use the string generated in a Python file to generate a tempfile (or you could have saved the result above to a file and just read it in here). I was too lazy to make the file link to the image myself, so I setup a :file header and just print the result to stdout in this block. Although all we do here is create a new image, this demonstrates you can use data from a MOLECULE block and pass it into a Python script where other kinds of calculations might occur.


#+BEGIN_SRC python :var xyz=methane-xyz :file methane.png
from ase.io import read, write

from tempfile import mkstemp
fd, fname = mkstemp(suffix=".xyz")
with open(fname, 'w') as f:
    f.write(xyz)

atoms = read(fname)
write('-', atoms, format="png")
#+END_SRC

#+RESULTS:
[[file:methane.png]]


The last point to discuss is discoverability. It would be helpful if we could use a program to "extract" molecular information about the molecules we use in our work. Here is a block that will map over the MOLECULE blocks and summarize what is found with a common format (SMILES again). We generate a table of clickable links to each molecule found in the documents. There is a small appendix in this document containing molecule:h2o and molecule:caffeine that will show in this table.

#+BEGIN_SRC emacs-lisp
(defun mlc-to-smiles (blk)
  "Convert a molecule BLK to smiles format using openbabel."
  (let* ((headers (-flatten
		   (mapcar 'org-babel-parse-header-arguments
			   (org-element-property :header blk))))
	 (format (cdr (assoc :format headers)))
	 (content (buffer-substring-no-properties
		   (org-element-property :contents-begin blk)
		   (org-element-property :contents-end blk)))
	 (tempfile (make-temp-file "obabel-")))
    (with-temp-file tempfile
      (insert content))

    ;; convert to smiles. This outputs a smiles string and the file it was
    ;; generated from. I don't know how to suppress the file, so we use awk to
    ;; just get the SMILEs strings. It is not pretty. I know.
    (prog1
	(s-trim (shell-command-to-string
		 (format  "obabel %s %s -osmi 2> /dev/null | awk '{print $1}'"
			  (format "-i%s" format) tempfile)))
      (delete-file tempfile))))


;; Generate the table of molecules
(append '(("Display name" "Name" "format" "SMILES representation"))
	'(hline)
	(org-element-map (org-element-parse-buffer) 'special-block
	  (lambda (sb)
	    (when (string= "MOLECULE" (org-element-property :type sb))
	      (let ((headers (-flatten
			      (mapcar 'org-babel-parse-header-arguments
				      (org-element-property :header sb)))))

		(list
		 (format "[[molecule:%s][%s]]" (org-element-property :name sb)
			 (cdr (assoc :display-name headers)))
		 (org-element-property :name sb)
		 (cdr (assoc :format headers))
		 (mlc-to-smiles sb)))))))
#+END_SRC

#+RESULTS:
| Display name | Name           | format | SMILES representation        |
|--------------+----------------+--------+------------------------------|
| [[molecule:methane-smiles][methane]]      | methane-smiles | smiles | C                            |
| [[molecule:h2o][water]]        | h2o            | cml    | OO                           |
| [[molecule:caffeine][Caffeine]]     | caffeine       | xyz    | Cn1cnc2n(C)c(=O)n(C)c(=O)c12 |

That seems pretty discoverable to me. We not only can discover the molecules in this post, but can pretty easily convert them to other formats (SMILES) in this case. Since we can run any code we want on them, we could just as well import them to a database, or do subsequent calculations on them.

The MOLECULE block is not standard, and I have only demonstrated here that it is suitable for this purpose. But, it looks like we could extend it and deal with a variety of formats. We can use headers to add metadata, format, etc... Some features I find missing are similar to those in code blocks where we can type C-c ' to edit them in special modes, and the nice syntax highlighting that often comes with that.

It might be helpful to make the export of MOLECULE blocks nicer looking and more functional. The default export, for example doesn't put an id attribute in the block. First, we rewrite an org-function to add the id attribute to the exported blocks so our molecule links will work.

#+BEGIN_SRC emacs-lisp
(defun org-html-special-block (special-block contents info)
  "Transcode a SPECIAL-BLOCK element from Org to HTML.
CONTENTS holds the contents of the block.  INFO is a plist
holding contextual information."
  (let* ((block-type (downcase
		      (org-element-property :type special-block)))
	 (contents (or contents ""))
	 (html5-fancy (and (org-html-html5-p info)
			   (plist-get info :html-html5-fancy)
			   (member block-type org-html-html5-elements)))
	 (attributes (org-export-read-attribute :attr_html special-block)))
    (unless html5-fancy
      (let ((class (plist-get attributes :class)))
	(setq attributes (plist-put attributes :class
				    (if class (concat class " " block-type)
				      block-type)))
	(when (org-element-property :name special-block)
	  (setq attributes (plist-put
			    attributes :id
			    (org-element-property :name special-block))))))
    (setq attributes (org-html--make-attribute-string attributes))
    (when (not (equal attributes ""))
      (setq attributes (concat " " attributes)))
    (if html5-fancy
	(format "<%s%s>\n%s</%s>" block-type attributes
		contents block-type)
      (format "<div%s>\n%s\n</div>" attributes contents))))
#+END_SRC

#+RESULTS:
: org-html-special-block

It would be nice to add some additional information around the block, e.g. that it is a molecule, maybe some tooltip about the format, etc..., but we leave that to another day. These should probably be handled specially with a dedicated export function. You will note that MOLECULE blocks don't export too well, they should probably be wrapped in <pre> for HTML export. We will at least make them stand out with this bit of css magic.

#+BEGIN_EXAMPLE
#+HTML_HEAD_EXTRA:  <style>.molecule {background-color:LightSkyBlue;}</style>
#+END_EXAMPLE



** Summary thoughts
This looks pretty promising as a way to embed molecular data into org-files so that the data is reusable and discoverable. If there is metadata that cannot go into the MOLECULE format we can put it in headers instead. This seems like it could be useful.

** Appendix of molecules
*** Water
Here is water in the CML format.

#+header: :format cml :display-name water
#+name: h2o
#+begin_MOLECULE
<?xml version="1.0"?>
<molecule xmlns="http://www.xml-cml.org/schema">
 <atomArray>
  <atom id="a1" elementType="O"/>
  <atom id="a2" elementType="O"/>
 </atomArray>
 <bondArray>
  <bond atomRefs2="a1 a2" order="1"/>
 </bondArray>
</molecule>
#+end_MOLECULE
*** Caffeine
This is a simple xyz format of caffeine.

#+header: :format xyz :display-name Caffeine
#+name: caffeine
#+begin_molecule
24

C          1.02887       -0.01688       -0.03460
N          2.46332        0.11699       -0.03522
C          3.33799       -0.94083       -0.03530
N          4.59156       -0.53767       -0.03594
C          4.50847        0.82120       -0.03623
N          5.57252        1.69104       -0.03687
C          6.93040        1.17620       -0.03898
C          5.33446        3.06602       -0.03685
O          6.26078        3.88171       -0.03594
N          3.98960        3.48254       -0.03830
C          3.70813        4.90531       -0.04199
C          2.87287        2.63769       -0.03747
O          1.71502        3.04777       -0.03830
C          3.21603        1.25723       -0.03610
H          0.54478        0.95872       -0.03440
H          0.73663       -0.56946        0.86233
H          0.73584       -0.56959       -0.93118
H          3.00815       -1.97242       -0.03493
H          7.67209        1.97927       -0.03815
H          7.07929        0.56516       -0.93486
H          7.08112        0.56135        0.85404
H          4.61163        5.51902       -0.04152
H          3.11230        5.15092        0.84340
H          3.11643        5.14660       -0.93127
#+end_molecule


* DONE Org teleport headlines
  CLOSED: [2016-03-18 Fri 08:48]
  :PROPERTIES:
  :categories: emacs,orgmode
  :date:     2016/03/18 08:47:14
  :updated:  2016/03/18 08:48:14
  :END:
I often want to rearrange org headlines.  There are super convenient shortcuts for some things, like Alt-up/down to move up and down, and Alt-left/right to change levels, and shift variants of that when there are nested headlines. There is also refile for some use cases. The case these don't handle for me is when I have a headline at the bottom and I want to move it a distance. To cut down on key strokes, I usually kill the headline, jump to where I want, and paste it.

In lispy, there is a teleport command for this! I am going to adapt this here for reorganizing org-headlines. This version allows you to move headlines around on the visible area. You need another strategy for the candidates to jump to if you want to move a headline off the screen. Note though that ivy is really smart, you can have one file in a split view and it will jump to any headline in any window! I use ivy for the navigation here, but you could also use helm to select headlines, for example. This function puts your headline after the selected headline, unless you use a prefix arg, and then it goes before.

Check out the video to see this in action: https://www.youtube.com/watch?v=Vv-2888rpyc

Note: this code is a little more advanced than what is in the video; I added a numeric prefix to change the headline level.

#+BEGIN_SRC emacs-lisp
(defun org-teleport (&optional arg)
  "Teleport the current heading to after a headline selected with avy.
With a prefix ARG move the headline to before the selected
headline. With a numeric prefix, set the headline level. If ARG
is positive, move after, and if negative, move before."
  (interactive "P")
  ;; Kill current headline
  (org-mark-subtree)
  (kill-region (region-beginning) (region-end))
  ;; Jump to a visible headline
  (avy-with avy-goto-line (avy--generic-jump "^\\*+" nil avy-style))
  (cond
   ;; Move before  and change headline level
   ((and (numberp arg) (> 0 arg))
    (save-excursion
      (yank))
    ;; arg is what we want, second is what we have
    ;; if n is positive, we need to demote (increase level)
    (let ((n (- (abs arg) (car (org-heading-components)))))
      (cl-loop for i from 1 to (abs n)
	       do
	       (if (> 0 n)
		   (org-promote-subtree)
		 (org-demote-subtree)))))
   ;; Move after and change level
   ((and (numberp arg) (< 0 arg))
    (org-mark-subtree)
    (goto-char (region-end))
    (when (eobp) (insert "\n"))
    (save-excursion
      (yank))
    ;; n is what we want and second is what we have
    ;; if n is positive, we need to demote
    (let ((n (- (abs arg) (car (org-heading-components)))))
      (cl-loop for i from 1 to (abs n)
	       do
	       (if (> 0 n) (org-promote-subtree)
		 (org-demote-subtree)))))

   ;; move to before selection
   ((equal arg '(4))
    (save-excursion
      (yank)))
   ;; move to after selection
   (t
    (org-mark-subtree)
    (goto-char (region-end))
    (when (eobp) (insert "\n"))
    (save-excursion
      (yank))))
  (outline-hide-leaves))

#+END_SRC

#+RESULTS:
: org-teleport

Now we add some new speed commands to help us out. I think we should be able to mark subtrees ("@" is bound to this, but I like "m" better) and kill them with a key stroke, in addition to teleporting them. Since we figured out the nice way to jump to a headline up there, we bind that to "q" which isn't used so far, and maps to a similar concept in lispy. The lowercase "t" is already bound to changing the TODO state, so we use capital "T" for the speed key to teleport. Note it is possible to "compose" the same effect by typing "k" to kill a headline, then "q" to jump somewhere else (or navigate where you want,  and then "C-y" to paste it at the new location. Or, "T".

#+BEGIN_SRC emacs-lisp
(add-to-list 'org-speed-commands-user (cons "m" 'org-mark-subtree))
(add-to-list 'org-speed-commands-user (cons "k" (lambda ()
						  (org-mark-subtree)
						  (kill-region
						   (region-beginning)
						   (region-end)))))
(add-to-list 'org-speed-commands-user
	     (cons "q" (lambda ()
			 (avy-with avy-goto-line
			   (avy--generic-jump "^\\*+" nil avy-style)))))

(add-to-list 'org-speed-commands-user (cons "T" 'org-teleport))
"done"
#+END_SRC

#+RESULTS:
: done
* DONE A molecule link for org-mode
  CLOSED: [2016-03-26 Sat 15:28]
  :PROPERTIES:
  :categories: orgmode,emacs,chemistry
  :date:     2016/03/26 15:28:17
  :updated:  2016/03/26 15:33:10
  :END:
Here I am exploring some ideas on compact and functional representations of molecules in org-mode. We will use some functionality from OpenBabel (https://openbabel.org/docs/dev/index.html) for conversion of formats.

One approach we could use is the [[https://en.wikipedia.org/wiki/Simplified_molecular-input_line-entry_system][SMILES]] representation. OpenBabel provides tools to convert SMILES to a visualization like this. Let's check out an old favorite: caffeine.

#+BEGIN_SRC sh
obabel -:"Cn1cnc2n(C)c(=O)n(C)c(=O)c12" -osvg
#+END_SRC

#+RESULTS:
[[file:out.svg]]

We can imagine the SMILES string is a program, and use an org-mode src block to contain it.  It isn't quite a program, as it is more like data, but we can make the block executable if we define how to "execute" the block, and for that we will just have obabel generate the svg representation of the molecule. Here is our execute function. It simply generates the svg to stdout. We can use a :file header to capture it in a file.

#+BEGIN_SRC emacs-lisp
(defun org-babel-execute:smiles (body params)
  (shell-command-to-string
   (format "obabel -:\"%s\" -osvg 2> /dev/null" body)))
#+END_SRC

#+RESULTS:
: org-babel-execute:smiles

You can find a smiles block in [[id:1CD759B4-E276-4990-982C-E98CCE5B0517][Appendix of molecules]] that was adapted from [[http://www.daylight.com/dayhtml_tutorials/languages/smiles/smiles_examples.html][here]].

Now, we need a link to refer to our molecule. We want the follow action to jump to our src block which should have a name. We will have it export as the name of the block linked to the molecule definition. This should work fine for definitions in the document. It is not robust to link to molecules in other org-files in the export. That would require those files to be exported too. For now we just define an HTML export.

#+BEGIN_SRC emacs-lisp
(defun molecule-jump (name)
  (org-mark-ring-push)
  (org-open-link-from-string (format "[[%s]]" path)))

(defun molecule-export (path desc backend)
  (let ((name (save-window-excursion
		(molecule-jump path)
		(org-element-property :name (org-element-context)))))
    (cond
     ((eq 'html backend)
      (format "<a href=\"#%s\">%s</a>" name name)))))

(org-add-link-type
 "molecule"
 'molecule-jump
 'molecule-export)
#+END_SRC

#+RESULTS:
| molecule           | molecule-jump| molecule-export                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| pydoc              | (lambda (path) (pydoc path| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| mod                | (lambda (path) (pydoc path| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| func               | (lambda (path) (pydoc path| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| acrobat            | org-mac-acrobat-open                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                           | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| elfeed             | org-elfeed-open                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| gilgamesh          | gilgamesh-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| github             | (lambda (username) (browse-url (format http://github.com/%s username| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| kitchinhub         | (lambda (path) (kitchinhub-open-repo path| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| bookmark-other-win | bookmark-jump-other-window| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| bookmark           | bookmark-jump| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| message            | org-mac-message-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| x-devonthink-item  | org-devonthink-item-open                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                       | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| mac-outlook        | org-mac-outlook-message-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| skim               | org-mac-skim-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| addressbook        | org-mac-addressbook-item-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| x-together-item    | org-mac-together-item-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| researcherid       | (closure (t) (link-string) (browse-url (format http://www.researcherid.com/rid/%s link-string| (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://www.researcherid.com/rid/%s">ResearcherID:%s</a> keyword (or desc keyword)))))                                                                                                                                                                                                                                                                                                |
| orcid              | (closure (t) (link-string) (browse-url (format http://orcid.org/%s link-string| (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://orcid.org/%s">orcid:%s</a> keyword (or desc keyword)))))                                                                                                                                                                                                                                                                                                                      |
| rmail              | org-rmail-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| mhe                | org-mhe-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| irc                | org-irc-visit| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| info               | org-info-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| gnus               | org-gnus-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| docview            | org-docview-open| org-docview-export                                                                                                                                                                                                                                                                                                                                                                                                                                                       |
| bbdb               | org-bbdb-open| org-bbdb-export                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
| mu4e               | org-mu4e-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| phone              | (lambda (phone-number) (cisco-call phone-number| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| ans                | (lambda (path) (let* ((fields (split-string path ::)) (label (nth 0 fields)) (data (nth 1 fields)) (data-file (format %s-%s.dat tq-userid label))) (let ((temp-file data-file) (temp-buffer (get-buffer-create (generate-new-buffer-name  *temp file*)))) (unwind-protect (prog1 (save-current-buffer (set-buffer temp-buffer) (insert data)) (save-current-buffer (set-buffer temp-buffer) (write-region nil nil temp-file nil 0))) (and (buffer-name temp-buffer) (kill-buffer temp-buffer)))) (mygit (format git add %s data-file)) (mygit (format git commit -m "%s" data-file)) (mygit git push origin master)))                                                                                                                                                                                                                          | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| mc                 | (lambda (link) (org-entry-put (point) ANSWER link) (save-restriction (save-excursion (org-narrow-to-subtree) (goto-char (point-max)) (if (bolp) nil (insert \n)) (gb-set-filetag (org-entry-get (point) ID) link| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| tq-index           | (lambda (path) (tq-index) (occur path| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| exercise           | (lambda (arg) (tq-check-internet) (tq-get-assignment arg| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| solution           | (lambda (label) (tq-check-internet) (let ((default-directory (file-name-as-directory (expand-file-name tq-root-directory)))) (if (file-exists-p solutions) nil (make-directory solutions)) (let ((default-directory (file-name-as-directory (expand-file-name solutions)))) (if (file-exists-p label) (progn (find-file (concat label / label .org)) (tq-update)) (mygit (format git clone %s@%s:solutions/%s tq-current-course tq-git-server label)) (find-file (concat label / label .org))))))                                                                                                                                                                                                                                                                                                                                              | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| assignment         | (lambda (arg) (tq-check-internet) (tq-get-assignment arg| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| arxiv              | (closure (t) (link-string) (browse-url (format http://arxiv.org/abs/%s link-string)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                          | (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://arxiv.org/abs/%s">arxiv:%s</a> keyword (or desc keyword))) ((eq format (quote latex)) (format \url{http://arxiv.org/abs/%s}{%s} keyword (or desc keyword)))))                                                                                                                                                                                                                 |
| pubmed-search      | (closure (t) (query) Open QUERY in a `pubmed-simple-search'. (pubmed-simple-search query| (closure (t) (query desc format) (let ((url (format http://www.ncbi.nlm.nih.gov/pubmed/?term=%s (url-hexify-string query)))) (cond ((eq format (quote html)) (format <a href="%s">%s</a> url (or desc (concat pubmed-search: query)))) ((eq format (quote latex)) (format \href{%s}{%s} url (or desc (concat pubmed-search: query)))))))                                                                                                                                 |
| nihmsid            | (closure (t) (link-string) (browse-url (format http://www.ncbi.nlm.nih.gov/pmc/articles/mid/%s link-string| (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/mid//%s">nihmsid:%s</a> keyword (or desc keyword))) ((eq format (quote latex)) (format \url{http://www.ncbi.nlm.nih.gov/pmc/articles/mid/%s}{%s} keyword (or desc keyword)))))                                                                                                                                                              |
| pmcid              | (closure (t) (link-string) (browse-url (format http://www.ncbi.nlm.nih.gov/pmc/articles/%s link-string)))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/%s">pmcid:%s</a> keyword (or desc keyword))) ((eq format (quote latex)) (format \url{http://www.ncbi.nlm.nih.gov/pmc/articles/%s}{%s} keyword (or desc keyword)))))                                                                                                                                                                         |
| pmid               | (closure (t) (link-string) (browse-url (format http://www.ncbi.nlm.nih.gov/pubmed/%s link-string| (closure (t) (keyword desc format) (cond ((eq format (quote html)) (format <a href="http://www.ncbi.nlm.nih.gov/pmc/articles/mid/%s">pmid:%s</a> keyword (or desc keyword))) ((eq format (quote latex)) (format \url{http://www.ncbi.nlm.nih.gov/pmc/articles/mid/%s}{%s} keyword (or desc keyword)))))                                                                                                                                                                  |
| printindex         | org-ref-index| (lambda (path desc format) (cond ((eq format (quote latex)) (format \printindex))))                                                                                                                                                                                                                                                                                                                                                                                      |
| index              | (lambda (path) (occur path| (lambda (path desc format) (cond ((eq format (quote latex)) (format \index{%s} path))))                                                                                                                                                                                                                                                                                                                                                                                  |
| bibentry           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-bibentry                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| Autocites          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Autocites                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| autocites          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-autocites                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| supercites         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-supercites                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Textcites          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Textcites                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| textcites          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-textcites                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Smartcites         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Smartcites                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| smartcites         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-smartcites                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| footcitetexts      | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-footcitetexts                                                                                                                                                                                                                                                                                                                                                                                                                                             |
| footcites          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-footcites                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Parencites         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Parencites                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| parencites         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-parencites                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Cites              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Cites                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| cites              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-cites                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| fnotecite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-fnotecite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Pnotecite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-Pnotecite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| pnotecite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-pnotecite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Notecite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Notecite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| notecite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-notecite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| footfullcite       | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-footfullcite                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| fullcite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-fullcite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citeurl            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citeurl                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| citedate*          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citedate*                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| citedate           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citedate                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citetitle*         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citetitle*                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| citetitle          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citetitle                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Citeauthor*        | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Citeauthor*                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| Autocite*          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Autocite*                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| autocite*          | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-autocite*                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Autocite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-Autocite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| autocite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-autocite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| supercite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-supercite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| parencite*         | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-parencite*                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| cite*              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-cite*                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| Smartcite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Smartcite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| smartcite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-smartcite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Textcite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Textcite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| textcite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-textcite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| footcitetext       | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-footcitetext                                                                                                                                                                                                                                                                                                                                                                                                                                              |
| footcite           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-footcite                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| Parencite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Parencite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| parencite          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-parencite                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| Cite               | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Cite                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| Citeauthor         | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-Citeauthor                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| Citealp            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Citealp                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Citealt            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Citealt                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| Citep              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Citep                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| Citet              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-Citet                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| citeyear*          | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citeyear*                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
| citeyear           | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-citeyear                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citeauthor*        | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citeauthor*                                                                                                                                                                                                                                                                                                                                                                                                                                               |
| citeauthor         | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citeauthor                                                                                                                                                                                                                                                                                                                                                                                                                                                |
| citetext           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citetext                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citenum            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citenum                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| citealp*           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citealp*                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citealp            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citealp                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| citealt*           | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citealt*                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
| citealt            | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citealt                                                                                                                                                                                                                                                                                                                                                                                                                                                   |
| citep*             | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citep*                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| citep              | (lambda (_path) (funcall org-ref-cite-onclick-function nil))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                   | org-ref-format-citep                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| citet*             | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citet*                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| citet              | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-citet                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| nocite             | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-nocite                                                                                                                                                                                                                                                                                                                                                                                                                                                    |
| cite               | (lambda (_path) (funcall org-ref-cite-onclick-function nil| org-ref-format-cite                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| eqref              | (lambda (label) on clicking goto the label. Navigate back with C-c & (org-mark-ring-push) (widen) (goto-char (point-min)) (if (or (re-search-forward (format label:%s label) nil t) (re-search-forward (format \label{%s} label) nil t) (re-search-forward (format ^#\+label:\s-*\(%s\)\b label) nil t)) nil (org-mark-ring-goto) (error %s not found label)) (message go back with (org-mark-ring-goto) `C-c &`))                                                                                                                                                                                                                                                                                                                                                                                                                             | (lambda (keyword desc format) (cond ((eq format (quote latex)) (format \eqref{%s} keyword)) ((eq format (quote html)) (format \eqref{%s} keyword))))                                                                                                                                                                                                                                                                                                                     |
| nameref            | (lambda (label) on clicking goto the label. Navigate back with C-c & (org-mark-ring-push) (widen) (if (or (progn (goto-char (point-min)) (re-search-forward (format \label{%s} label) nil t))) nil (org-mark-ring-goto) (error %s not found label)) (message go back with (org-mark-ring-goto) `C-c &`| (lambda (path desc format) (cond ((eq format (quote html)) (format (<nameref>%s</nameref>) path)) ((eq format (quote latex)) (format \nameref{%s} path))))                                                                                                                                                                                                                                                                                                               |
| pageref            | (lambda (label) on clicking goto the label. Navigate back with C-c & (org-mark-ring-push) (widen) (if (or (progn (goto-char (point-min)) (re-search-forward (format label:%s\b label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format \label{%s} label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format ^#\+label:\s-*\(%s\)\b label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format ^#\+tblname:\s-*\(%s\)\b label) nil t))) nil (org-mark-ring-goto) (error %s not found label)) (message go back with (org-mark-ring-goto) `C-c &`))                                                                                                                                                                                                                                                 | (lambda (path desc format) (cond ((eq format (quote html)) (format (<pageref>%s</pageref>) path)) ((eq format (quote latex)) (format \pageref{%s} path))))                                                                                                                                                                                                                                                                                                               |
| ref                | (lambda (label) on clicking goto the label. Navigate back with C-c & (org-mark-ring-push) (widen) (if (or (progn (goto-char (point-min)) (re-search-forward (format label:%s\b label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format \label{%s} label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format ^#\+label:\s-*\(%s\)\b label) nil t)) (progn (goto-char (point-min)) (re-search-forward (format ^#\+tblname:\s-*\(%s\)\b label) nil t))) nil (org-mark-ring-goto) (error %s not found label)) (org-show-entry) (message go back with (org-mark-ring-goto) `C-c &`))                                                                                                                                                                                                                                | (lambda (keyword desc format) (cond ((eq format (quote html)) (format <a href="#%s">%s</a> keyword keyword)) ((eq format (quote latex)) (format \ref{%s} keyword))))                                                                                                                                                                                                                                                                                                     |
| label              | (lambda (label) On clicking count the number of label tags used in the buffer.\nA number greater than one means multiple labels! (let ((count (org-ref-count-labels label))) (message (format %s occurence%s count (if (or (= count 0) (> count 1)) s )) (org-ref-count-labels label| (lambda (keyword desc format) (cond ((eq format (quote html)) (format <div id="%s"> keyword)) ((eq format (quote latex)) (format \label{%s} keyword))))                                                                                                                                                                                                                                                                                                                  |
| list-of-tables     | org-ref-list-of-tables| (lambda (keyword desc format) (cond ((eq format (quote latex)) (format \listoftables))))                                                                                                                                                                                                                                                                                                                                                                                 |
| list-of-figures    | org-ref-list-of-figures| (lambda (keyword desc format) (cond ((eq format (quote latex)) (format \listoffigures))))                                                                                                                                                                                                                                                                                                                                                                                |
| addbibresource     | (lambda (link-string) (let* ((bibfile) (object (org-element-context)) (link-string-beginning) (link-string-end)) (save-excursion (goto-char (org-element-property :begin object)) (search-forward link-string nil nil 1) (setq link-string-beginning (match-beginning 0)) (setq link-string-end (match-end 0))) (set (make-local-variable (quote reftex-default-bibliography)) (split-string (org-element-property :path object) ,)) (let (key-beginning key-end) (save-excursion (if (search-forward , link-string-end 1 1) (setq key-end (- (match-end 0) 1)) (setq key-end (point)))) (save-excursion (if (search-backward , link-string-beginning 1 1) (setq key-beginning (+ (match-beginning 0) 1)) (setq key-beginning (point)))) (setq bibfile (org-ref-strip-string (buffer-substring key-beginning key-end))) (find-file bibfile)))) | (lambda (keyword desc format) (cond ((eq format (quote html)) (format )) ((eq format (quote latex)) (format \addbibresource{%s} keyword))))                                                                                                                                                                                                                                                                                                                              |
| bibliographystyle  | (lambda (arg) (message Nothing implemented for clicking here| (lambda (keyword desc format) (cond ((eq format (quote latex)) (format \bibliographystyle{%s} keyword)) (t )))                                                                                                                                                                                                                                                                                                                                                           |
| printbibliography  | (lambda (arg) (message Nothing implemented for clicking here.))                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                | (lambda (keyword desc format) (cond ((eq format (quote org)) (org-ref-get-org-bibliography)) ((eq format (quote html)) (org-ref-get-html-bibliography)) ((eq format (quote latex)) \printbibliography)))                                                                                                                                                                                                                                                                 |
| nobibliography     | (lambda (link-string) (let* ((bibfile) (object (org-element-context)) (link-string-beginning) (link-string-end)) (save-excursion (goto-char (org-element-property :begin object)) (search-forward link-string nil nil 1) (setq link-string-beginning (match-beginning 0)) (setq link-string-end (match-end 0))) (set (make-local-variable (quote reftex-default-bibliography)) (split-string (org-element-property :path object) ,)) (let (key-beginning key-end) (save-excursion (if (search-forward , link-string-end 1 1) (setq key-end (- (match-end 0) 1)) (setq key-end (point)))) (save-excursion (if (search-backward , link-string-beginning 1 1) (setq key-beginning (+ (match-beginning 0) 1)) (setq key-beginning (point)))) (setq bibfile (org-ref-strip-string (buffer-substring key-beginning key-end))) (find-file bibfile)))) | (lambda (keyword desc format) (cond ((eq format (quote org)) (org-ref-get-org-bibliography)) ((eq format (quote ascii)) (org-ref-get-ascii-bibliography)) ((eq format (quote odt)) (org-ref-get-ascii-bibliography)) ((eq format (quote html)) (org-ref-get-html-bibliography)) ((eq format (quote latex)) (format \nobibliography{%s} (replace-regexp-in-string \.bib  (mapconcat (quote identity) (mapcar (quote file-relative-name) (split-string keyword ,)) ,)))))) |
| bibliography       | org-ref-open-bibliography| (lambda (keyword desc format) (cond ((eq format (quote org)) (org-ref-get-org-bibliography)) ((eq format (quote ascii)) (org-ref-get-ascii-bibliography)) ((eq format (quote odt)) (org-ref-get-odt-bibliography)) ((eq format (quote html)) (org-ref-get-html-bibliography)) ((eq format (quote latex)) (format \bibliography{%s} (replace-regexp-in-string \.bib  (mapconcat (quote identity) (mapcar (quote file-relative-name) (split-string keyword ,)) ,))))))     |
| acrfull            | or-follow-acronym                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                              | (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \acrfull{%s} path))))                                                                                                                                                                                                                                                                                                                                                                              |
| acrlong            | or-follow-acronym| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \acrlong{%s} path))))                                                                                                                                                                                                                                                                                                                                                                              |
| acrshort           | or-follow-acronym| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \acrshort{%s} path))))                                                                                                                                                                                                                                                                                                                                                                             |
| glsdesc            | or-follow-glossary| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \glsdesc{%s} path))))                                                                                                                                                                                                                                                                                                                                                                              |
| glssymbol          | or-follow-glossary| (closure (t) (path _desc format) (cond ((eq format (quote latex)) (format \glssymbol{%s} path))))                                                                                                                                                                                                                                                                                                                                                                        |
| glslink            | or-follow-glossary| (closure (t) (path desc format) (cond ((eq format (quote latex)) (format \glslink{%s}{%s} path desc))))                                                                                                                                                                                                                                                                                                                                                                  |
| Glspl              | or-follow-glossary| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \Glspl{%s} path))))                                                                                                                                                                                                                                                                                                                                                                                |
| Gls                | or-follow-glossary| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \Gls{%s} path))))                                                                                                                                                                                                                                                                                                                                                                                  |
| glspl              | or-follow-glossary| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \glspl{%s} path))))                                                                                                                                                                                                                                                                                                                                                                                |
| gls                | or-follow-glossary| (closure (t) (path _ format) (cond ((eq format (quote latex)) (format \gls{%s} path))))                                                                                                                                                                                                                                                                                                                                                                                  |
| doi                | doi-link-menu| (lambda (doi desc format) (cond ((eq format (quote html)) (format <a href="https://doi.org/%s">%s</a> doi (or desc (concat doi: doi)))) ((eq format (quote latex)) (format \href{https://doi.org/%s}{%s} doi (or desc (concat doi:%s doi))))))                                                                                                                                                                                                                       |
| bibtex             | org-bibtex-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| attachfile         | (lambda (link-string) (org-open-file link-string| (lambda (keyword desc format) (cond ((eq format (quote html)) (format )) ((eq format (quote latex)) (format \attachfile{%s} keyword))))                                                                                                                                                                                                                                                                                                                                  |
| msx                | org-msx-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| id                 | org-id-open| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| file+emacs         | org-open-file-with-emacs| nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
| file+sys           | org-open-file-with-system                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                      | nil                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |

Now we link to molecule:LSD and molecule:ethanol that allows us to navigate to the definition. We can also refer to a molecule in another file like molecule:./blog.org::LSD. The links are clickable, and should jump to the molecule definition. On export to HTML they will be links to the definition.

Our link provides some limited functionality. We can provide more by making the follow action open a menu for example. Instead, we created a major mode [[id:7978044B-CB2F-4AB3-8142-34A28B3DB201][here]]. It provides a function to convert smiles to CML. It is readily extensible to do other conversions.

One of the reasons we want to have molecules as "data" is so we can find them in our papers. Here is an example of that. We defined two molecules in the Appendix, and we find them here.

#+BEGIN_SRC emacs-lisp
(org-element-map (org-element-parse-buffer)
    'src-block
  (lambda (src)
    (when (string= "smiles" (org-element-property :language src))
      (org-element-property :name src))))
#+END_SRC

#+RESULTS:
| LSD | ethanol |

There is still a lot to do to make this really functional. For example, we might want to use the molecules to write reactions. We might also want more advanced conversion or lookup functions, and more export options. It might be desirable to have tooltips on the links to see the molecules too. No doubt one might want to fine-tune the way the blocks run, so that options could be passed as header args.
Maybe I will work on that another day.

** Appendix of molecules
   :PROPERTIES:
   :ID:       1CD759B4-E276-4990-982C-E98CCE5B0517
   :END:

Here is an example smiles block.
#+caption: A lysergic acid diethylamide molecule
#+name: LSD
#+BEGIN_SRC smiles
CCN(CC)C(=O)[C@H]1CN(C)[C@@H]2Cc3c[nH]c4cccc(C2=C1)c34
#+END_SRC

#+RESULTS: LSD
[[file:lsd.svg]]

#+caption: An ethanol molecule.
#+name: ethanol
#+BEGIN_SRC smiles
CCO
#+END_SRC

#+RESULTS:
[[file:ethanol.svg]]

** smiles major mode
   :PROPERTIES:
   :ID:       7978044B-CB2F-4AB3-8142-34A28B3DB201
   :END:
It would be nice to have a language mode to do special edits of SMILES src blocks. This mode does very little but provide a function that converts SMILES to CML using obabel and open it in a buffer. We redirect stderr to /dev/null to avoid seeing the messages from obabel. We also provide another function that opens a browser to names of the molecule.

#+BEGIN_SRC emacs-lisp
(require 'easymenu)

(defun smiles-cml ()
  "Convert the smiles string in the buffer to CML."
  (interactive)
  (let ((smiles (buffer-string)))
    (switch-to-buffer (get-buffer-create "SMILES-CML"))
    (erase-buffer)
    (insert
     (shell-command-to-string
      (format "obabel -:\"%s\" -ocml 2> /dev/null"
	      smiles)))
    (goto-char (point-min))
    (xml-mode)))

(defun smiles-names ()
  (interactive)
  (browse-url
   (format "http://cactus.nci.nih.gov/chemical/structure/%s/names"
	   (buffer-string))))

(defvar smiles-mode-map
  nil
  "Keymap for smiles-mode.")

;; adapted from http://ergoemacs.org/emacs/elisp_menu_for_major_mode.html
(define-derived-mode smiles-mode fundamental-mode "smiles-mode"
  "Major mode for SMILES code."
  (setq buffer-invisibility-spec '(t)
	mode-name " ☺")

  (when (not smiles-mode-map)
    (setq smiles-mode-map (make-sparse-keymap)))
  (define-key smiles-mode-map (kbd "C-c C-c") 'smiles-cml)
  (define-key smiles-mode-map (kbd "C-c C-n") 'smiles-names)

  (define-key smiles-mode-map [menu-bar] (make-sparse-keymap))

  (let ((menuMap (make-sparse-keymap "SMILES")))
    (define-key smiles-mode-map [menu-bar smiles] (cons "SMILES" menuMap))

    (define-key menuMap [cml]
      '("CML" . smiles-cml))
    (define-key menuMap [names]
      '("Names" . smiles-names))))
#+END_SRC

#+RESULTS:
: smiles-mode

* DONE Displaying image overlays on image filenames in Emacs
  CLOSED: [2016-03-21 Mon 11:21]
  :PROPERTIES:
  :LAST-EDITED: [2015-08-01 Sat 12:00:23]
  :ID:       49936AE7-B874-4EC7-9102-20DF8A3218A2
  :categories: emacs,orgmode
  :date:     2016/03/21 11:21:19
  :updated:  2016/03/21 11:21:19
  :END:
It has always bothered me a little that I have to add a file image after code blocks in org-mode to see the results. That extra work... I also don't like having to explicitly print the figure in the code, since that is the extra work, just in a different place. Today I look into two approaches to this. First, we consider something like tooltips, and second just putting overlays of image files right on the file name. The plus side of this is no extra work. The downside is they won't export; that will still take the extra work, but you needed that for the caption anyway for now.

Here is a video illustrating the code in this post: https://www.youtube.com/watch?v=VuAnwCERM0U

Here is a test.
#+BEGIN_SRC python
import matplotlib.pyplot as plt
plt.plot([0, 1, 2, 4, 16])
plt.savefig("test-fig.png")
#+END_SRC

#+RESULTS:

[[./test-fig.png]]

** Tooltip approach
Building on our [[http://kitchingroup.cheme.cmu.edu/blog/2016/03/16/Getting-graphical-feedback-as-tooltips-in-Emacs/][previous approach]] of graphical tooltips, we try that here to show the images. I have solved the issue of why the images didn't show in the tooltips before; it was related to how Emacs was built. I used to build it with "cocoa" support so it integrates well in OSX. Here, I have build it with gtk3, and the tooltips work with images.

#+BEGIN_SRC emacs-lisp :results silent
(defvar image-tooltip-re (concat  "\\(?3:'\\|\"\\)\\(?1:.*\\."
				  (regexp-opt '("png" "PNG" "JPG" "jpeg"
						"jpg" "JPEG" "eps" "EPS"))
				  "\\)\\(?:\\3\\)")
  "Regexp to match image filenames in quotes")

(defun image-tooltip (window object position)
  (save-excursion
    (goto-char position)
    (let (beg end imgfile img s)
      (while (not (looking-at image-tooltip-re))
	(forward-char -1))
      (setq imgfile (match-string-no-properties 1))
      (when (file-exists-p imgfile)
	(setq img (create-image (expand-file-name imgfile)
				'imagemagick nil :width 200))
	(propertize "Look in the minibuffer"
		    'display img)))))

(font-lock-add-keywords
 nil
 `((,image-tooltip-re
    0 '(face font-lock-keyword-face
	     help-echo image-tooltip))))

(font-lock-fontify-buffer)
#+END_SRC

Now these both have tooltips on them: "test-fig.png"  and  'test-fig.png'.

** The overlay approach

We might alternatively prefer to put overlays in the buffer. Here we make that happen.

#+BEGIN_SRC emacs-lisp :results silent
(defun next-image-overlay (&optional limit)
  (when (re-search-forward image-tooltip-re limit t)
    (setq beg (match-beginning 0)
	  end (match-end 0)
	  imgfile (match-string 1))
    (when (file-exists-p imgfile)
      (setq img (create-image (expand-file-name imgfile)
			      'imagemagick nil :width 300))
      (setq ov (make-overlay beg end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
		   (list 'org-display-inline-remove-overlay)))))

(font-lock-add-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t)))
 t)
#+END_SRC


Here is the example we looked at before.

#+BEGIN_SRC python
import matplotlib.pyplot as plt
plt.plot([-0, 1, 2, 4, 16])
plt.savefig("test-fig.png")
#+END_SRC

You may want to remove those overlays. Here is one way. Note they come back if you don't disable the font-lock keywords though.
#+BEGIN_SRC emacs-lisp
(ov-clear 'org-image-overlay)
#+END_SRC
#+RESULTS:

I know you want to do that so here is:
#+BEGIN_SRC emacs-lisp :results silent
(font-lock-remove-keywords
 nil
 '((next-image-overlay (0  'font-lock-keyword-face t))))

(ov-clear 'org-image-overlay)
#+END_SRC


Note you still have to clear the overlays. Font lock doesn't seem to do that for you I think.
