* Matlab, org-mode and windows
Org-babel, Matlab and Windows do not cooperate together well. The issue seems to be related to related to the lack of a proper shell on Windows. Here I explore a simple way of combining tangling with batch shell operations to achieve something like Matlab integration with org-mode on windows. 

** Simple example
The basic idea is to create a matlab script on the file system, and then run it through Matlab in batch mode. Here is a pretty simple script. Note you must put the exit line at the end of your script, or Matlab will stay open.

#+BEGIN_SRC matlab :tangle simpletest.m
5 + 5
 
exit % you have to always put this here or matlab will not exit
#+END_SRC

We tangle (elisp:org-babel-tangle) the code block out to create file:simpletest.m. Alternatively, you could have just created simpletest.m in Matlab. Now, we run it as a batch file, and capture the results in a logfile.

#+BEGIN_SRC sh 
cd c:/Users/jkitchin/tmp
matlab -nosplash -nojvm -nodisplay -r simpletest -logfile simpletest-results
#+END_SRC

#+RESULTS:

Strangely (to me) the matlab command returns before the script is run, so we have to examine the output in a second command like this.

#+BEGIN_SRC sh
cat  simpletest-results
#+END_SRC

#+RESULTS:
#+begin_example
    ----------------------------------------------------
	Your MATLAB license will expire in 40 days.
	Please contact your system administrator or
	MathWorks to renew this license.
    ----------------------------------------------------
 
To get started, type one of these: helpwin, helpdesk, or demo.
For product information, visit www.mathworks.com.
 

ans =

    10

#+end_example

** A longer example
Here we do some real calculations, e.g. solving a set of coupled ODEs. First we set up the script (which could also be created in Matlab).

#+BEGIN_SRC matlab :tangle testscript.m
%% solving a second order ode
% the Van der Pol oscillator
% Matlab can only solve first order ODEs, or systems of first order ODES.
% To solve a second order ODE, we must convert it by changes of variables
% to a system of first order ODES. We consider the Van der Pol oscillator
% here:
%%
% 
% $$\frac{d^2x}{dt^2} - \mu(1-x^2)\frac{dx}{dt} + x = 0$$
% 
% $\mu$ is a constant.
% If we let $y=x - x^3/3$ <http://en.wikipedia.org/wiki/Van_der_Pol_oscillator>,
% then we arrive at this set of equations:
%%
% 
% $$\frac{dx}{dt} = \mu(x-1/3x^3-y)$$
% 
%%
% 
% $$\frac{dy}{dt} = 1/\mu(x)$$
% 
% here is how we solve this set of equations. Let $\mu=1$.
function main

X0 = [1;2];
tspan = [0 40];
[t,X] = ode45(@VanderPol, tspan, X0);

x = X(:,1);
y = X(:,2);

h = figure
plot(t,x,t,y)
xlabel('t')
legend 'x' 'y'
saveas(h, 'fig1.png')

%% phase portrait
% it is common to create a phase portrait. Although the solution appears
% periodic above, here you can see a limit cycle is definitely approached
% after the initial transient behavior. We mark the starting point with a
% red circle. 
h = figure
hold on
plot(x,y)
plot(x(1),y(1),'ro') % starting point for reference
xlabel('x')
ylabel('y')
saveas(h, 'fig2.png')
%%
'done'
exit % you have to always put this here or matlab will not exit

function dXdt = VanderPol(t,X)
x = X(1);
y = X(2);
mu = 1;
dxdt = mu*(x-1/3*x^3-y);
dydt = x/mu;
dXdt = [dxdt; dydt];
#+END_SRC

Again, we tangle it (elisp:org-babel-tangle) to get file:testscript.m. Now we run it the same way.

#+BEGIN_SRC sh 
cd c:/Users/jkitchin/tmp
matlab -nosplash -nodisplay -r testscript -logfile testscript-results
#+END_SRC

#+BEGIN_SRC sh
cat testscript-results
#+END_SRC
#+RESULTS:
#+begin_example
    ----------------------------------------------------
	Your MATLAB license will expire in 40 days.
	Please contact your system administrator or
	MathWorks to renew this license.
    ----------------------------------------------------

h =

     1


h =

     2


ans =

done

#+end_example

[[./fig1.png]]

[[./fig2.png]]


** Another alternative approach - Matlab publishing
You could simply write the code in Matlab, and then use the publish feature in Matlab to get a [[file:testscript.pdf][PDF]]. Note that you do not want the exit statements in then, because it will cause Matlab to close during the publish!
** Using Matlab on a Mac					   :noexport:
It just works.

#+BEGIN_SRC matlab
5 + 5
#+END_SRC

#+RESULTS:
#+begin_example
< M A T L A B (R) >
                  Copyright 1984-2013 The MathWorks, Inc.
                     R2013a (8.1.0.604) 64-bit (maci64)
                             February 15, 2013

    ----------------------------------------------------
	Your MATLAB license will expire in 39 days.
	Please contact your system administrator or
	MathWorks to renew this license.
    ----------------------------------------------------
 
To get started, type one of these: helpwin, helpdesk, or demo.
For product information, visit www.mathworks.com.
5 + 5

ans =

    10
#+end_example


*** A longer example

This does not work in a straight forward way. It would not let me use the functions, so I tried separating them. 

but then, I get an error:

#+BEGIN_EXAMPLE
>> [t,X] = ode45(@VanderPol, tspan, X0);
libmwblas: load error: dlopen(mkl.dylib, 10): Library not loaded: libiomp5.dylib
  Referenced from: /Applications/MATLAB_R2013a.app/bin/maci64/./mkl.dylib
  Reason: image not found
Caught "std::exception" Exception message is:
dlopen(mkl.dylib, 10): Library not loaded: libiomp5.dylib
  Referenced from: /Applications/MATLAB_R2013a.app/bin/maci64/./mkl.dylib
  Reason: image not found
#+END_EXAMPLE

the code works fine in the Matlab desktop, but not here. I probably need to do some more configuring to set some paths.

#+BEGIN_SRC matlab :tangle VanderPol.m
function dXdt = VanderPol(t,X)
x = X(1);
y = X(2);
mu = 1;
dxdt = mu*(x-1/3*x^3-y);
dydt = x/mu;
dXdt = [dxdt; dydt];
end

#+END_SRC



#+BEGIN_SRC matlab 
%% solving a second order ode
% the Van der Pol oscillator
% Matlab can only solve first order ODEs, or systems of first order ODES.
% To solve a second order ODE, we must convert it by changes of variables
% to a system of first order ODES. We consider the Van der Pol oscillator
% here:
%%
% 
% $$\frac{d^2x}{dt^2} - \mu(1-x^2)\frac{dx}{dt} + x = 0$$
% 
% $\mu$ is a constant.
% If we let $y=x - x^3/3$ <http://en.wikipedia.org/wiki/Van_der_Pol_oscillator>,
% then we arrive at this set of equations:
%%
% 
% $$\frac{dx}{dt} = \mu(x-1/3x^3-y)$$
% 
%%
% 
% $$\frac{dy}{dt} = 1/\mu(x)$$
% 
% here is how we solve this set of equations. Let $\mu=1$.

X0 = [1;2];
tspan = [0 40];
[t,X] = ode45(@VanderPol, tspan, X0);

x = X(:,1);
y = X(:,2);

h = figure
plot(t,x,t,y)
xlabel('t')
legend 'x' 'y'

%% phase portrait
% it is common to create a phase portrait. Although the solution appears
% periodic above, here you can see a limit cycle is definitely approached
% after the initial transient behavior. We mark the starting point with a
% red circle. 
h = figure
hold on
plot(x,y)
plot(x(1),y(1),'ro') % starting point for reference
xlabel('x')
ylabel('y')

%%
'done'

#+END_SRC

#+RESULTS:
#+begin_example
%% solving a second order ode
% the Van der Pol oscillator
% Matlab can only solve first order ODEs, or systems of first order ODES.
% To solve a second order ODE, we must convert it by changes of variables
% to a system of first order ODES. We consider the Van der Pol oscillator
% here:
%%
%
% $$\frac{d^2x}{dt^2} - \mu(1-x^2)\frac{dx}{dt} + x = 0$$
%
% $\mu$ is a constant.
% If we let $y=x - x^3/3$ <http://en.wikipedia.org/wiki/Van_der_Pol_oscillator>,
% then we arrive at this set of equations:
%%
%
% $$\frac{dx}{dt} = \mu(x-1/3x^3-y)$$
%
%%
%
% $$\frac{dy}{dt} = 1/\mu(x)$$
%
% here is how we solve this set of equations. Let $\mu=1$.
X0 = [1;2];
tspan = [0 40];
[t,X] = ode45(@VanderPol, tspan, X0);
libmwblas: load error: dlopen(mkl.dylib, 10): Library not loaded: libiomp5.dylib
  Referenced from: /Applications/MATLAB_R2013a.app/bin/maci64/./mkl.dylib
  Reason: image not found
Caught "std::exception" Exception message is:
dlopen(mkl.dylib, 10): Library not loaded: libiomp5.dylib
  Referenced from: /Applications/MATLAB_R2013a.app/bin/maci64/./mkl.dylib
  Reason: image not found
x = X(:,1);
{Undefined variable X.
}
y = X(:,2);
{Undefined variable X.
}
h = figure

h =

     3
plot(t,x,t,y)
{Undefined function or variable 't'.
}
xlabel('t')
legend 'x' 'y'
[Warning: Plot empty.] 
[> In <a href="matlab: opentoline('/Applications/MATLAB_R2013a.app/toolbox/matlab/scribe/legend.m',286,1)">legend at 286</a>]
%% phase portrait
% it is common to create a phase portrait. Although the solution appears
% periodic above, here you can see a limit cycle is definitely approached
% after the initial transient behavior. We mark the starting point with a
% red circle.
h = figure

h =

     4
hold on
plot(x,y)
{Undefined function or variable 'x'.
}
plot(x(1),y(1),'ro') % starting point for reference
{Undefined function 'x' for input arguments of type 'double'.
}
xlabel('x')
ylabel('y')
%%
'done'

ans =

done
#+end_example

