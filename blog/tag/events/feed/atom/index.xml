<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2024-06-08T17:46:55Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog" />
  <id>https://kitchingroup.cheme.cmu.edu/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="https://kitchingroup.cheme.cmu.edu/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[Using events in odelay with multiple equations]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations</id>
    <updated>2013-09-19T10:33:57Z</updated>
    <published>2013-09-19T10:33:57Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="odes" />
    <summary type="html"><![CDATA[Using events in odelay with multiple equations]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2013/09/19/Using-events-in-odelay-with-multiple-equations"><![CDATA[



&lt;p&gt;
&lt;code&gt;odelay&lt;/code&gt; was recently updated to support multiple odes with events. Here is an example. We want the solutions to:
&lt;/p&gt;

\begin{align}
\frac{dy_1}{dx} = y_2 \\
\frac{dy_2}{dx} = -y_1
\end{align}

&lt;p&gt;
with initial conditions \(y_1(0) = 2\) and \(y_2(0) = 1\). We want to stop the integration when \(y_2 = -1\) and find out when \(dy_1/dx=0\) and at a maximum.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #8b0000;"&gt;from&lt;/span&gt; pycse &lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; odelay
&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; np

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;ode&lt;/span&gt;(Y,x):
    &lt;span style="color: #8b008b;"&gt;y1&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;y2&lt;/span&gt; = Y
    &lt;span style="color: #8b008b;"&gt;dy1dx&lt;/span&gt; = y2
    &lt;span style="color: #8b008b;"&gt;dy2dx&lt;/span&gt; = -y1
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; [dy1dx, dy2dx]

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;event1&lt;/span&gt;(Y, x):
    &lt;span style="color: #8b008b;"&gt;y1&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;y2&lt;/span&gt; = Y
    &lt;span style="color: #8b008b;"&gt;value&lt;/span&gt; = y2 - (-1.0)
    &lt;span style="color: #8b008b;"&gt;isterminal&lt;/span&gt; = &lt;span style="color: #cd0000;"&gt;True&lt;/span&gt;
    &lt;span style="color: #8b008b;"&gt;direction&lt;/span&gt;  = 0
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; value, isterminal, direction

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;event2&lt;/span&gt;(Y, x):
    &lt;span style="color: #8b008b;"&gt;dy1dx&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;dy2dx&lt;/span&gt; = ode(Y,x)
    &lt;span style="color: #8b008b;"&gt;value&lt;/span&gt; = dy1dx - 0.0
    &lt;span style="color: #8b008b;"&gt;isterminal&lt;/span&gt; = &lt;span style="color: #cd0000;"&gt;False&lt;/span&gt;
    &lt;span style="color: #8b008b;"&gt;direction&lt;/span&gt; = -1  &lt;span style="color: #ff0000; font-weight: bold;"&gt;# &lt;/span&gt;&lt;span style="color: #ff0000; font-weight: bold;"&gt;derivative is decreasing towards a maximum&lt;/span&gt;
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; value, isterminal, direction

&lt;span style="color: #8b008b;"&gt;Y0&lt;/span&gt; = [2.0, 1.0]
&lt;span style="color: #8b008b;"&gt;xspan&lt;/span&gt; = np.linspace(0, 5)
&lt;span style="color: #8b008b;"&gt;X&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;Y&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;XE&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;YE&lt;/span&gt;, &lt;span style="color: #8b008b;"&gt;IE&lt;/span&gt; = odelay(ode, Y0, xspan, events=[event1, event2])

plt.plot(X, Y)
&lt;span style="color: #8b0000;"&gt;for&lt;/span&gt; ie,xe,ye &lt;span style="color: #8b0000;"&gt;in&lt;/span&gt; &lt;span style="color: #cd0000;"&gt;zip&lt;/span&gt;(IE, XE, YE):
    &lt;span style="color: #8b0000;"&gt;if&lt;/span&gt; ie == 1: &lt;span style="color: #ff0000; font-weight: bold;"&gt;#&lt;/span&gt;&lt;span style="color: #ff0000; font-weight: bold;"&gt;this is the second event&lt;/span&gt;
        &lt;span style="color: #8b008b;"&gt;y1&lt;/span&gt;,y2 = ye
        plt.plot(xe, y1, &lt;span style="color: #228b22;"&gt;'ro'&lt;/span&gt;) 
        
plt.legend([&lt;span style="color: #228b22;"&gt;'$y_1$'&lt;/span&gt;, &lt;span style="color: #228b22;"&gt;'$y_2$'&lt;/span&gt;], loc=&lt;span style="color: #228b22;"&gt;'best'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #228b22;"&gt;'images/odelay-mult-eq.png'&lt;/span&gt;)
plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are the plotted results:
&lt;p&gt;&lt;img src="/img/./images/odelay-mult-eq.png"&gt;&lt;p&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2013 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2013/09/19/Using-events-in-odelay-with-multiple-equations.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;]]></content>
  </entry>
</feed>
