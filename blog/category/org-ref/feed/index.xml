<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>https://kitchingroup.cheme.cmu.edu/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Mon, 12 Sep 2022 21:27:36 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>Accessing web of science entry, citing and related articles from a doi in emacs</title>
      <link>https://kitchingroup.cheme.cmu.edu/blog/2014/11/04/Accessing-web-of-science-entry-citing-and-related-articles-from-a-doi-in-emacs</link>
      <pubDate>Tue, 04 Nov 2014 21:18:10 EST</pubDate>
      <category><![CDATA[org-ref]]></category>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <guid isPermaLink="false">4Q13snCzg0aAr06d3H0Sw7LWsd8=</guid>
      <description>Accessing web of science entry, citing and related articles from a doi in emacs</description>
      <content:encoded><![CDATA[



&lt;p&gt;
I have been investigating how to more deeply integrate online resources, scientific bibliographies and writing in Emacs. One feature I have been wanting is integration with &lt;a href="http://apps.webofknowledge.com/UA_GeneralSearch_input.do?product=UA&amp;search_mode=GeneralSearch&amp;SID=4DwqzHSXl8YdqGjGQ2z&amp;preferencesSaved="&gt;Web Of Science&lt;/a&gt; , especially to find citing and related articles from a DOI. This service is not free, but is available at many places where science is done. I came across this API &lt;a href="http://wokinfo.com/media/pdf/OpenURL-guide.pdf"&gt;http://wokinfo.com/media/pdf/OpenURL-guide.pdf&lt;/a&gt; to make links to the things I am interested in here. Based on that document, here are three links based on a &lt;a href="10.1021/jp047349j"&gt;10.1021/jp047349j&lt;/a&gt; that take you to different Web Of Science (WOS) pages.
&lt;/p&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;go to article in WOS: &lt;a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/10.1021/jp047349j"&gt;http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info:doi/10.1021/jp047349j&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;citing articles: &lt;a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F10.1021/jp047349j&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes"&gt;http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F10.1021/jp047349j&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.citing=yes&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;related articles: &lt;a href="http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F10.1021/jp047349j&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes"&gt;http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;rft_id=info%3Adoi%2F10.1021/jp047349j&amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;svc.related=yes&lt;/a&gt; 
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
These are pretty easy to construct, so we can write functions that will create them and open the url in our browser. There are some other options that could be considered, but since we usually have a doi, it seems like the best way to go for creating the links. Here are the functions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #8b0000;"&gt;defun&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;doi-utils-wos&lt;/span&gt; (doi)
  &lt;span style="color: #228b22;"&gt;"Open Web of Science entry for DOI"&lt;/span&gt;
  (interactive &lt;span style="color: #228b22;"&gt;"sDOI: "&lt;/span&gt;)
  (browse-url
   (format
    &lt;span style="color: #228b22;"&gt;"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;amp;rft_id=info:doi/%s"&lt;/span&gt; doi)))

(&lt;span style="color: #8b0000;"&gt;defun&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;doi-utils-wos-citing&lt;/span&gt; (doi)
  &lt;span style="color: #228b22;"&gt;"Open Web of Science citing articles entry. May be empty if none are found"&lt;/span&gt;
  (interactive &lt;span style="color: #228b22;"&gt;"sDOI: "&lt;/span&gt;)
  (browse-url
   (concat
    &lt;span style="color: #228b22;"&gt;"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;amp;rft_id=info%3Adoi%2F"&lt;/span&gt;
    doi
    &lt;span style="color: #228b22;"&gt;"&amp;amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;amp;svc.citing=yes"&lt;/span&gt;)))

(&lt;span style="color: #8b0000;"&gt;defun&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;doi-utils-wos-related&lt;/span&gt; (doi)
  &lt;span style="color: #228b22;"&gt;"Open Web of Science related articles page."&lt;/span&gt;
  (interactive &lt;span style="color: #228b22;"&gt;"sDOI: "&lt;/span&gt;)
  (browse-url
   (concat &lt;span style="color: #228b22;"&gt;"http://ws.isiknowledge.com/cps/openurl/service?url_ver=Z39.88-2004&amp;amp;rft_id=info%3Adoi%2F"&lt;/span&gt;
           doi
           &lt;span style="color: #228b22;"&gt;"&amp;amp;svc_val_fmt=info%3Aofi%2Ffmt%3Akev%3Amtx%3Asch_svc&amp;amp;svc.related=yes"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
doi-utils-wos-related
&lt;/pre&gt;

&lt;p&gt;
These are exciting because they could be integrated into org-ref or doi-utils to make citations in an org-document even more functional! There are some other interesting things &lt;a href="http://bibwild.wordpress.com/2009/04/13/cited-by-from-isi-and-scopus-in-the-link-resolver/"&gt;here&lt;/a&gt; about Scopus and issues with ISI that I note for reference to future me.
&lt;/p&gt;

&lt;p&gt;
Some of these are now included in &lt;a href="https://github.com/jkitchin/jmax/blob/master/jmax-bibtex.el"&gt;jmax-bibtex.el&lt;/a&gt; and &lt;a href="https://github.com/jkitchin/jmax/blob/master/org/doi-utils.org"&gt;doi-utils.org&lt;/a&gt; .
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2014 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2014/11/04/Accessing-web-of-science-entry,-citing-and-related-articles-from-a-doi-in-emacs.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.7c&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Another parsing of links for citations with pre and post text.</title>
      <link>https://kitchingroup.cheme.cmu.edu/blog/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text</link>
      <pubDate>Thu, 26 Jun 2014 20:16:43 EDT</pubDate>
      <category><![CDATA[org-mode]]></category>
      <category><![CDATA[org-ref]]></category>
      <category><![CDATA[emacs]]></category>
      <guid isPermaLink="false">y0RRshHWnJDYrR30xt8Gha-MeNc=</guid>
      <description>Another parsing of links for citations with pre and post text.</description>
      <content:encoded><![CDATA[



&lt;p&gt;
Some LaTeX citations look like \cite[pretext][post text]{key}. Here I explore parsing a link like &lt;a href="#(pre text)(post text)key"&gt;(pre text)(post text)key&lt;/a&gt;. Note you cannot use [] inside the link, as it breaks the link syntax. Also, these links must be wrapped in &lt;code&gt;[[]]&lt;/code&gt; because of the parentheses and spaces in the parentheses. This is a very different approach than used &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2014/05/19/Exporting-citations-with-biblatex/"&gt;here&lt;/a&gt; which used the description of the link to define the pre and post text. The disadvantage of that approach is that the key is hidden, whereas in this approach it is not; you can see the key and pre/post text.
&lt;/p&gt;

&lt;p&gt;
The basic strategy will be to use a regexp to parse the link path. The regexp below is pretty hairy, but basically it looks for optional text in () and uses numbered groups to store what is found. Then, we use what we found to construct the LaTeX syntax. We redefine the function in org-ref that gets the key for clicking, and we redefine the cite format function. The result is that we retain the click functionality that shows us what the key refers to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(defun org-ref-parse-key (s)
  "return pretext, posttext and bibtex key from a string like \"(pre text)(post text)bibtexkey\""
  (string-match "\\(?1:(\\(?2:[^)]*\\))\\)?\\(?3:(\\(?4:[^]]*\\))\\)?\\(?5:.*\\)" s)
  ;; return pretext postext key
  (list (match-string 2 s) (match-string 4 s) (match-string 5 s)))

(defun org-ref-get-bibtex-key-and-file (&amp;amp;optional key)
  "returns the bibtex key and file that it is in. If no key is provided, get one under point"
 (interactive)
 (let ((org-ref-bibliography-files (org-ref-find-bibliography))
       (file))
   (unless key
     ;; get the key
     (setq key (nth 2 (org-ref-parse-key (org-ref-get-bibtex-key-under-cursor)))))
   (setq file     (catch 'result
		    (loop for file in org-ref-bibliography-files do
			  (if (org-ref-key-in-file-p key (file-truename file)) 
			      (throw 'result file)))))
   (cons key file)))

(defun org-ref-format-cite (keyword desc format)
   (cond
    ((eq format 'latex)
     (let* ((results (org-ref-parse-key keyword))
	    (pretext (nth 0 results))
	    (posttext (nth 1 results))
	    (key (nth 2 results)))
       (concat "\\cite" 
	       (when pretext (format "[%s]" pretext))
	       (when posttext (format "[%s]" posttext))
	       (format "{%s}" key))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
org-ref-format-cite
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(org-ref-format-cite "(pre text)(post text)key" nil 'latex)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
\cite[pre text][post text]{key}
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(org-ref-format-cite "(pre text)key" nil 'latex)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
\cite[pre text]{key}
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(org-ref-format-cite "key" nil 'latex)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
\cite{key}
&lt;/pre&gt;

&lt;p&gt;
It looks like they all work! Let us test the links: &lt;a href="#mehta-2014-ident-poten"&gt;mehta-2014-ident-poten&lt;/a&gt;, &lt;a href="#(pre text)mehta-2014-ident-poten"&gt;(pre text)mehta-2014-ident-poten&lt;/a&gt; and &lt;a href="#(pre text)(post text)biskup-2014-insul-ferrom-films"&gt;(pre text)(post text)biskup-2014-insul-ferrom-films&lt;/a&gt;. a multiple citation &lt;a href="#mehta-2014-ident-poten"&gt;mehta-2014-ident-poten&lt;/a&gt;,&lt;a href="#thompson-2014-co2-react"&gt;thompson-2014-co2-react&lt;/a&gt;,&lt;a href="#calle-vallejo-2013-number"&gt;calle-vallejo-2013-number&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
This seems to work from an export point of view. You can not mix multiple citations with this syntax, and I did not define the html export above. Otherwise, it looks like this might be a reasonable addition to org-ref.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2014 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2014/06/26/Another-parsing-of-links-for-citations-with-pre-and-post-text..org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.6&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
