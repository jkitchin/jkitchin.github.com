<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2018-10-11T16:13:10Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Getting geo-tagged information from photos for blogging]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging" />
    <id>http://jkitchin.github.io/blog/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging</id>
    <updated>2018-07-01T20:05:42Z</updated>
    <published>2018-07-01T19:17:18Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="geotag" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Getting geo-tagged information from photos for blogging]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging"><![CDATA[


&lt;p&gt;
I am kind of late to this game, but recently I turned on location services for the camera on my phone. That means the location of the photo is stored in the photo, and we can use that to create urls to the photo location in a map for example. While traveling, I thought this would be a good application for org-mode to add functionality to documents with photos in them, e.g. to be able to click on them to see where they are from, or to automate creation of html pages with links to maps, etc. In this post I explore some ways to achieve those ideas. What I would like is a custom org link that shows me a thumbnail of the image, and which exports to show the image in an html file with a link to a pin on Google maps.
&lt;/p&gt;

&lt;p&gt;
So, let's dig in. Imagemagick provides an identify command that can extract the information stored in the images. Here we consider just the GPS information. I some pictures on a recent vacation, and one is unimaginatively named IMG_1759.JPG. Let's see where it was taken.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;identify -verbose IMG_1759.JPG | grep GPS
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSAltitude:&lt;/td&gt;
&lt;td class="org-left"&gt;14426/387&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSAltitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDateStamp:&lt;/td&gt;
&lt;td class="org-left"&gt;2018:06:30&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDestBearing:&lt;/td&gt;
&lt;td class="org-left"&gt;11767/80&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDestBearingRef:&lt;/td&gt;
&lt;td class="org-left"&gt;T&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSImgDirection:&lt;/td&gt;
&lt;td class="org-left"&gt;11767/80&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSImgDirectionRef:&lt;/td&gt;
&lt;td class="org-left"&gt;T&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSInfo:&lt;/td&gt;
&lt;td class="org-left"&gt;1632&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLatitude:&lt;/td&gt;
&lt;td class="org-left"&gt;22/1,&lt;/td&gt;
&lt;td class="org-left"&gt;11/1,&lt;/td&gt;
&lt;td class="org-left"&gt;614/100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLatitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;N&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLongitude:&lt;/td&gt;
&lt;td class="org-left"&gt;159/1,&lt;/td&gt;
&lt;td class="org-left"&gt;40/1,&lt;/td&gt;
&lt;td class="org-left"&gt;4512/100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLongitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;W&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSSpeed:&lt;/td&gt;
&lt;td class="org-left"&gt;401/100&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSSpeedRef:&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSTimeStamp:&lt;/td&gt;
&lt;td class="org-left"&gt;3/1,&lt;/td&gt;
&lt;td class="org-left"&gt;44/1,&lt;/td&gt;
&lt;td class="org-left"&gt;3900/100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The interpretation here is that I took that photo at latitude 22° 11' 6.14" N, and longitude 159° 40' 45.12" W. Evidently I was moving at 4.01 in some unit; I can confirm that I was at least moving, I was on a ship when I took that picture, and it was moving.
&lt;/p&gt;

&lt;p&gt;
According to &lt;a href="http://alvarestech.com/temp/routeconverter/RouteConverter/navigation-formats/src/main/doc/googlemaps/Google_Map_Parameters.htm"&gt;this&lt;/a&gt; you can make a url to a Google maps pin in satellite picture mode that looks like this: &lt;a href="http://maps.google.com/maps?q=22%2011%206.14N,159%2040%2045.12W&amp;amp;t=k"&gt;http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;amp;t=k&lt;/a&gt;. It doesn't seem possible to set the zoom in this url (at least setting the zoom doesn't do anything, and I didn't feel like trying all the other variations that are reported to sometimes work). I guess that is ok for now, it adds some suspense that you have to zoom out to see where the image is in some cases.
&lt;/p&gt;

&lt;p&gt;
We need a little function to take an image file and generate that link. We have to do some algebra on the latitude and longitude which are stored as integers with a division operator. I am going to pipe this through an old unix utility called bc mostly because it is simple, and I won't have to parse it much. bc is a little archaic, you have to set the scale first, which tells it how many decimal places to output. The degrees and minutes are integers, so we will have to deal with that later.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="color: #006FE0;"&gt;echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"scale=2; 614/100"&lt;/span&gt; | bc
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6.14

&lt;/pre&gt;

&lt;p&gt;
Here is our function. I filter out the lines with GPS in them into an a-list. Then, I grab out the specific quantities I want and construct the url. There is a little hackery since it appears the degrees and minutes should be integers in the url formulation used here, so I convert them to numbers and then take the floor. The function is a little longer than I thought, but it isn't too bad I guess. It is a little repetitious, but not enough to justify refactoring.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-map-url&lt;/span&gt; (fname)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((gps-lines (-keep (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (line)
                             (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (s-contains? &lt;span style="color: #008000;"&gt;"GPS"&lt;/span&gt; line) (s-trim line)))
                           (process-lines &lt;span style="color: #008000;"&gt;"identify"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"-verbose"&lt;/span&gt; fname)))
         (gps-alist (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s) (s-split &lt;span style="color: #008000;"&gt;": "&lt;/span&gt; s t))  gps-lines))
         (latitude (mapcar
                    (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                      (s-trim (shell-command-to-string
                               (format &lt;span style="color: #008000;"&gt;"echo \"scale=2;%s\" | bc"&lt;/span&gt; s))))
                    (s-split &lt;span style="color: #008000;"&gt;","&lt;/span&gt; (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLatitude"&lt;/span&gt; gps-alist)))))
         (latitude-ref (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLatitudeRef"&lt;/span&gt; gps-alist)))
         (longitude (mapcar
                     (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                       (s-trim
                        (shell-command-to-string
                         (format &lt;span style="color: #008000;"&gt;"echo \"scale=2;%s\" | bc"&lt;/span&gt; s))))
                     (s-split &lt;span style="color: #008000;"&gt;","&lt;/span&gt; (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLongitude"&lt;/span&gt; gps-alist)))))
         (longitude-ref (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLongitudeRef"&lt;/span&gt; gps-alist))))
    (s-format &lt;span style="color: #008000;"&gt;"http://maps.google.com/maps?q=$0 $1 $2$3,$4 $5 $6$7&amp;amp;t=k"&lt;/span&gt;
              'elt
              (list
               (floor (string-to-number (nth 0 latitude)))
               (floor (string-to-number (nth 1 latitude)))
               (nth 2 latitude)
               latitude-ref
               (floor (string-to-number (nth 0 longitude)))
               (floor (string-to-number (nth 1 longitude)))
               (nth 2 longitude)
               longitude-ref))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
iphoto-map-url

&lt;/pre&gt;

&lt;p&gt;
Here is the function in action, making the url.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(iphoto-map-url &lt;span style="color: #008000;"&gt;"IMG_1759.JPG"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;amp;t=k

&lt;/pre&gt;

&lt;p&gt;
It is kind of slow, but that is because the identify shell command is kind of slow when you run it with the -verbose tag. Now, I would like the following things to happen when I publish it to html:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I want the image wrapped in an img tag inside a figure environment.&lt;/li&gt;
&lt;li&gt;I want the image to by hyperlinked to its location in Google maps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
In the org file, I want a thumbnail overlay on it, so I can see the image while writing, and I want it to toggle like other images. I use an iPhone to take the photos, so we will call it an iphoto link.
&lt;/p&gt;

&lt;p&gt;
Here is the html export function I will use. It is a little hacky that I hard code the width in at 300 pixels, but I didn't feel like figuring out how to get it from an #+attr_html line right now. It probably requires a filter function where you have access to the actual org-elements. I put the url to the image location in a figure caption here.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-export&lt;/span&gt; (path desc backend)
  (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
   ((eq 'html backend)
    (format &lt;span style="color: #008000;"&gt;"&amp;lt;figure&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000;"&gt;&amp;lt;img src=\"%s\" width=\"300\"&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000;"&gt;%s&lt;/span&gt;
&lt;span style="color: #008000;"&gt;&amp;lt;/figure&amp;gt;"&lt;/span&gt;
            path
            (format &lt;span style="color: #008000;"&gt;"&amp;lt;figcaption&amp;gt;%s &amp;lt;a href=\"%s\"&amp;gt;map&amp;lt;/a&amp;gt;&amp;lt;/figcaption&amp;gt;"&lt;/span&gt;
                    (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; desc &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
                    (iphoto-map-url path))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
iphoto-export

&lt;/pre&gt;

&lt;p&gt;
Ok, the last detail I want is to put an image overlay on my new link so I can see it. I want this to work with org-toggle-inline-images so I can turn the images on and off like regular image links with C-c C-x C-v. This function creates overlays as needed, and ties into the org-inline-image-overlays so they get deleted on toggling. We have to advise the display function to redraw these, which we clumsily do by restarting the org font-lock machinery which will redraw the thumbnails from the activate-func property of the links. I also hard code the thumbnail width in this function, when it could be moved out to a variable or attribute.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-thumbnails&lt;/span&gt; (start end imgfile bracketp)
  (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; bracketp
    (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt;
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;it is an image&lt;/span&gt;
           (org-string-match-p (image-file-name-regexp) imgfile)
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and it exists&lt;/span&gt;
           (f-exists? imgfile)
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and there is no overlay here.&lt;/span&gt;
           (not (ov-at start)))
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; img (create-image (expand-file-name imgfile)
                              'imagemagick nil &lt;span style="color: #006FE0;"&gt;:width&lt;/span&gt; 300
                              &lt;span style="color: #006FE0;"&gt;:background&lt;/span&gt; &lt;span style="color: #008000;"&gt;"lightgray"&lt;/span&gt;))
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; ov (make-overlay start end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
                   (list
                    `(&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
                       (org-display-inline-remove-overlay ,ov t ,start ,end))))
      (&lt;span style="color: #0000FF;"&gt;push&lt;/span&gt; ov org-inline-image-overlays))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-redraw-thumbnails&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  (org-restart-font-lock))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this redisplays these thumbnails on image toggling&lt;/span&gt;
(advice-add 'org-display-inline-images &lt;span style="color: #006FE0;"&gt;:after&lt;/span&gt; 'iphoto-redraw-thumbnails)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we define the link with a follow, export, tooltip and activate-func (which puts the overlay on).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"iphoto"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (browse-url (iphoto-map-url path)))
 &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; 'iphoto-export
 &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Click me to see where this photo is on a map."&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:activate-func&lt;/span&gt; 'iphoto-thumbnails)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
So finally, here is the mysterious image.
&lt;/p&gt;


&lt;p&gt;
&lt;figure&gt;
&lt;img src="/media/IMG_1759.JPG" width="300"&gt;
&lt;figcaption&gt; &lt;a href="http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;t=k"&gt;map&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;


&lt;p&gt;
Now, in org-mode, I see the image in an overlay, and I can toggle it on and off. If I click on the image, it opens a browser to Google maps with a pin at the spot I took it. When I export it, it wraps the image in a &amp;lt;figure&amp;gt; tag, and puts a url in the caption to the map. If you click on it, and zoom out, you will see this is a picture of the Nāpali Coast on Kauai in Hawaii, and I was in fact out at sea when I took the picture. It was spectacular. Here is another one. This one is a little more obvious with the zoom. Here, I was on land. Since this link is bracketed, it does not show the overlay however in the org-file.
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src="/media/IMG_1749.JPG" width="300"&gt;
&lt;figcaption&gt;Another vacation picture, this time with a caption. &lt;a href="http://maps.google.com/maps?q=21 57 37.01N,159 21 6.72W&amp;t=k"&gt;map&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
Overall, this was easier than I expected. It might be faster to outsource reading the exif data to some dedicate library, perhaps in python that would return everything you want in an easy to parse json data structure. The speed of computing the url is only annoying when you export or click on the links though.
&lt;/p&gt;

&lt;p&gt;
I didn't build in any error handling, e.g. if you do this on a photo with no GPS data it will probably not handle it gracefully. I also haven't tested this on any other images, e.g. south of the equator, from other cameras, etc. I assume this exif data is pretty standard, but it is a wild world out there&amp;#x2026; It would still be nice to find a way to get a string representing the nearest known location somehow, that would help the caption be more useful.
&lt;/p&gt;

&lt;p&gt;
There is one little footnote to speak of, and that is I had to do a little hackery to get this to work with my blog machinery. You can see what it is in the org-source, I buried it in a noexport subheading, because it isn't that interesting in the grand scheme of things. It was just necessary because I export these org-files to blogofile, which then builds the html pages, instead of just exporting them. The images have to be copied to a source directory, and paths changed in the html to point to them. See, boring stuff. Otherwise, the code above should be fine for regular org and html files! Now, my vacation is over so it is time to get back to work.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2018 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.1.13&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Literate programming with python doctests]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2018/05/17/Literate-programming-with-python-doctests" />
    <id>http://jkitchin.github.io/blog/2018/05/17/Literate-programming-with-python-doctests</id>
    <updated>2018-05-18T15:07:13Z</updated>
    <published>2018-05-17T16:41:19Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <category scheme="http://jkitchin.github.io/blog" term="noweb" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Literate programming with python doctests]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2018/05/17/Literate-programming-with-python-doctests"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org91f890f"&gt;1. Add a way to run the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4759a84"&gt;2. Tangle the file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8727607"&gt;3. Run the tests&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5a82a2f"&gt;4. The noweb doctest block&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
On the org-mode mailing list we had a nice discussion about using noweb and org-mode in literate programming. The results of that discussion were blogged about &lt;a href="http://kdr2.com/tech/emacs/1805-approach-org-ref-code-to-text.html"&gt;here&lt;/a&gt;. I thought of a different application of this for making &lt;a href="https://pymotw.com/3/doctest/"&gt;doctests&lt;/a&gt; in Python functions. I have to confess I have never liked these because I have always thought they were a pain to write since you basically have to put code and results into a docstring. The ideas developed in the discussion above led me to think of a new way to write these that seems totally reasonable.
&lt;/p&gt;

&lt;p&gt;
The idea is just to put noweb placeholders in the function docstring for the doctests. The placeholders will be expanded when you tangle the file, and they will get their contents from other src-blocks where you have written and run examples to test them.
&lt;/p&gt;

&lt;p&gt;
This video might make the rest of this post easier to follow:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/u8CWbedVV9Y" frameborder="0" allow="autoplay; encrypted-media" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
I will illustrate the idea using org-mode and the ob-ipython I have in scimax. The defaults of my ob-ipython setup are not useful for this example because it puts the execution count and mime types of output in the output. These are not observed in a REPL, and so we turn this off by setting these variables.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; ob-ipython-suppress-execution-count t
      ob-ipython-show-mime-types nil)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, we make an example function that takes a single argument and returns one divided by that argument. This block is runnable, and the function is then defined in the jupyter kernel. The docstring contains several noweb references to doctest blocks we define later. For now, they don't do anything. See &lt;a href="#org5a82a2f"&gt;The noweb doctest block&lt;/a&gt; section for the block that is used to expand these. This block also has a tangle header which indicates the file to tangle the results to. When I run this block, it is sent to a Jupyter kernel and saved in memory for use in subsequent blocks.
&lt;/p&gt;

&lt;p&gt;
Here is the block with no noweb expansion. Note that this is easier to read in the original org source than it is to read in the published blog format.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;func&lt;/span&gt;(a):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #036A07;"&gt;"""A function to divide one by a.&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &amp;lt;&amp;lt;doctest("doctest-1")&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &amp;lt;&amp;lt;doctest("doctest-2")&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   &amp;lt;&amp;lt;doctest("doctest-3")&amp;gt;&amp;gt;&lt;/span&gt;

&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   Returns: 1 / a.&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;&lt;span style="color: #036A07;"&gt;   """&lt;/span&gt;
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; 1 / a

&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, we can write a series of named blocks that define various tests we might want to use as doctests. You can run these blocks here, and verify they are correct. Later, when we tangle the document, these will be incorporated into the tangled file in the docstring we defined above.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython" id="org4eaeeaf"&gt;func(5) == 0.2
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
True

&lt;/pre&gt;



&lt;p&gt;
This next test will raise an Exception, and we just run it to make sure it does.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython" id="org560fcaf"&gt;func(0)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

ZeroDivisionErrorTraceback (most recent call last)
&amp;lt;ipython-input-6-ba0cd5a88f0a&amp;gt; in &amp;lt;module&amp;gt;()
----&amp;gt; 1 func(0)

&amp;lt;ipython-input-1-eafd354a3163&amp;gt; in func(a)
     18     Returns: 1 / a.
     19     """
---&amp;gt; 20     return 1 / a

ZeroDivisionError: division by zero

&lt;/pre&gt;



&lt;p&gt;
This is just a doctest with indentation to show how it is used.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython" id="org968debf"&gt;&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;range&lt;/span&gt;(1, 4):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(func(i))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
1.0
0.5
0.3333333333333333


&lt;/pre&gt;



&lt;p&gt;
That concludes the examples I want incorporated into the doctests. Each one of these blocks has a name, which is used as an argument to the noweb references in the function docstring.
&lt;/p&gt;

&lt;div id="outline-container-org91f890f" class="outline-2"&gt;
&lt;h2 id="org91f890f"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Add a way to run the tests&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
This is a common idiom to enable easy running of the doctests. This will get tangled out to the file.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;__name__&lt;/span&gt; == &lt;span style="color: #008000;"&gt;"__main__"&lt;/span&gt;:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; doctest
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   doctest.testmod()
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org4759a84" class="outline-2"&gt;
&lt;h2 id="org4759a84"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Tangle the file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
So far, the Python code we have written only exists in the org-file, and in memory. Tangling is the extraction of the code into a code file.
&lt;/p&gt;

&lt;p&gt;
We run this command, which extracts the code blocks marked for tangling, and expands the noweb references in them.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-babel-tangle)
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;test.py&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is what we get:
&lt;/p&gt;

&lt;pre class="example"&gt;
def func(a):
    """A function to divide one by a.

    &amp;gt;&amp;gt;&amp;gt; func(5) == 0.2
    True

    &amp;gt;&amp;gt;&amp;gt; func(0)
    Traceback (most recent call last):
    ZeroDivisionError: division by zero

    &amp;gt;&amp;gt;&amp;gt; for i in range(1, 4):
    ...     print(func(i))
    1.0
    0.5
    0.3333333333333333


    Returns: 1 / a.
    """
    return 1 / a

if __name__ == "__main__":
    import doctest
    doctest.testmod()

&lt;/pre&gt;

&lt;p&gt;
That looks like a reasonable python file. You can see the doctest blocks have been inserted into the docstring, as desired. The proof of course is that we can run these doctests, and use the python module. We show that next.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org8727607" class="outline-2"&gt;
&lt;h2 id="org8727607"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Run the tests&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Now, we can check if the tests pass in a fresh run (i.e. not using the version stored in the jupyter kernel.) The standard way to run the doctests is like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;python test.py -v
&lt;/pre&gt;
&lt;/div&gt;




&lt;p&gt;
Well, that's it! It worked fine. Now we have a python file we can import and reuse, with some doctests that show how it works. For example, here it is in a small Python script.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-python"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; test &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; func
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(func(3))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.3333333333333333

&lt;/pre&gt;



&lt;p&gt;
There are surely some caveats to keep in mind here. This was just a simple proof of concept idea that isn't tested beyond this example. I don't know how many complexities would arise from more complex doctests. But, it seems like a good idea to continue pursuing if you like using doctests, and like using org-mode and interactive/literate programming techniques.
&lt;/p&gt;

&lt;p&gt;
It is definitely an interesting way to use noweb to build up better code files in my opinion.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5a82a2f" class="outline-2"&gt;
&lt;h2 id="org5a82a2f"&gt;&lt;a id="ID-D4437A03-A9D0-4B6D-B254-5F03CFB25F95"&gt;&lt;/a&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; The noweb doctest block&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
These blocks are used in the noweb expansions. Each block takes a variable which is the name of a block. This block grabs the body of the named src block and formats it as if it was in a REPL.
&lt;/p&gt;

&lt;p&gt;
We also grab the results of the named block and format it for the doctest. We use a heuristic to detect Tracebacks and modify the output to be consistent with it. In that case we assume the relevant Traceback is on the last line.
&lt;/p&gt;

&lt;p&gt;
Admittedly, this does some fragile feeling things, like trimming whitespace here and there to remove blank lines, and quoting quotes (which was not actually used in this example), and removing the ": " pieces of ob-ipython results. Probably other ways of running the src-blocks would not be that suitable for this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="org52486c2"&gt;(org-babel-goto-named-src-block name)
(&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((src (s-trim-right (org-element-property &lt;span style="color: #006FE0;"&gt;:value&lt;/span&gt; (org-element-context))))
       (src-lines (split-string src &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;))
       body result)
  (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; body
        (s-trim-right
         (s-concat &lt;span style="color: #008000;"&gt;"&amp;gt;&amp;gt;&amp;gt; "&lt;/span&gt; (car src-lines) &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;
                   (s-join &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                                          (concat &lt;span style="color: #008000;"&gt;"... "&lt;/span&gt; s))
                                        (cdr src-lines))))))
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;now the results&lt;/span&gt;
  (org-babel-goto-named-result name)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((result (org-element-context)))
    (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; result
          (&lt;span style="color: #0000FF;"&gt;thread-last&lt;/span&gt;
              (buffer-substring (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-begin&lt;/span&gt; result)
                                (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-end&lt;/span&gt; result))
            (s-trim)
            &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;remove ": " from beginning of lines&lt;/span&gt;
            (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"^: *"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
            &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;quote quotes&lt;/span&gt;
            (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"\\\""&lt;/span&gt; &lt;span style="color: #008000;"&gt;"\\\\\""&lt;/span&gt;)))
    (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (string-match &lt;span style="color: #008000;"&gt;"Traceback"&lt;/span&gt; result)
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; result (format
                    &lt;span style="color: #008000;"&gt;"Traceback (most recent call last):\n%s"&lt;/span&gt;
                    (car (last (split-string result &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt;))))))
    (concat body &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; result)))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2018 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2018/05/17/Literate-programming-with-python-doctests.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.1.13&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Making it easier to extend the export of org-mode links with generic functions]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2018/05/09/Making-it-easier-to-extend-the-export-of-org-mode-links-with-generic-functions" />
    <id>http://jkitchin.github.io/blog/2018/05/09/Making-it-easier-to-extend-the-export-of-org-mode-links-with-generic-functions</id>
    <updated>2018-05-09T19:49:14Z</updated>
    <published>2018-05-09T19:49:14Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Making it easier to extend the export of org-mode links with generic functions]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2018/05/09/Making-it-easier-to-extend-the-export-of-org-mode-links-with-generic-functions"><![CDATA[


&lt;p&gt;
I am a big fan of org-mode links. Lately, I have had a need to modify how some links are exported, e.g. defining new exports for different backends, or fine-tuning a particular backend. This can be difficult, depending on how the link was set up. Here is a typical setup I am used to using, where the different options for the backends are handled in a conditional statement in a single function. I will just use a link that just serves to illustrate the issues here. These links are just sytactic sugar for markup, they don't do anything else. We start with an example that just converts text to italic text for different backends like html or latex.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;italic-link-export&lt;/span&gt; (path desc backend)
  (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
   ((eq 'html backend)
    (format &lt;span style="color: #008000;"&gt;"&amp;lt;em&amp;gt;%s&amp;lt;/em&amp;gt;"&lt;/span&gt; path))
   ((eq 'latex backend)
    (format &lt;span style="color: #008000;"&gt;"\\textit{%s}"&lt;/span&gt; path))
   &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;fall-through case for everything else&lt;/span&gt;
   (t
    path)))

(org-link-set-parameters &lt;span style="color: #008000;"&gt;"italic"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; 'italic-link-export)
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;:export&lt;/td&gt;
&lt;td class="org-left"&gt;italic-link-export&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-export-string-as &lt;span style="color: #008000;"&gt;"italic:text"&lt;/span&gt; 'html t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;p&amp;gt;
&amp;lt;em&amp;gt;text&amp;lt;/em&amp;gt;&amp;lt;/p&amp;gt;

&lt;/pre&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-export-string-as &lt;span style="color: #008000;"&gt;"italic:text"&lt;/span&gt; 'latex t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
\textit{text}

&lt;/pre&gt;

&lt;p&gt;
This falls through though to the default case.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-md&lt;/span&gt;)
(org-export-string-as &lt;span style="color: #008000;"&gt;"italic:text"&lt;/span&gt; 'md t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

# Table of Contents



text


&lt;/pre&gt;

&lt;p&gt;
The point I want to make here is that this is not easy to extend as a user. You have to either modify the italic-link-export function, advise it, or monkey-patch it. None of these are especially nice.
&lt;/p&gt;

&lt;p&gt;
I could define italic-link-export in a way that it retrieves the function to use from an alist or hash-table using the backend, but then you have to do two things to modify the behavior: define a backend specific function &lt;i&gt;and&lt;/i&gt; register it in the lookup variable. It is also possible to just look up a function by a derived symbol, e.g. using fboundp, and then using funcall to execute it. This looks something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;a user definable function for exporting to latex&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;italic-link-export-latex&lt;/span&gt; (path desc backend)
  (format &lt;span style="color: #008000;"&gt;"\\textit{%s}"&lt;/span&gt; path))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;generic export function that looks up functions or defaults to&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;italic-link-exporter&lt;/span&gt; (path desc backend)
  &lt;span style="color: #036A07;"&gt;"Run `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;italic-link-export-BACKEND&lt;/span&gt;&lt;span style="color: #036A07;"&gt;' if it exists, or return path."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((func (intern-soft (format &lt;span style="color: #008000;"&gt;"italic-link-export-%s"&lt;/span&gt; backend))))
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (fboundp func)
        (funcall func path desc backend)
      path)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This has some indirection, but allows you to just define new functions to add new export backends, or replace single backend exports. It isn't bad, but there is room for improvement.
&lt;/p&gt;

&lt;p&gt;
In this &lt;a href="https://github.com/jkitchin/org-ref/issues/492#issuecomment-387806180"&gt;comment&lt;/a&gt; in org-ref, I saw a new opportunity to address this issue using generic functions in elisp! The idea is to define a generic function that handles the general export case, and then define additional functions for each specific backend based on the signature of the export function. I will switch to bold markup for this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;cl-defgeneric&lt;/span&gt; &lt;span style="color: #006699;"&gt;bold-link-export&lt;/span&gt; (path desc backend)
 &lt;span style="color: #036A07;"&gt;"Generic function to export a bold link."&lt;/span&gt;
 path)

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this one runs when the backend is equal to html&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;cl-defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;bold-link-export&lt;/span&gt; ((path t) (desc t) (backend (eql html)))
 (format &lt;span style="color: #008000;"&gt;"&amp;lt;b&amp;gt;%s&amp;lt;/b&amp;gt;"&lt;/span&gt; path))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this one runs when the backend is equal to latex&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;cl-defmethod&lt;/span&gt; &lt;span style="color: #006699;"&gt;bold-link-export&lt;/span&gt; ((path t) (desc t) (backend (eql latex)))
 (format &lt;span style="color: #008000;"&gt;"\\textit{%s}"&lt;/span&gt; path))

(org-link-set-parameters &lt;span style="color: #008000;"&gt;"bold"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; 'bold-link-export)
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;:export&lt;/td&gt;
&lt;td class="org-left"&gt;bold-link-export&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here it is in action:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-export-string-as &lt;span style="color: #008000;"&gt;"some bold:text"&lt;/span&gt; 'html t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;p&amp;gt;
some &amp;lt;b&amp;gt;text&amp;lt;/b&amp;gt;&amp;lt;/p&amp;gt;

&lt;/pre&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-export-string-as &lt;span style="color: #008000;"&gt;"some bold:text"&lt;/span&gt; 'latex t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This uses the generic function.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;ox-md&lt;/span&gt;)
(org-export-string-as &lt;span style="color: #008000;"&gt;"some bold:text"&lt;/span&gt; 'md t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;

# Table of Contents



some text


&lt;/pre&gt;

&lt;p&gt;
The syntax for defining the generic function is pretty similar to a regular function. The specific methods are a little different since they have to provide the specific "signature" that triggers each method. Here we only differentiate on the type of the backend. It is nice these are all separate functions though. It makes it trivial to add new ones, and less intrusive to replace in my opinion.
&lt;/p&gt;

&lt;p&gt;
Generic functions have many other potential applications to replace functions that use lots of conditions to control flow, with a fall-through option at the end. You can learn more about them here: &lt;a href="https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Functions.html"&gt;https://www.gnu.org/software/emacs/manual/html_node/elisp/Generic-Functions.html&lt;/a&gt;. There is a lot more to them than I have illustrated here.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2018 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2018/05/09/Making-it-easier-to-extend-the-export-of-org-mode-links-with-generic-functions.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.1.13&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Adding keymaps to src blocks via org-font-lock-hook]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/06/10/Adding-keymaps-to-src-blocks-via-org-font-lock-hook" />
    <id>http://jkitchin.github.io/blog/2017/06/10/Adding-keymaps-to-src-blocks-via-org-font-lock-hook</id>
    <updated>2017-06-12T11:28:50Z</updated>
    <published>2017-06-10T15:27:07Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Adding keymaps to src blocks via org-font-lock-hook]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/06/10/Adding-keymaps-to-src-blocks-via-org-font-lock-hook"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org49daca5"&gt;1. Update&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org004cb53"&gt;2. Update #2&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I had an idea to use custom keymaps in src-blocks. For example, you could then use lispy directly in your org-files without entering org-special-edit, or the elpy key-bindings in python blocks. There are other solutions I have seen, e.g. polymode, that claim to do this. You might guess that if they worked, I would not be writing this! There was some nice discussion about this idea on the org-mode mailing list, and Nicolas Goaziou pointed out this might be accomplished with the org-font-lock-hook.
&lt;/p&gt;

&lt;p&gt;
You can check out the video here:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/a2jHqB1qWiY" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
It was relatively easy to figure out how to do this. Keymaps can be added to regions during font-lock, so I just had to hook into the org-mode font lock system with a function to find the src blocks and add the keymap as a text-property. That took three steps:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Define the keymaps to use. I use an a-list of (language . map) for this.&lt;/li&gt;
&lt;li&gt;Define the font-lock function. This will add the keymap properties to src-blocks.&lt;/li&gt;
&lt;li&gt;Define a minor mode to toggle this feature on and off.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here is the definition of the keymaps. Generally I just copy the mode-map I want and then add some things to them. For example sometimes it is still a good idea to jump into the org-special-edit mode. For example, if you try to use a command in a Python block to send the buffer to the repl while in org-mode you are sure to get an error! You might also want to add the C-c C-e export command if you use that a lot. An alternative approach, of course, is to copy the org-map and add additional bindings to it. The choice is up to you.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;lispy&lt;/span&gt;)
(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;elpy&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; scimax-src-block-keymaps
      `((&lt;span style="color: #008000;"&gt;"ipython"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap
                                  `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                  org-mode-map)))
                        &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;In org-mode I define RET so we f&lt;/span&gt;
                        (define-key map (kbd &lt;span style="color: #008000;"&gt;"&amp;lt;return&amp;gt;"&lt;/span&gt;) 'newline)
                        (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                        map))
        (&lt;span style="color: #008000;"&gt;"python"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap
                                 `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                 org-mode-map)))
                       &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;In org-mode I define RET so we f&lt;/span&gt;
                       (define-key map (kbd &lt;span style="color: #008000;"&gt;"&amp;lt;return&amp;gt;"&lt;/span&gt;) 'newline)
                       (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                       map))
        (&lt;span style="color: #008000;"&gt;"emacs-lisp"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap `(,lispy-mode-map
                                                            ,emacs-lisp-mode-map
                                                            ,outline-minor-mode-map)
                                                          org-mode-map)))
                           (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                           map))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next we define the function that will apply the keymap to each src block. The keymaps are only applied when they are defined in the variable above. This function is derived from org-fontify-meta-lines-and-blocks-1.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-add-keymap-to-src-blocks&lt;/span&gt; (limit)
  &lt;span style="color: #036A07;"&gt;"Add keymaps to src-blocks defined in `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;scimax-src-block-keymaps&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((case-fold-search t)
        lang)
    (&lt;span style="color: #0000FF;"&gt;while&lt;/span&gt; (re-search-forward org-babel-src-block-regexp limit t)
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((lang (match-string 2))
            (beg (match-beginning 0))
            (end (match-end 0)))
        (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (assoc (org-no-properties lang) scimax-src-block-keymaps)
            (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt;
              (add-text-properties
               beg end `(local-map ,(cdr (assoc
                                          (org-no-properties lang)
                                          scimax-src-block-keymaps))))
              (add-text-properties
               beg end `(cursor-sensor-functions
                         ((&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (win prev-pos sym)
                            &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;This simulates a mouse click and makes a menu change&lt;/span&gt;
                            (org-mouse-down-mouse nil)))))))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here we create an advice to trick any functions that need to know the major mode. We only apply the spoof if we are in org-mode and in a src block though. Otherwise we call the original function. So far lispy&amp;#x2013;eval is the only function I have needed it for. This might be a general strategy though to do other things like narrow to the src-block, or even go into special edit mode temporarily if there are commands that require it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-spoof-mode&lt;/span&gt; (orig-func &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style="color: #036A07;"&gt;"Advice function to spoof commands in org-mode src blocks.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;It is for commands that depend on the major mode. One example is&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;`&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;lispy--eval&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (org-in-src-block-p)
      (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((major-mode (intern (format &lt;span style="color: #008000;"&gt;"%s-mode"&lt;/span&gt; (first (org-babel-get-src-block-info))))))
        (apply orig-func args))
    (apply orig-func args)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
We define a minor mode so we can toggle this on and off. Here we add the function to the org-font-lock-hook and advise the lispy&amp;#x2013;eval function. I had to add the font-lock-function to the end of the org-font-lock hook for some reason, and also add local-map as an extra-managed property so it would be removed when we toggle it off.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;define-minor-mode&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-src-keymap-mode&lt;/span&gt;
  &lt;span style="color: #036A07;"&gt;"Minor mode to add mode keymaps to src-blocks."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:init-value&lt;/span&gt; nil
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; scimax-src-keymap-mode
      (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt;
        (add-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks t)
        (add-to-list 'font-lock-extra-managed-props 'local-map)
        (add-to-list 'font-lock-extra-managed-props 'cursor-sensor-functions)
        (advice-add 'lispy--eval &lt;span style="color: #006FE0;"&gt;:around&lt;/span&gt; 'scimax-spoof-mode)
        (cursor-sensor-mode +1))
    (remove-hook 'org-font-lock-hook #'scimax-add-keymap-to-src-blocks)
    (advice-remove 'lispy--eval 'scimax-spoof-mode)
    (cursor-sensor-mode -1))
  (font-lock-fontify-buffer))

(add-hook 'org-mode-hook (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; ()
                           (scimax-src-keymap-mode +1)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That is it! I am pretty sure this is a good idea. It helps a lot when you are writing a lot of short code blocks and near equal amounts of text (like in this blog post). It also helps write the code since many things like indentation, parentheses, etc. are automatically handled. That is what I used to go into special-edit mode all the time for!
&lt;/p&gt;

&lt;p&gt;
I have not used this long enough to know if it causes any other surprises. If you try it and find any, leave a comment!
&lt;/p&gt;

&lt;div id="outline-container-org49daca5" class="outline-2"&gt;
&lt;h2 id="org49daca5"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Update&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
It turns out you can have the best of all the worlds by combining keymaps. The make-composed-keymap creates a new keymap that combines a keymaps and falls through to a parent keymap. So here we use that to combine several keymaps, falling through to org-mode. The only subtlety I have come across is that I remapped &amp;lt;return&amp;gt; in orgmode to scimax/org-return, and not all modes define it, so I redefine it in some places to just be newline. Also to keep C-c C-c for executing the block, I add that back too.
&lt;/p&gt;

&lt;p&gt;
I use a few maps here, and some of them seem to just add menus that are only active when your cursor is in the block. Pretty handy!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; scimax-src-block-keymaps
      `((&lt;span style="color: #008000;"&gt;"ipython"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap
                                  `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                  org-mode-map)))
                        &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;In org-mode I define RET so we f&lt;/span&gt;
                        (define-key map (kbd &lt;span style="color: #008000;"&gt;"&amp;lt;return&amp;gt;"&lt;/span&gt;) 'newline)
                        (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                        map))
        (&lt;span style="color: #008000;"&gt;"python"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap
                                 `(,elpy-mode-map ,python-mode-map ,pyvenv-mode-map)
                                 org-mode-map)))
                       &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;In org-mode I define RET so we f&lt;/span&gt;
                       (define-key map (kbd &lt;span style="color: #008000;"&gt;"&amp;lt;return&amp;gt;"&lt;/span&gt;) 'newline)
                       (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                       map))
        (&lt;span style="color: #008000;"&gt;"emacs-lisp"&lt;/span&gt; . ,(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((map (make-composed-keymap `(,lispy-mode-map
                                                            ,emacs-lisp-mode-map
                                                            ,outline-minor-mode-map)
                                                          org-mode-map)))
                           (define-key map (kbd &lt;span style="color: #008000;"&gt;"C-c C-c"&lt;/span&gt;) 'org-ctrl-c-ctrl-c)
                           map))))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org004cb53" class="outline-2"&gt;
&lt;h2 id="org004cb53"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Update #2&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
The previous version had some issues where it would only add a keymap to the first block. The code in this post now addresses that and uses cursor-sensor-functions to make sure we change key map on entering and leaving blocks. That might mean you need an emacs of at least version 25 to use this. I guess it will work with an earlier version, but the cursor-sensor-functions might get ignored. You might have to comment out the cursor-sensor-mode line
&lt;/p&gt;

&lt;p&gt;
Thanks to those brave people alpha-testing this and helping refine the idea!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/06/10/Adding-keymaps-to-src-blocks-via-org-font-lock-hook.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.7&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Org-mode and ipython enhancements in scimax]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/05/26/Org-mode-and-ipython-enhancements-in-scimax" />
    <id>http://jkitchin.github.io/blog/2017/05/26/Org-mode-and-ipython-enhancements-in-scimax</id>
    <updated>2017-05-26T16:54:16Z</updated>
    <published>2017-05-26T16:54:16Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="ipython" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Org-mode and ipython enhancements in scimax]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/05/26/Org-mode-and-ipython-enhancements-in-scimax"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org696d7c2"&gt;1. Some convenience functions&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgef414e8"&gt;2. ob-ipython-inspect works&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgd62ef75"&gt;3. Getting selective output from Ipython&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org5cac271"&gt;4. Where was that error?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org3ebd0a8"&gt;5. Asynchronous Ipython&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
We have made some improvements to using Ipython in org-mode in the past including:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/29/ob-ipython-and-inline-figures-in-org-mode/"&gt;Inline figures&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks/"&gt;Export to Jupyter notebooks&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Today I will talk about a few new features and improvements I have introduced to scimax for using org-mode and Ipython together.
&lt;/p&gt;

&lt;p&gt;
The video for this post might be more obvious than the post:
&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/dMira3QsUdg" frameborder="0" allowfullscreen&gt;&lt;/iframe&gt;

&lt;div id="outline-container-org696d7c2" class="outline-2"&gt;
&lt;h2 id="org696d7c2"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Some convenience functions&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
There are a few nice shortcuts in the Jupyter notebook. Now we have some convenient commands in scimax to mimic those. My favorites are adding cells above or below the current cell. You can insert a new src block above the current one with (M-x &lt;code&gt;org-babel-insert-block&lt;/code&gt;). You can use a prefix arg to insert it below the current block.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;code&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;below&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;some code&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I am particularly fond of splitting a large block into two smaller blocks. Use (M-x &lt;code&gt;org-babel-split-src-block&lt;/code&gt;) to do that and leave the point in the upper block. Use a prefix arg to leave the point in the lower block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;lots of code in large block&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Even more code&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;The end of the long block&lt;/span&gt;
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
You can execute all the blocks up to the current point with (M-x &lt;code&gt;org-babel-execute-to-point&lt;/code&gt;).
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgef414e8" class="outline-2"&gt;
&lt;h2 id="orgef414e8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; ob-ipython-inspect works&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
In the original ob-ipython I found that ob-ipython-inspect did not work unless you were in special edit mode. That is too inconvenient. I modified a few functions to work directly from the org-buffer. I bind this to M-. in org-mode.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Compute areas and colors&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;N&lt;/span&gt; = 150
&lt;span style="color: #BA36A5;"&gt;r&lt;/span&gt; = 2 * np.random.rand(N)
&lt;span style="color: #BA36A5;"&gt;theta&lt;/span&gt; = 2 * np.pi * np.random.rand(N)
&lt;span style="color: #BA36A5;"&gt;area&lt;/span&gt; = 200 * r**2
&lt;span style="color: #BA36A5;"&gt;colors&lt;/span&gt; = theta

&lt;span style="color: #BA36A5;"&gt;ax&lt;/span&gt; = plt.subplot(111, projection=&lt;span style="color: #008000;"&gt;'polar'&lt;/span&gt;)
&lt;span style="color: #BA36A5;"&gt;c&lt;/span&gt; = ax.scatter(theta, r, c=colors, s=area, cmap=&lt;span style="color: #008000;"&gt;'hsv'&lt;/span&gt;, alpha=0.75)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
&amp;lt;matplotlib.figure.Figure at 0x114ded710&amp;gt;
&lt;img src="/media/ob-ipython-1758dfdd7a96829c50791c7cc9a39f3a.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orgd62ef75" class="outline-2"&gt;
&lt;h2 id="orgd62ef75"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Getting selective output from Ipython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Out of the box Ipython returns a lot of results. This block, for example returns a plain text, image and latex result as output.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; sympy &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; *
&lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;commenting out init_printing() results in no output&lt;/span&gt;
init_printing()

var(&lt;span style="color: #008000;"&gt;'x y'&lt;/span&gt;)
x**2 + y
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
 2
x  + y
&lt;img src="/media/ob-ipython-da6fb3a34919a4f694cfaae45b6f0868.png"&gt; 
&lt;/p&gt;


&lt;p&gt;
We can select which one we want with a new header argument :ob-ipython-results. For this block you can give it the value of text/plain, text/latex or image/png.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;var(&lt;span style="color: #008000;"&gt;'x y'&lt;/span&gt;)
x**2 + y
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
 2
x  + y
&lt;/p&gt;

&lt;p&gt;
Or to get the image:
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;var(&lt;span style="color: #008000;"&gt;'x y'&lt;/span&gt;)
x**2 + y
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-da6fb3a34919a4f694cfaae45b6f0868.png"&gt; 
&lt;/p&gt;


&lt;p&gt;
This shows up with &lt;a href="https://emacs.stackexchange.com/questions/33005/python-org-mode-babel-output-column-headers-misaligned/33016#33016"&gt;pandas too&lt;/a&gt;. This block creates a table of data and then shows the first 5 rows. Ipython returns both plain text and html here.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pandas &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pd
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; datetime &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; dt

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;makeSim&lt;/span&gt;(nHosps, nPatients):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt; = pd.DataFrame()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'patientid'&lt;/span&gt;] = &lt;span style="color: #006FE0;"&gt;range&lt;/span&gt;(nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'hospid'&lt;/span&gt;] = np.random.randint(0, nHosps, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'sex'&lt;/span&gt;] = np.random.randint(0, 2, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'age'&lt;/span&gt;] = np.random.normal(65,18, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'race'&lt;/span&gt;] = np.random.randint(0, 4, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'cptCode'&lt;/span&gt;] = np.random.randint(1, 100, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'rdm30d'&lt;/span&gt;] = np.random.uniform(0, 1, nPatients) &amp;lt; 0.1
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'mort30d'&lt;/span&gt;] = np.random.uniform(0, 1, nPatients) &amp;lt; 0.2
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'los'&lt;/span&gt;] = np.random.normal(8, 2, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; df

&lt;span style="color: #BA36A5;"&gt;discharges&lt;/span&gt; = makeSim(50, 10000)
discharges.head()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
   patientid  hospid  sex        age  race  cptCode rdm30d mort30d        los
0          0      10    1  64.311947     0        8  False   False   8.036793
1          1       6    0  82.951484     1       73   True   False   7.996024
2          2      27    1  53.064501     3       95  False   False   9.015144
3          3      37    0  64.799128     0       93  False   False  10.099032
4          4      46    0  99.111394     2       25  False   False  11.711427
&lt;/p&gt;
&lt;div&gt;
&lt;table border="1" class="dataframe"&gt;
  &lt;thead&gt;
    &lt;tr style="text-align: right;"&gt;
      &lt;th&gt;&lt;/th&gt;
      &lt;th&gt;patientid&lt;/th&gt;
      &lt;th&gt;hospid&lt;/th&gt;
      &lt;th&gt;sex&lt;/th&gt;
      &lt;th&gt;age&lt;/th&gt;
      &lt;th&gt;race&lt;/th&gt;
      &lt;th&gt;cptCode&lt;/th&gt;
      &lt;th&gt;rdm30d&lt;/th&gt;
      &lt;th&gt;mort30d&lt;/th&gt;
      &lt;th&gt;los&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;th&gt;0&lt;/th&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;64.311947&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;8.036793&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;1&lt;/th&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;82.951484&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;73&lt;/td&gt;
      &lt;td&gt;True&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;7.996024&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;2&lt;/th&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;27&lt;/td&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;53.064501&lt;/td&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;95&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;9.015144&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;3&lt;/th&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;37&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;64.799128&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;93&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;10.099032&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;th&gt;4&lt;/th&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;46&lt;/td&gt;
      &lt;td&gt;0&lt;/td&gt;
      &lt;td&gt;99.111394&lt;/td&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;25&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;False&lt;/td&gt;
      &lt;td&gt;11.711427&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;


&lt;p&gt;
We can use the header to select only the plain text output!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pandas &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; pd
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; datetime &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; dt

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;makeSim&lt;/span&gt;(nHosps, nPatients):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt; = pd.DataFrame()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'patientid'&lt;/span&gt;] = &lt;span style="color: #006FE0;"&gt;range&lt;/span&gt;(nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'hospid'&lt;/span&gt;] = np.random.randint(0, nHosps, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'sex'&lt;/span&gt;] = np.random.randint(0, 2, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'age'&lt;/span&gt;] = np.random.normal(65,18, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'race'&lt;/span&gt;] = np.random.randint(0, 4, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'cptCode'&lt;/span&gt;] = np.random.randint(1, 100, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'rdm30d'&lt;/span&gt;] = np.random.uniform(0, 1, nPatients) &amp;lt; 0.1
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'mort30d'&lt;/span&gt;] = np.random.uniform(0, 1, nPatients) &amp;lt; 0.2
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;df&lt;/span&gt;[&lt;span style="color: #008000;"&gt;'los'&lt;/span&gt;] = np.random.normal(8, 2, nPatients)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; df

&lt;span style="color: #BA36A5;"&gt;discharges&lt;/span&gt; = makeSim(50, 10000)
discharges.head()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
   patientid  hospid  sex        age  race  cptCode rdm30d mort30d        los
0          0      21    0  73.633836     1       38  False   False   7.144019
1          1      16    1  67.518804     3       23  False   False   3.340534
2          2      15    0  44.139033     0        8  False   False   9.258706
3          3      29    1  45.510276     2        5  False   False  10.590245
4          4       7    0  52.974924     2        4  False    True   5.811064
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org5cac271" class="outline-2"&gt;
&lt;h2 id="org5cac271"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Where was that error?&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
A somewhat annoying feature of running cells in org-mode is when there is an exception there has not been a good way to jump to the line that caused the error to edit it. The lines in the src block are not numbered, so in a large block it can be tedious to find the line. In scimax, when you get an exception it will number the lines in the src block, and when you press q in the exception traceback buffer it will jump to the line in the block where the error occurred.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(1)
&lt;span style="color: #8D8D84;"&gt;#&lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;raise Exception('Here')&lt;/span&gt;
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
1
2
&lt;/p&gt;



&lt;p&gt;
If you don't like the numbers add this to your init file:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; ob-ipython-number-on-exception nil)
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org3ebd0a8" class="outline-2"&gt;
&lt;h2 id="org3ebd0a8"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Asynchronous Ipython&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
I have made a few improvements to the asynchronous workflow in Ipython. We now have a calculation queue, so you can use C-c C-c to execute several blocks in a row, and they will run asynchronously in the order you ran them. While they are running you can continue using Emacs, e.g. writing that paper, reading email, checking RSS feeds, tetris, &amp;#x2026; This also lets you run all the blocks up to the current point (M-x &lt;code&gt;org-babel-execute-ipython-buffer-to-point-async&lt;/code&gt;) or the whole buffer (of Ipython) blocks asynchronously (M-x &lt;code&gt;org-babel-execute-ipython-buffer-async&lt;/code&gt;).
&lt;/p&gt;

&lt;p&gt;
To turn this on by default put this in your init file:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; org-babel-async-ipython t)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This requires all src blocks to have a name, and running the block will give it a name if you have not named the block. By default we use human-readable names. While the block is running, there will be a link indicating it is running. You can click on the link to cancel it. Running subsequent blocks will queue them to be run when the first block is done.
&lt;/p&gt;

&lt;p&gt;
Here is an example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython" id="orgb3ddac3"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; time
time.sleep(5)
&lt;span style="color: #BA36A5;"&gt;a&lt;/span&gt; = 5
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'done'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython" id="org5b7e30b"&gt;&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(3 * a)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
15
&lt;/p&gt;




&lt;p&gt;
Occasionally you will run into an issue. You can clear the queue with &lt;code&gt;org-babel-async-ipython-clear-queue&lt;/code&gt;.&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/05/26/Org-mode-and-ipython-enhancements-in-scimax.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A new org-mode exporter to Word for scimax]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax" />
    <id>http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax</id>
    <updated>2017-04-15T16:21:23Z</updated>
    <published>2017-04-15T16:19:05Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="export" />
    <summary type="html"><![CDATA[A new org-mode exporter to Word for scimax]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax"><![CDATA[


&lt;p&gt;
I am continuing to chip away to getting a reasonable export behavior for org-mode to MS Word. I have previously made some progress with Pandoc &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/01/29/Export-org-mode-to-docx-with-citations-via-pandoc/"&gt;here&lt;/a&gt; and &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/06/11/ox-pandoc-org-mode-+-org-ref-to-docx-with-bibliographies/"&gt;here&lt;/a&gt;, but those solutions never stuck with me. So here is another go. Here I leverage Pandoc again, but use a path through LaTeX to get citations without modifying the org-ref cite link syntax. The code for this can be found here: &lt;a href="https://github.com/jkitchin/scimax/blob/master/ox-word.el"&gt;https://github.com/jkitchin/scimax/blob/master/ox-word.el&lt;/a&gt;. The gist is you use org-ref like you always do, and you specify the bibliography style for Pandoc like this:
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-15-04-2017-time-16-06-53.png"&gt;
&lt;/p&gt;

&lt;p&gt;
You can download other csl files at &lt;a href="https://www.zotero.org/styles"&gt;https://www.zotero.org/styles&lt;/a&gt;. Then you can simply export the org-doc to a Word document with the key-binding C-c C-e w p.
&lt;/p&gt;

&lt;p&gt;
Here is an example document to illustrate the exporter. I have written about data sharing in catalysis &lt;a class='org-ref-reference' href="#kitchin-2015-examp"&gt;kitchin-2015-examp&lt;/a&gt; and surface science &lt;a class='org-ref-reference' href="#kitchin-2015-data-surfac-scien"&gt;kitchin-2015-data-surfac-scien&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
Here is an example source block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

plt.plot([1, 2, 3, 4, 5, 6])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/ob-ipython-b8591826ba9e316738705d03264316a5.png"&gt;
&lt;/p&gt;

&lt;p&gt;
See Ref. &lt;a href="#fig:line"&gt;fig:line&lt;/a&gt; for example. These do not work. That might require additional pre-processing to replace them with numbers.
&lt;/p&gt;

&lt;p&gt;
Here is the Word document that is generated: &lt;a href="/media/2017-04-15.docx"&gt;2017-04-15.docx&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
As a penultimate result it might be ok. The references are reasonably formatted, but not compatible with Endnote, or other bibliography manager software. There are still some issues with Figure numbering and cross-references, but it is not too bad. The main benefit of this seems to be that one source generates HTML and the Word document.
&lt;/p&gt;

&lt;p&gt;

&lt;h1 class='org-ref-bib-h1'&gt;Bibliography&lt;/h1&gt;
&lt;ul class='org-ref-bib'&gt;&lt;li&gt;&lt;a id="kitchin-2015-examp"&gt;[kitchin-2015-examp] Kitchin, Examples of Effective Data Sharing in Scientific Publishing, &lt;i&gt;ACS Catalysis&lt;/i&gt;, &lt;b&gt;5(6)&lt;/b&gt;, 3894-3899 (2015). &lt;a href=" https://doi.org/10.1021/acscatal.5b00538 "&gt;link&lt;/a&gt;. &lt;a href="https://doi.org/10.1021/acscatal.5b00538"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id="kitchin-2015-data-surfac-scien"&gt;[kitchin-2015-data-surfac-scien] "John Kitchin", Data Sharing in Surface Science, &lt;i&gt;"Surface Science "&lt;/i&gt;, &lt;b&gt;647&lt;/b&gt;, 103-107 (2016). &lt;a href="http://www.sciencedirect.com/science/article/pii/S0039602815001326"&gt;link&lt;/a&gt;. &lt;a href="https://doi.org/10.1016/j.susc.2015.05.007"&gt;doi&lt;/a&gt;.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/15/A-new-org-mode-exporter-to-Word-for-scimax.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;
]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Autoformatting ordinal numbers and fractions in orgmode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode" />
    <id>http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode</id>
    <updated>2017-04-11T15:05:56Z</updated>
    <published>2017-04-11T15:05:56Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Autoformatting ordinal numbers and fractions in orgmode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode"><![CDATA[


&lt;p&gt;
MS Word has a &lt;i&gt;few&lt;/i&gt; things I like. One of them is the ability to autoformat things to make an ordinal number string like 1st to the superscripted version 1&lt;sup&gt;st&lt;/sup&gt; while you type or a 1/2 to ½.  I thought it would be pretty easy to implement that for org-mode. It turns out it was not so easy!
&lt;/p&gt;

&lt;p&gt;
There does not appear to be a way to specify a regexp pattern as an abbreviation, or an abbrev that starts with a number. What we need for ordinal numbers is to recognize a sequence of numbers followed by "st", "nd", "rd" or "th" followed by a space or punctuation, and then superscript the letters. In case you didn't want the replacement to occur, you should be able to undo it and get back the original string. This addition was a little hard won, so I am sharing the lessons here.
&lt;/p&gt;

&lt;p&gt;
The logic I used is to put a function in the post-self-insert-hook. The function only works in org-mode, when not in a codeblock and when looking back at a regexp that matches a pattern to be replaced. Getting it to undo was trickier than expected. Eventually I worked out that you put an undo boundary in place before the change, and then it seems like you can undo the changes. I created a minor mode so it is easy to toggle this on and off.
&lt;/p&gt;

&lt;p&gt;
Here is the implementation:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-ordinals&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats ordinal numbers."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-ordinals&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand ordinal words to superscripted versions in org-mode.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;1st to 1^{st}.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;2nd to 2^{nd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;3rd to 3^{rd}&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;4th to 4^{th}"&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-ordinals
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?1:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[0-9]+&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?2:&lt;/span&gt;&lt;span style="color: #008000;"&gt;st&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;nd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;rd&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;th&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match &lt;span style="color: #008000;"&gt;"\\1^{\\2}"&lt;/span&gt; nil nil nil 3))))


(&lt;span style="color: #0000FF;"&gt;defcustom&lt;/span&gt; &lt;span style="color: #BA36A5;"&gt;scimax-autoformat-fractions&lt;/span&gt; t
  &lt;span style="color: #036A07;"&gt;"Determines if scimax autoformats fractions."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:group&lt;/span&gt; 'scimax)


(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat-fractions&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Expand fractions to take up space."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; scimax-autoformat-fractions
             (eq major-mode 'org-mode)
             (not (org-in-src-block-p))
             (looking-back &lt;span style="color: #008000;"&gt;"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?3:&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;lt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;1/2&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;3/4&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\&amp;gt;&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(?:&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:punct:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;|&lt;/span&gt;&lt;span style="color: #008000;"&gt;[[:space:]]&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
                           (line-beginning-position)))
    (undo-boundary)
    (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt;
      (replace-match (cdr (assoc (match-string 3) '((&lt;span style="color: #008000;"&gt;"1/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#188;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"1/2"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#189;"&lt;/span&gt;)
                                                    (&lt;span style="color: #008000;"&gt;"3/4"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"&amp;#190;"&lt;/span&gt;))))
                     nil nil nil 3))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-org-autoformat&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Autoformat functions."&lt;/span&gt;
  (scimax-org-autoformat-ordinals)
  (scimax-org-autoformat-fractions))

(&lt;span style="color: #0000FF;"&gt;define-minor-mode&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax-autoformat-mode&lt;/span&gt;
  &lt;span style="color: #036A07;"&gt;"Toggle `&lt;/span&gt;&lt;span style="color: #D0372D;"&gt;scimax-autoformat-mode&lt;/span&gt;&lt;span style="color: #036A07;"&gt;'.  Converts 1st to 1^{st} as you type."&lt;/span&gt;
  &lt;span style="color: #006FE0;"&gt;:init-value&lt;/span&gt; nil
  &lt;span style="color: #006FE0;"&gt;:lighter&lt;/span&gt; (&lt;span style="color: #008000;"&gt;" om"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; scimax-ordinal-mode
      (add-hook 'post-self-insert-hook #'scimax-org-autoformat nil 'local)
    (remove-hook 'post-self-insert-hook #'scimax-org-autoformat 'local)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is now a feature in scimax. This marks the 500&lt;sup&gt;th&lt;/sup&gt; blog post! That is ½ way to 1000. At the current rate of posting, it will be at least 5 years until I hit that!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/11/Autoformatting-ordinal-numbers-and-fractions-in-orgmode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[A better return in org-mode]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode" />
    <id>http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode</id>
    <updated>2017-04-20T09:19:56Z</updated>
    <published>2017-04-09T10:56:42Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[A better return in org-mode]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/04/09/A-better-return-in-org-mode"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org774898d"&gt;1. a subheading&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org4f302f8"&gt;2. another Subheading&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
Over on &lt;a href="http://emacs.stackexchange.com/questions/24574/org-mode-default-to-alt-enter-for-bullets"&gt;Stackoverflow&lt;/a&gt; someone wanted a better return in org-mode. They wanted return to add items in a list (instead of M-Ret). Someone posted a partial solution, and here I improve on it to add new items to lists, new headings after a heading, and new rows to tables. In each case, a double return on an empty item, headline or table row will delete that line, and terminate the list, headlines or table. You can still use M-Ret, and this function falls through to org-return like it did before. You can use a prefix arg to get a regular return if you want one (e.g. you want to press enter on a headline to push it down).
&lt;/p&gt;

&lt;p&gt;
Here is the function. Give it a try. It is a small but helpful addition I think. I have not used it for long, so if you come across issues leave a comment!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;org-inlinetask&lt;/span&gt;)

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;scimax/org-return&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; ignore)
  &lt;span style="color: #036A07;"&gt;"Add new list item, heading or table row with RET.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;A double return on an empty element deletes it.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;Use a prefix arg to get regular RET. "&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt; &lt;span style="color: #008000;"&gt;"P"&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; ignore
      (org-return)
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;

     ((eq 'line-break (car (org-element-context)))
      (org-return-indent))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Open links like usual, unless point is at the end of a line.&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and if at beginning of line, just press enter.&lt;/span&gt;
     ((&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (eq 'link (car (org-element-context))) (not (eolp)))
          (bolp))
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;It doesn't make sense to add headings in inline tasks. Thanks Anders&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;Johansson!&lt;/span&gt;
     ((org-inlinetask-in-task-p)
      (org-return))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;checkboxes too&lt;/span&gt;
     ((org-at-item-checkbox-p)
      (org-insert-todo-heading nil))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;lists end with two blank lines, so we need to make sure we are also not&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;at the beginning of a line to avoid a loop where a new entry gets&lt;/span&gt;
     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;created with only one blank line.&lt;/span&gt;
     ((org-in-item-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;save-excursion&lt;/span&gt; (beginning-of-line) (org-element-property &lt;span style="color: #006FE0;"&gt;:contents-begin&lt;/span&gt; (org-element-context)))
          (org-insert-heading)
        (beginning-of-line)
        (delete-region (line-beginning-position) (line-end-position))
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;org-heading&lt;/span&gt;
     ((org-at-heading-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; (org-element-property &lt;span style="color: #006FE0;"&gt;:title&lt;/span&gt; (org-element-context))))
          (&lt;span style="color: #0000FF;"&gt;progn&lt;/span&gt; (org-end-of-meta-data)
                 (org-insert-heading-respect-content)
                 (outline-show-entry))
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;tables&lt;/span&gt;
     ((org-at-table-p)
      (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (-any?
           (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (x) (not (string= &lt;span style="color: #008000;"&gt;""&lt;/span&gt; x)))
           (nth
            (- (org-table-current-dline) 1)
            (org-table-to-lisp)))
          (org-return)
        &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;empty row&lt;/span&gt;
        (beginning-of-line)
        (&lt;span style="color: #0000FF;"&gt;setf&lt;/span&gt; (buffer-substring
               (line-beginning-position) (line-end-position)) &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
        (org-return)))

     &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;fall-through case&lt;/span&gt;
     (t
      (org-return)))))


(define-key org-mode-map (kbd &lt;span style="color: #008000;"&gt;"RET"&lt;/span&gt;)
  'scimax/org-return)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Here are a few tests:
&lt;/p&gt;


&lt;ol class="org-ol"&gt;
&lt;li&gt;numbered item&lt;/li&gt;
&lt;li&gt;second item
&lt;ol class="org-ol"&gt;
&lt;li&gt;nested number&lt;/li&gt;
&lt;li&gt;second number&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;/ol&gt;


&lt;ul class="org-ul"&gt;
&lt;li&gt;unordered 1&lt;/li&gt;
&lt;li&gt;unordered 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested&lt;/li&gt;
&lt;li&gt;nested 2
&lt;ul class="org-ul"&gt;
&lt;li&gt;nested with link: &lt;a href="http://emacs.stackexchange.com"&gt;http://emacs.stackexchange.com&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;


&lt;ul class="org-ul"&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 1&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 2&lt;/li&gt;
&lt;li class="off"&gt;&lt;code&gt;[&amp;#xa0;]&lt;/code&gt; check 3&lt;/li&gt;
&lt;/ul&gt;


&lt;div class="inlinetask"&gt;
&lt;b&gt;an inline task&lt;/b&gt;&lt;br /&gt;
&lt;p&gt;
With some content
&lt;/p&gt;
&lt;/div&gt;


&lt;div id="outline-container-org774898d" class="outline-2"&gt;
&lt;h2 id="org774898d"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; a subheading&lt;/h2&gt;
&lt;/div&gt;

&lt;div id="outline-container-org4f302f8" class="outline-2"&gt;
&lt;h2 id="org4f302f8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; another Subheading&lt;/h2&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/04/09/A-better-return-in-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks" />
    <id>http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks</id>
    <updated>2017-01-25T08:50:18Z</updated>
    <published>2017-01-21T19:51:23Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="jupyter" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <category scheme="http://jkitchin.github.io/blog" term="python" />
    <summary type="html"><![CDATA[Exporting org-mode to Jupyter notebooks]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orge344b68"&gt;1. Solve a nonlinear problem&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgdcea869"&gt;2. Benefits of export to ipynb&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org26076b0"&gt;3. Limitations&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgfe4c8f7"&gt;4. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I am going to use Jupyter notebooks to teach from this semester. I really dislike preparing notebooks though. A browser is a really poor editor, and I really dislike Markdown. Notebooks do not seem to have any real structure in them, e.g. the collapsible outline that I am used to in org-mode, so for long notebooks, it is difficult to get a sense for the structure. I am anticipating spending up to 80 hours preparing notebooks this semester, so today I worked out some code to export org-mode to an ipython notebook! 
&lt;/p&gt;

&lt;p&gt;
This will let me use the power tools I am accustomed to for the creation of IPython notebooks for my students, and perhaps others who do not use org-mode. 
&lt;/p&gt;

&lt;p&gt;
Jupyter notebooks are just json files, so all we need to do is generate it from an org document. The basic strategy was to build up a lisp data structure that represents the notebook and then just convert that data structure to json. I split the document up into sequential markdown and code cells, and then encode those in the format required for the notebook (json).
&lt;/p&gt;

&lt;p&gt;
So, here is an example of what can be easily written in org-mode, posted to this blog, and exported to an IPython notebook, all from one org-document.
&lt;/p&gt;

&lt;p&gt;
Check out the notebook:  &lt;a href="/media/exporting-orgmode-to-ipynb.ipynb"&gt;exporting-orgmode-to-ipynb.ipynb&lt;/a&gt; . 
&lt;/p&gt;

&lt;div id="outline-container-orge344b68" class="outline-2"&gt;
&lt;h2 id="orge344b68"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Solve a nonlinear problem&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Consider the equation \(x^2 = 4\). Find a solution to it in Python using a nonlinear solver. 
&lt;/p&gt;

&lt;p&gt;
To do that, we need to define an objective function that will be equal to zero at the solution. Here is the function:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(x):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x**2 - 4
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we use fsolve with an initial guess. We get fsolve from &lt;a href="https://docs.scipy.org/doc/scipy-0.18.1/reference/generated/scipy.optimize.fsolve.html#scipy.optimize.fsolve"&gt;scipy.optimize&lt;/a&gt;.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, 3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[ 2.]
&lt;/pre&gt;

&lt;p&gt;
That should have been an obvious answer. The answer is in brackets because fsolve returns an array. In the next block we will unpack the solution into the answer using the comma operator. Also, we can see that using a different guess leads to a different answer. There are, of course, two answers: \(x = \pm 2\)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;ans, = fsolve(objective, -3)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0
&lt;/pre&gt;

&lt;p&gt;
Now you see we get a float answer!
&lt;/p&gt;

&lt;p&gt;
Here are some other ways to get a float:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ans&lt;/span&gt; = fsolve(objective, -3)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(ans))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(ans[0])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
-2.0000000000000084
-2.0
&lt;/pre&gt;

&lt;p&gt;
It is worth noting from the first result that fsolve is iterative and stops when it reaches zero within a tolerance. That is why it is not exactly -2.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgdcea869" class="outline-2"&gt;
&lt;h2 id="orgdcea869"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Benefits of export to ipynb&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;I can use org-mode&lt;/li&gt;
&lt;li&gt;And emacs&lt;/li&gt;
&lt;li&gt;and ipynb for teaching.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The export supports org-markup: &lt;b&gt;bold&lt;/b&gt;, &lt;i&gt;italic&lt;/i&gt;, &lt;span class="underline"&gt;underlined&lt;/span&gt;, and ~~strike~~.
&lt;/p&gt;

&lt;p&gt;
We can use tables:
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;
&lt;caption class="t-above"&gt;&lt;span class="table-number"&gt;Table 1:&lt;/span&gt; A table of squares.&lt;/caption&gt;

&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-right"&gt;x&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;y&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-right"&gt;16&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We can make plots.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 2 * np.pi)

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.cos(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.sin(t)

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'x'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'y'&lt;/span&gt;)
plt.savefig(&lt;span style="color: #008000;"&gt;'circle.png'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/circle.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
Even include HTML:
&amp;lt;font color="red"&amp;gt;Pay special attention to the axis labels!&amp;lt;/font&amp;gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org26076b0" class="outline-2"&gt;
&lt;h2 id="org26076b0"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Limitations&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;ul class="org-ul"&gt;
&lt;li&gt;Only supports iPython blocks&lt;/li&gt;
&lt;li&gt;Does not do inline images in results&lt;/li&gt;
&lt;li&gt;Will not support src-block variables&lt;/li&gt;
&lt;li&gt;Currently only supports vanilla output results&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgfe4c8f7" class="outline-2"&gt;
&lt;h2 id="orgfe4c8f7"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
The code that does this is here: &lt;a href="/media/ox-ipynb.el"&gt;ox-ipynb.el&lt;/a&gt; . After I use it a while I will put it in scimax. There are some tricks in it to fix up some markdown export of latex fragments and links with no descriptions.
&lt;/p&gt;

&lt;p&gt;
I just run this command in Emacs to get the notebook. Even it renders reasonably in the notebook.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(export-ipynb-buffer)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Overall, this looks extremely promising to develop lecture notes and assignments in org-mode, but export them to Ipython notebooks for the students.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/21/Exporting-org-mode-to-Jupyter-notebooks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Find stuff in org-mode anywhere]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere" />
    <id>http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere</id>
    <updated>2017-01-03T14:33:32Z</updated>
    <published>2017-01-03T14:33:32Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="database" />
    <category scheme="http://jkitchin.github.io/blog" term="emacs" />
    <category scheme="http://jkitchin.github.io/blog" term="orgmode" />
    <summary type="html"><![CDATA[Find stuff in org-mode anywhere]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2017/01/03/Find-stuff-in-org-mode-anywhere"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org961d2be"&gt;1. The database design&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbda3471"&gt;2. Querying the link table&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org8284133"&gt;3. Headline queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7d75505"&gt;4. Keyword queries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org08feb51"&gt;5. Full text search&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbb3d71f"&gt;6. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
I use org-mode &lt;i&gt;extensively&lt;/i&gt;. I write scientific papers, keep notes on meetings, write letters of recommendation, notes on scientific articles, keep TODO lists in projects, help files for software, write lecture notes, students send me homework solutions in it, it is a contact database, &amp;#x2026; Some files are on Dropbox, Google Drive, Box, some in git repos, etc. The problem is that leads to org-files everywhere on my hard drive. At this point I have several thousand org-files that span about five years of work.
&lt;/p&gt;

&lt;p&gt;
It is not that easy after a while to find them. Yes there are things like recent-files, bookmarks, counsel-find-file, helm-for-files, counsel/helm-locate, helm/counsel-grep/ag/pt, projectile for searching within a project, a slew of tools to search open buffers, there is &lt;a href="https://www.lesbonscomptes.com/recoll/"&gt;recoll&lt;/a&gt;, etc&amp;#x2026; There are desktop search tools, and of course, good organization habits. Over a five year time span though, these change, and I have yet to find a solution to finding what I want. What about a file I made a year ago that is not in the current directory or this project, and not in my org-agenda-files list? How do I get a dynamic todo list across all these files? Or find all the files that cite a particular bibtex entry, or that were authored by a particular student?
&lt;/p&gt;

&lt;p&gt;
Previously, &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/07/06/Indexing-headlines-in-org-files-with-swish-e-with-laser-sharp-results/"&gt;I indexed org files with Swish-e&lt;/a&gt; to make it easy to search them, with an ability to search just headlines, or paragraphs, etc. The problem with that is the nightly indexing was slow since I basically had to regenerate the database each time due to limitations in Swish-e. Finally I have gotten around to the next iteration of this idea, which is a better database. In this post, I explore using sqlite to store headlines and links in org-files.
&lt;/p&gt;

&lt;p&gt;
The idea is that anytime I open or save &lt;i&gt;any&lt;/i&gt; org file, it will be added/updated in the database. The database will store the headlines and its properties and content, as well as the location and properties of all links and file keywords. That means I should be able to efficiently query all org files I have ever visited to find TODO headlines, tagged headlines, different types of links, etc. Here we try it out and see if it is useful.
&lt;/p&gt;


&lt;div id="outline-container-org961d2be" class="outline-2"&gt;
&lt;h2 id="org961d2be"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; The database design&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
I used &lt;a href="https://github.com/skeeto/emacsql"&gt;emacsql&lt;/a&gt; to create and interact with a sqlite3 database. It is a lispy way to generate SQL queries. I will not talk about the code much here, you can see this version &lt;a href="/media/org-db.el"&gt;org-db.el&lt;/a&gt; . The database design consists of several tables that contain the filenames, headlines, tags, properties, (optionally) headline-content, headline-tags, headline-properties, and links. The lisp code is a work in progress, and not something I use on a daily basis yet. This post is a proof of concept to see how well this approach works. 
&lt;/p&gt;

&lt;p&gt;
I use hooks to update the database when an org-file is opened (only if it is different than what is in the database based on an md5 hash) and when it is saved. Basically, these functions delete the current entries in the database for a file, then use regular expressions to go to each headline or link in the file, and add data back to the database. I found this to be faster than parsing the org-file with org-element especially for large files. Since this is all done by a hook, anytime I open an org-file anywhere it gets added/updated to the database. The performance of this is ok. This approach will not guarantee the database is 100% accurate all the time (e.g. if something modifies the file outside of emacs, like a git pull), but it doesn't need to be. Most of the files do not change often, the database gets updated each time you open a file, and you can always reindex the database from files it knows about. Time will tell how often that seems necessary.
&lt;/p&gt;

&lt;p&gt;
emacsql lets you use lisp code to generate SQL that is sent to the database. Here is an example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql-flatten-sql [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [name] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; main:sqlite_master &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type table)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
SELECT name FROM main.sqlite_master WHERE type = "table";
&lt;/pre&gt;

&lt;p&gt;
There are some nuances, for example, main:sqlite_master gets converted to main.sqlite_master. You use vectors, keywords, and sexps to setup the command. emacsql will turn a name like filename-id into filename_id. It was not too difficulty to figure out, and the author of emacsql was really helpful on a few points. I will be referring to this post in the future to remember some of these nuances!
&lt;/p&gt;

&lt;p&gt;
Here is a list of tables in the database. There are a few primary tables, and then some that store tags, properties, and keywords on the headlines. This is typical of emacsql code; it is a lisp expression that generates SQL.  In this next expression org-db is a variable that stores the database connection created in org-db.el.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [name] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; main:sqlite_master &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type table)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;files&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;tags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;properties&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;keywords&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headlines&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_content&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_segments&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_segdir&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_docsize&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_content_stat&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_tags&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;headline_properties&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;file_keywords&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;links&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is a description of the columns in the files table:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:pragma&lt;/span&gt; (funcall table_info files)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;rowid&lt;/td&gt;
&lt;td class="org-right"&gt;INTEGER&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;filename&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;md5&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
and the headlines table.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:pragma&lt;/span&gt; (funcall table_info headlines)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;rowid&lt;/td&gt;
&lt;td class="org-right"&gt;INTEGER&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;1&lt;/td&gt;
&lt;td class="org-left"&gt;filename_id&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;2&lt;/td&gt;
&lt;td class="org-left"&gt;title&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;3&lt;/td&gt;
&lt;td class="org-left"&gt;level&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;4&lt;/td&gt;
&lt;td class="org-left"&gt;todo_keyword&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;5&lt;/td&gt;
&lt;td class="org-left"&gt;todo_type&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;6&lt;/td&gt;
&lt;td class="org-left"&gt;archivedp&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;7&lt;/td&gt;
&lt;td class="org-left"&gt;commentedp&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;8&lt;/td&gt;
&lt;td class="org-left"&gt;footnote_section_p&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-right"&gt;9&lt;/td&gt;
&lt;td class="org-left"&gt;begin&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;nil&lt;/td&gt;
&lt;td class="org-right"&gt;0&lt;/td&gt;
&lt;td class="org-right"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Tags and properties on a headline are stored in headline-tags and headline-properties. 
&lt;/p&gt;

&lt;p&gt;
The database is not large if all it has is headlines and links (no content). It got up to half a GB with content, and seemed a little slow, so for this post I leave the content out.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;du -hs ~/org-db/org-db.sqlite
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;56M&lt;/td&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/org-db/org-db.sqlite&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we count how many files are in the database. These are just the org-files in my Dropbox folder. There are a lot of them! If I include all the org-files from my research and teaching projects this number grows to about 10,000! You do not want to run org-map-entries on that. Note this also includes all of the org_archive files.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; files])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;1569&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here is the headlines count. You can see there is no chance of remembering where these are because there are so many!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; headlines])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;38587&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And the links. So many links!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;303739&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
That is a surprising number of links. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbda3471" class="outline-2"&gt;
&lt;h2 id="orgbda3471"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Querying the link table&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
Let's see how many are cite links from org-ref there are.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;)])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;14766&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Wow, I find that to also be surprisingly large!  I make a living writing proposals and scientific papers, and I wrote org-ref to make that easier, so maybe it should not be so surprising. We can search the link database for files containing citations of "kitchin-2015-examp" like this.  The links table only stores the filename-id, so we join it with the files table to get useful information. Here we show the list of files that contain a citation of that reference. It is a mix of manuscripts, proposals, presentations, documentation files and notes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [files:filename]
                 &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= links:filename-id files:rowid) 
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;) (like path &lt;span style="color: #008000;"&gt;"%kitchin-2015-examp%"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2015-06-29/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2015-10-10/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2016-03-09/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/Research_Data_Publishing_Paper/manuscript-2016-04-18/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/2015/human-readable-data/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2015-06-29/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2015-10-10/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2016-03-09/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/Research_Data_Publishing_Paper/manuscript-2016-04-18/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/manuscripts/@archive/2015/human-readable-data/manuscript.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/BES-2015/doe-bes-wed-data-briefing/doe-bes-wed-data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/NIST-july-2015/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2015/UD-webinar/ud-webinar.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2016/AICHE/data-sharing/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/meetings/@archive/2016/Spring-ACS/data-sharing/data-sharing.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/projects/DOE-Early-Career/annual-reports/final-report/kitchin-DESC0004031-final-report.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2015/DOE-renewal/proposal-v2.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2015/DOE-renewal/archive/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/DOE-single-atom-alloy/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/MRSEC/MRSEC-IRG-metastable-materials-preproposal/IRG-concept.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/ljaf-open-science/kitchin-proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/nsf-germination/project-description.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/nsf-reu-supplement/project-description.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/CMU/proposals/@archive/2016/proctor-and-gamble-education/proposal.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme-unsrt.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/citeproc/readme-author-year.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/tests/test-1.org&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/kitchingroup/jmax/org-ref/tests/sandbox/elpa/org-ref-20160122.1725/citeproc/readme.org&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Obviously we could use this to generate candidates for something like helm or ivy like this. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(ivy-read &lt;span style="color: #008000;"&gt;"Open: "&lt;/span&gt; (emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [files:filename links:begin]
                                    &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; links &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= links:filename-id files:rowid) 
                                    &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= type &lt;span style="color: #008000;"&gt;"cite"&lt;/span&gt;) (like path &lt;span style="color: #008000;"&gt;"%kitchin-2015-examp%"&lt;/span&gt;))])
          &lt;span style="color: #006FE0;"&gt;:action&lt;/span&gt; '(1 (&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt;
                       (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (c)
                         (find-file (car c))
                         (goto-char (nth 1 c))
                         (org-show-entry)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
/Users/jkitchin/Dropbox/CMU/manuscripts/2015/human-readable-data/manuscript.org
&lt;/pre&gt;

&lt;p&gt;
Now, you can find every org-file containing any bibtex key as a citation. Since SQL is the query language, you should be able to build really sophisticated queries that combine filters for multiple citations, different kinds of citations, etc.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org8284133" class="outline-2"&gt;
&lt;h2 id="org8284133"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Headline queries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Every headline is stored, along with its location, tags and properties. We can use the database to find headlines that are tagged or with certain properties. You can see here I have 293 tags in the database.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; tags])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;293&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we find headlines tagged with electrolyte. I tagged some papers I read with this at some point.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [files:filename headlines:title]
                 &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt; headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-tags &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-tags:headline-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; tags &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= tags:rowid headline-tags:tag-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; files &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= headlines:filename-id files:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (= tags:tag &lt;span style="color: #008000;"&gt;"electrolyte"&lt;/span&gt;) &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/org-mode/prj-doe-early-career.org&lt;/td&gt;
&lt;td class="org-left"&gt;2010 - Nickel-borate oxygen-evolving catalyst that functions under benign conditions&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1971 - A Correlation of the Solution Properties and the  Electrochemical Behavior of the Nickel Hydroxide  Electrode in Binary Aqueous Alkali Hydroxides&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1981 - Studies concerning charged nickel hydroxide electrodes IV. Reversible potentials in LiOH, NaOH, RbOH and CsOH&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1986 - The effect of lithium in preventing iron poisoning in the nickel hydroxide electrode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;/Users/jkitchin/Dropbox/bibliography/notes.org&lt;/td&gt;
&lt;td class="org-left"&gt;1996 - The role of lithium in preventing the detrimental effect of iron on alkaline battery nickel hydroxide electrode: A mechanistic aspect&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Here we see how many entries have an EMAIL property. These could serve as contacts to send email to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [(funcall count)] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
                 &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;) (not (null headline-properties:value)))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;7452&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
If you want to see the ones that match "jkitchin", here they are. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [headlines:title headline-properties:value] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
             headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
             &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
             &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"EMAIL"&lt;/span&gt;) (like headline-properties:value &lt;span style="color: #008000;"&gt;"%jkitchin%"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;John Kitchin&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@andrew.cmu.edu&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;John Kitchin&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@cmu.edu&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Kitchin, John&lt;/td&gt;
&lt;td class="org-left"&gt;jkitchin@andrew.cmu.edu&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;


&lt;p&gt;
Here is a query to find the number of headlines where the deadline matches 2017. Looks like I am already busy!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; (funcall count) &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
             headlines &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; headline-properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (=  headlines:rowid headline-properties:headline-id)
             &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; properties &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= properties:rowid headline-properties:property-id)
             &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"DEADLINE"&lt;/span&gt;) (glob headline-properties:value &lt;span style="color: #008000;"&gt;"*2017*"&lt;/span&gt;))])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;50&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7d75505" class="outline-2"&gt;
&lt;h2 id="org7d75505"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Keyword queries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
We also store file keywords, so we can search on document titles, authors, etc. Here are five documents with titles longer than 35 characters sorted in descending order. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:distinct&lt;/span&gt; [value] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 file-keywords &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; keywords &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= file-keywords:keyword-id keywords:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (&amp;gt; (funcall length value) 35) (= keywords:keyword &lt;span style="color: #008000;"&gt;"TITLE"&lt;/span&gt;))
                 &lt;span style="color: #006FE0;"&gt;:order&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:by&lt;/span&gt; value &lt;span style="color: #006FE0;"&gt;:desc&lt;/span&gt;
                 &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;pycse - Python3 Computations in Science and Engineering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;org-show - simple presentations in org-mode&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;org-mode - A Human Readable, Machine Addressable Approach to Data Archiving and Sharing in Science and Engineering&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;modifying emacs to make typing easier.&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;jmax - John's customizations to maximize Emacs&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
It is possible to search on AUTHOR, and others. My memos have a #+SUBJECT keyword, so I can find memos on a subject. They also use the LATEX_CLASS of cmu-memo, so I can find all of them easily too:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(emacsql org-db [&lt;span style="color: #006FE0;"&gt;:select&lt;/span&gt; [(funcall count)] &lt;span style="color: #006FE0;"&gt;:from&lt;/span&gt;
                 file-keywords &lt;span style="color: #006FE0;"&gt;:inner&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:join&lt;/span&gt; keywords &lt;span style="color: #006FE0;"&gt;:on&lt;/span&gt; (= file-keywords:keyword-id keywords:rowid)
                 &lt;span style="color: #006FE0;"&gt;:where&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= value &lt;span style="color: #008000;"&gt;"cmu-memo"&lt;/span&gt;) (= keywords:keyword &lt;span style="color: #008000;"&gt;"LATEX_CLASS"&lt;/span&gt;))
                 &lt;span style="color: #006FE0;"&gt;:limit&lt;/span&gt; 5])
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-right"&gt;119&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How about that, 119 memos&amp;#x2026; Still it sure is nice to be able to find them.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org08feb51" class="outline-2"&gt;
&lt;h2 id="org08feb51"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Full text search&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
In theory, the database has a table for the headline content, and it should be fully searchable. I found the database got a little sluggish, and nearly 1/2 a GB in size when using it so I am leaving it out for now.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbb3d71f" class="outline-2"&gt;
&lt;h2 id="orgbb3d71f"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
The foundation for something really good is here. It is still a little tedious to wrote the queries with all the table joins, but some of that could be wrapped into a function for a query. I like the lispy style of the queries, although it can be tricky to map all the concepts onto SQL. A function that might wrap this could look like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-db-query (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; (= properties:property &lt;span style="color: #008000;"&gt;"DEADLINE"&lt;/span&gt;) (glob headline-properties:value &lt;span style="color: #008000;"&gt;"*2017*"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is what it would ideally look like using the org tag/property match syntax. Somehow that string would have to get expanded to generate the code above. I do not have a sense for how difficult that would be. It might not be hard with &lt;a href="https://github.com/skeeto/rdp"&gt;a recursive descent parser&lt;/a&gt;, written by the same author as emacsql.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-db-query &lt;span style="color: #008000;"&gt;"DEADLINE={2017}"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The performance is only ok. For large org files there is a notable lag in updating the database, which is notable because while updating, Emacs is blocked. I could try using an idle timer for updates with a queue, or get more clever about when to update. It is not essential that the updates be real-time, only that they are reasonably accurate or done by the time I next search. For now, it is not too annoying though. As a better database, I have had my eye on &lt;a href="https://xapian.org"&gt;xapian&lt;/a&gt; since that is what mu4e (and notmuch) uses. It might be good to have an external library for parsing org-files, i.e. not through emacs, for this. It would certainly be faster. It seems like a big project though, maybe next summer ;)
&lt;/p&gt;

&lt;p&gt;
Another feature this might benefit from is ignore patterns, or some file feature that prevents it from being indexed. For example, I keep an encrypted password file in org-mode, but as soon as I opened it, it got indexed right into the database, in plain text. If you walk your file system, it might make sense to avoid some directories, like .dropbox.cache. Otherwise, this still looks like a promising approach. 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/03/Find-stuff-in-org-mode-anywhere.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
</feed>
