<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2025-06-23T17:29:14Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog" />
  <id>https://kitchingroup.cheme.cmu.edu/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="https://kitchingroup.cheme.cmu.edu/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[Derivatives by FFT]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2013/02/26/Derivatives-by-FFT" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2013/02/26/Derivatives-by-FFT</id>
    <updated>2013-02-27T14:51:24Z</updated>
    <published>2013-02-26T09:00:00Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="differentiation" />
    <summary type="html"><![CDATA[Derivatives by FFT]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2013/02/26/Derivatives-by-FFT"><![CDATA[


&lt;p&gt;

&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; np
&lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #8b0000;"&gt;as&lt;/span&gt; plt

N = 101 &lt;span style="color: #ff0000; font-weight: bold;"&gt;#number of points&lt;/span&gt;
L = 2 * np.pi &lt;span style="color: #ff0000; font-weight: bold;"&gt;#interval of data&lt;/span&gt;

x = np.arange(0.0, L, L/&lt;span style="color: #8b0000;"&gt;float&lt;/span&gt;(N)) &lt;span style="color: #ff0000; font-weight: bold;"&gt;#this does not include the endpoint&lt;/span&gt;

&lt;span style="color: #ff0000; font-weight: bold;"&gt;#add some random noise&lt;/span&gt;
y = np.sin(x) + 0.05 * np.random.random(size=x.shape)
dy_analytical = np.cos(x)

&lt;span style="color: #228b22;"&gt;'''&lt;/span&gt;
&lt;span style="color: #228b22;"&gt;http://sci.tech-archive.net/Archive/sci.math/2008-05/msg00401.html&lt;/span&gt;

&lt;span style="color: #228b22;"&gt;you can use fft to calculate derivatives!&lt;/span&gt;
&lt;span style="color: #228b22;"&gt;'''&lt;/span&gt;

&lt;span style="color: #8b0000;"&gt;if&lt;/span&gt; N % 2 == 0:
    k = np.asarray(&lt;span style="color: #8b0000;"&gt;range&lt;/span&gt;(0, N / 2) + [0] + &lt;span style="color: #8b0000;"&gt;range&lt;/span&gt;(-N / 2 + 1,0))
&lt;span style="color: #8b0000;"&gt;else:&lt;/span&gt;
    k = np.asarray(&lt;span style="color: #8b0000;"&gt;range&lt;/span&gt;(0,(N - 1) / 2) + [0] + &lt;span style="color: #8b0000;"&gt;range&lt;/span&gt;(-(N - 1) / 2, 0))

k *= 2 * np.pi / L

fd = np.real(np.fft.ifft(1.0j * k * np.fft.fft(y)))

plt.plot(x, y, label=&lt;span style="color: #228b22;"&gt;'function'&lt;/span&gt;)
plt.plot(x,dy_analytical,label=&lt;span style="color: #228b22;"&gt;'analytical der'&lt;/span&gt;)
plt.plot(x,fd,label=&lt;span style="color: #228b22;"&gt;'fft der'&lt;/span&gt;)
plt.legend(loc=&lt;span style="color: #228b22;"&gt;'lower left'&lt;/span&gt;)

plt.savefig(&lt;span style="color: #228b22;"&gt;'images/fft-der.png'&lt;/span&gt;)
plt.show()
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;img src="/img/./images/fft-der.png"&gt;&lt;p&gt;
&lt;p&gt;Copyright (C) 2013 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2013/02/26/Derivatives-by-FFT.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;]]></content>
  </entry>
</feed>
