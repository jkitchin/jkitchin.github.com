<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Fri, 13 Sep 2019 13:56:20 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>A cursor goto hydra for emacs</title>
      <link>http://jkitchin.github.io/blog/2015/09/28/A-cursor-goto-hydra-for-emacs</link>
      <pubDate>Mon, 28 Sep 2015 16:38:11 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hydra]]></category>
      <guid isPermaLink="false">REQ67Q6xpYDjjof7YOcjK-HAr28=</guid>
      <description>A cursor goto hydra for emacs</description>
      <content:encoded><![CDATA[



&lt;p&gt;
In the spirit of upping my navigation game, here we examine navigation by search like methods. You probably know about C-s with will search forward for a word, and C-r which will search backwards. This will get you to the start of a word pretty easily. It won't get you into a word though, you have to navigate to that, and it isn't too handy to get to a line, or window, or headline in an org-file. Each of these is an emacs command, which as with navigation I don't always remember. Today, we build a hydra to make this easy too.
&lt;/p&gt;

&lt;p&gt;
We will use features from &lt;a href="https://github.com/abo-abo/avy"&gt;avy&lt;/a&gt; , and &lt;a href="https://github.com/emacs-helm/helm"&gt;helm&lt;/a&gt; , and some standard emacs features. &lt;code&gt;avy&lt;/code&gt; is pretty neat. It provides an interface to jump to characters, words and subwords by pressing keys. To jump to a character that is visible on the screen, you invoke avy-goto-char and press the character you want to jump to. &lt;code&gt;avy&lt;/code&gt; will overlay a sequence of keys you then type to jump to that character. It might be more convenient to jump to a pair of characters, which you do by invoking avy-goto-char-2. Similarly, there are commands to jump to the beginning of a word, and a subword, both with variations that allow you to specify the beginning letter of the word, or to get overlays on every word.
&lt;/p&gt;

&lt;p&gt;
I spend most of my days in org-files, so I frequently want to jump to an org headline in the current buffer, or some headline in an org-file in my agenda. Helm provides a nice set of functions for this in helm-org-headlines and helm-org-agenda-files-headings. We can also use helm-multi-swoop-org to use the swoop search function in all open org-buffers with helm selection. Within a buffer, you might also use the search forward and backward capabilities, or the more advanced helm-occur or swiper-helm features.
Finally, I may want my cursor to go to another recent file, or open buffer.
&lt;/p&gt;

&lt;p&gt;
The hydra we will develop here puts all of these commands a few keystrokes away, with a hint system to remind you what is possible. In addition to these "goto" commands, I add a character to switch to the navigation hydra we developed in the last &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2015/09/27/Upping-my-Emacs-navigation-game/"&gt;post&lt;/a&gt; so I can switch to navigation if I change my mind. I also put two commands to store the current position before the goto command, and to return to that stored position conveniently. I bind this hydra to super-g, because the super key isn't used much on my Mac, and g reminds of "goto". So, here is my hydra code:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defhydra&lt;/span&gt; goto (&lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue &lt;span style="color: #006FE0;"&gt;:hint&lt;/span&gt; nil)
  &lt;span style="color: #008000;"&gt;"&lt;/span&gt;
&lt;span style="color: #008000;"&gt;Goto:&lt;/span&gt;
&lt;span style="color: #008000;"&gt;^Char^              ^Word^                ^org^                    ^search^&lt;/span&gt;
&lt;span style="color: #008000;"&gt;^^^^^^^^---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_c_: 2 chars        _w_: word by char     _h_: headline in buffer  _o_: helm-occur&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_C_: char           _W_: some word        _a_: heading in agenda   _p_: helm-swiper&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_L_: char in line   _s_: subword by char  _q_: swoop org buffers   _f_: search forward&lt;/span&gt;
&lt;span style="color: #008000;"&gt;^  ^                _S_: some subword     ^ ^                      _b_: search backward&lt;/span&gt;
&lt;span style="color: #008000;"&gt;-----------------------------------------------------------------------------------&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_B_: helm-buffers       _l_: avy-goto-line&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_m_: helm-mini          _i_: ace-window&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_R_: helm-recentf&lt;/span&gt;

&lt;span style="color: #008000;"&gt;_n_: Navigate           _._: mark position _/_: jump to mark&lt;/span&gt;
&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
  (&lt;span style="color: #008000;"&gt;"c"&lt;/span&gt; avy-goto-char-2)
  (&lt;span style="color: #008000;"&gt;"C"&lt;/span&gt; avy-goto-char)
  (&lt;span style="color: #008000;"&gt;"L"&lt;/span&gt; avy-goto-char-in-line)
  (&lt;span style="color: #008000;"&gt;"w"&lt;/span&gt; avy-goto-word-1)
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;jump to beginning of some word&lt;/span&gt;
  (&lt;span style="color: #008000;"&gt;"W"&lt;/span&gt; avy-goto-word-0)
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;jump to subword starting with a char&lt;/span&gt;
  (&lt;span style="color: #008000;"&gt;"s"&lt;/span&gt; avy-goto-subword-1)
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;jump to some subword&lt;/span&gt;
  (&lt;span style="color: #008000;"&gt;"S"&lt;/span&gt; avy-goto-subword-0)

  (&lt;span style="color: #008000;"&gt;"l"&lt;/span&gt; avy-goto-line)
  (&lt;span style="color: #008000;"&gt;"i"&lt;/span&gt; ace-window)

  (&lt;span style="color: #008000;"&gt;"h"&lt;/span&gt; helm-org-headlines)
  (&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt; helm-org-agenda-files-headings)
  (&lt;span style="color: #008000;"&gt;"q"&lt;/span&gt; helm-multi-swoop-org)

  (&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt; helm-occur)
  (&lt;span style="color: #008000;"&gt;"p"&lt;/span&gt; swiper-helm)

  (&lt;span style="color: #008000;"&gt;"f"&lt;/span&gt; isearch-forward)
  (&lt;span style="color: #008000;"&gt;"b"&lt;/span&gt; isearch-backward)

  (&lt;span style="color: #008000;"&gt;"."&lt;/span&gt; org-mark-ring-push &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; red)
  (&lt;span style="color: #008000;"&gt;"/"&lt;/span&gt; org-mark-ring-goto &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue)
  (&lt;span style="color: #008000;"&gt;"B"&lt;/span&gt; helm-buffers-list)
  (&lt;span style="color: #008000;"&gt;"m"&lt;/span&gt; helm-mini)
  (&lt;span style="color: #008000;"&gt;"R"&lt;/span&gt; helm-recentf)
  (&lt;span style="color: #008000;"&gt;"n"&lt;/span&gt; hydra-navigate/body))

(global-set-key (kbd &lt;span style="color: #008000;"&gt;"s-g"&lt;/span&gt;) 'goto/body)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
As with the last navigation hydra, this is a pretty massive set of options and takes up some decent screen space at the bottom om my emacs. They are mostly here to remind me that there are better navigation options, and with practice I suspect muscle memory will provide fast navigation tools with more precision and fewer keystrokes than simple navigation.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2015 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2015/09/28/A-cursor-goto-hydra-for-emacs.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Upping my Emacs navigation game</title>
      <link>http://jkitchin.github.io/blog/2015/09/27/Upping-my-Emacs-navigation-game</link>
      <pubDate>Sun, 27 Sep 2015 21:21:51 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hydra]]></category>
      <guid isPermaLink="false">Yyw695E2cnekTlHe0xHuWlrlBL0=</guid>
      <description>Upping my Emacs navigation game</description>
      <content:encoded><![CDATA[



&lt;p&gt;
I have been trying to up my navigation game in Emacs, by which I mean I want to get my cursor where I want it with a minimal number of keystrokes, and preferrably no mouse actions. There are lots of little and big navigations I do a lot:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;forward/backward by a character
&lt;/li&gt;
&lt;li&gt;forward/backward by a word/subword
&lt;/li&gt;
&lt;li&gt;forward/backward by a sentence
&lt;/li&gt;
&lt;li&gt;forward/backward by a line
&lt;/li&gt;
&lt;li&gt;to the beginning and end of a line
&lt;/li&gt;
&lt;li&gt;to the beginning and end of a sentence
&lt;/li&gt;
&lt;li&gt;to the beginning and end of a paragraph
&lt;/li&gt;
&lt;li&gt;to the beginning and end of a page
&lt;/li&gt;
&lt;li&gt;to the beginning and end of a buffer
&lt;/li&gt;
&lt;li&gt;scrolling up/down
&lt;/li&gt;
&lt;li&gt;into another window
&lt;/li&gt;
&lt;li&gt;back and forth to buffers
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Occasionally, I want to save a location so I can easily get back to it. Not all of these are strictly speaking navigation in the usual sense, but they are things I do often enough. There are Emacs commands for all these, and keyboard shortcuts for many of them, but I don't use them often, and as a result I don't remember them either.
&lt;/p&gt;

&lt;p&gt;
Here I develop a &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; that will provide these features. Hydra is a super amazing, menu prompting system that provides hints to remind you of what can be done, and to access it from a character. It is possible to pass numeric and universal arguments to the commands by typing -, a number, or C-u before pressing the character.
&lt;/p&gt;

&lt;p&gt;
I want some commands to be repeatable, which we get with a "red" hydra, and some commands to exit on running, which we get with a "blue" head. So, here is an over-the-top hydra for navigation.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defhydra&lt;/span&gt; hydra-navigate (&lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; red
                          &lt;span style="color: #006FE0;"&gt;:hint&lt;/span&gt; nil)
  &lt;span style="color: #008000;"&gt;"&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_f_: forward-char       _w_: forward-word       _n_: next-line&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_b_: backward-char      _W_: backward-word      _p_: previous-line&lt;/span&gt;
&lt;span style="color: #008000;"&gt;^ ^                     _o_: subword-right      _,_: beginning-of-line&lt;/span&gt;
&lt;span style="color: #008000;"&gt;^ ^                     _O_: subword-left       _._: end-of-line&lt;/span&gt;

&lt;span style="color: #008000;"&gt;_s_: forward sentence   _a_: forward paragraph  _g_: forward page&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_S_: backward sentence  _A_: backward paragraph _G_: backward page&lt;/span&gt;

&lt;span style="color: #008000;"&gt;_h_: helm mini _B_: buffer list _i_: window&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_&amp;lt;left&amp;gt;_: previous buffer   _&amp;lt;right&amp;gt;_: next buffer&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_&amp;lt;up&amp;gt;_: scroll-up           _&amp;lt;down&amp;gt;_: scroll-down&lt;/span&gt;

&lt;span style="color: #008000;"&gt;_[_: backward-sexp _]_: forward-sexp&lt;/span&gt;
&lt;span style="color: #008000;"&gt;_&amp;lt;_ beginning of buffer _&amp;gt;_ end of buffer _m_: set mark _/_: jump to mark&lt;/span&gt;
&lt;span style="color: #008000;"&gt;"&lt;/span&gt;
  (&lt;span style="color: #008000;"&gt;"f"&lt;/span&gt; forward-char)
  (&lt;span style="color: #008000;"&gt;"b"&lt;/span&gt; backward-char)
  (&lt;span style="color: #008000;"&gt;"w"&lt;/span&gt; forward-word)
  (&lt;span style="color: #008000;"&gt;"W"&lt;/span&gt; backward-word)
  (&lt;span style="color: #008000;"&gt;"n"&lt;/span&gt; next-line)
  (&lt;span style="color: #008000;"&gt;"p"&lt;/span&gt; previous-line)
  (&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt; subword-right)
  (&lt;span style="color: #008000;"&gt;"O"&lt;/span&gt; subword-left)
  (&lt;span style="color: #008000;"&gt;"s"&lt;/span&gt; forward-sentence)
  (&lt;span style="color: #008000;"&gt;"S"&lt;/span&gt; backward-sentence)
  (&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt; forward-paragraph)
  (&lt;span style="color: #008000;"&gt;"A"&lt;/span&gt; backward-paragraph)
  (&lt;span style="color: #008000;"&gt;"g"&lt;/span&gt; forward-page)
  (&lt;span style="color: #008000;"&gt;"G"&lt;/span&gt; backward-page)
  (&lt;span style="color: #008000;"&gt;"&amp;lt;right&amp;gt;"&lt;/span&gt; next-buffer)
  (&lt;span style="color: #008000;"&gt;"&amp;lt;left&amp;gt;"&lt;/span&gt; previous-buffer)
  (&lt;span style="color: #008000;"&gt;"h"&lt;/span&gt; helm-mini &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue)
  (&lt;span style="color: #008000;"&gt;"i"&lt;/span&gt; ace-window &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue)
  (&lt;span style="color: #008000;"&gt;"m"&lt;/span&gt; org-mark-ring-push)
  (&lt;span style="color: #008000;"&gt;"/"&lt;/span&gt; org-mark-ring-goto &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue)
  (&lt;span style="color: #008000;"&gt;"B"&lt;/span&gt; helm-buffers-list)
  (&lt;span style="color: #008000;"&gt;"&amp;lt;up&amp;gt;"&lt;/span&gt; scroll-up)
  (&lt;span style="color: #008000;"&gt;"&amp;lt;down&amp;gt;"&lt;/span&gt; scroll-down)
  (&lt;span style="color: #008000;"&gt;"&amp;lt;"&lt;/span&gt; beginning-of-buffer)
  (&lt;span style="color: #008000;"&gt;"&amp;gt;"&lt;/span&gt; end-of-buffer)
  (&lt;span style="color: #008000;"&gt;"."&lt;/span&gt; end-of-line)
  (&lt;span style="color: #008000;"&gt;"["&lt;/span&gt; backward-sexp)
  (&lt;span style="color: #008000;"&gt;"]"&lt;/span&gt; forward-sexp)
  (&lt;span style="color: #008000;"&gt;","&lt;/span&gt; beginning-of-line)
  (&lt;span style="color: #008000;"&gt;"q"&lt;/span&gt; nil &lt;span style="color: #008000;"&gt;"quit"&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue))

(global-set-key (kbd &lt;span style="color: #008000;"&gt;"s-n"&lt;/span&gt;) 'hydra-navigate/body)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
hydra-navigate/body
&lt;/pre&gt;

&lt;p&gt;
I basically like it. The menu is a little on the large side, but it makes for easy modal navigation in a buffer, to other windows, and other buffers. On the whole for moderate cursor movements, this results in basically equal keystrokes. For example, to move 3 characters forward, we have C-f C-f C-f or C-u 3 C-f, or s-n 3 f. The advantage (I think) is a single interface to all these navigation commands with hints on what to do.
&lt;/p&gt;

&lt;p&gt;
There is still another level of navigation, which is related to navigation by searching. That is a whole different level of navigation I will work on another day!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2015 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2015/09/27/Upping-my-Emacs-navigation-game.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Conditional hydra menus</title>
      <link>http://jkitchin.github.io/blog/2015/06/24/Conditional-hydra-menus</link>
      <pubDate>Wed, 24 Jun 2015 07:31:41 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[hydra]]></category>
      <guid isPermaLink="false">ZZdRz0Eq33gTqhYphCP78l-a35c=</guid>
      <description>Conditional hydra menus</description>
      <content:encoded><![CDATA[



&lt;p&gt;
Usually the &lt;a href="https://github.com/abo-abo/hydra"&gt;hydra&lt;/a&gt; menu is hard coded in the defhydra macro. Sometimes, you would like conditional options, that is, depending on some condition we get different options &lt;i&gt;when we run the hydra&lt;/i&gt; and not when it was defined. This is an open &lt;a href="https://github.com/abo-abo/hydra/issues/86"&gt;issue&lt;/a&gt; in hydra. Here we explore a way to achieve that. The idea is to construct the code for the hydra, then eval it, and run the hydra. In this example we make the conditional menu depend on whether we are on an even or odd numbered line. I use the `' syntax for defining the list of code. ` is a variation of ' (quote) that enables you to use the , operator to evaluate that element while in data mode. So, here is our first idea:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;my-hydra-1&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (eval
   `(&lt;span style="color: #0000FF;"&gt;defhydra&lt;/span&gt; my-hydra-1 (&lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue) &lt;span style="color: #008000;"&gt;"My hydra"&lt;/span&gt;
      ,(&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (evenp (line-number-at-pos))
           '(&lt;span style="color: #008000;"&gt;"e"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Even line"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"Even"&lt;/span&gt;)
         '(&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Odd line"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"Odd"&lt;/span&gt;))
      ,(&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; t '(&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"always true"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"always"&lt;/span&gt;))
      &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;This does not work. you must return a legitimate hydra menu item&lt;/span&gt;
      &lt;span style="color: #8D8D84;"&gt;;;      &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;,(when nil '("n" (message-box "never") "never"))&lt;/span&gt;
      ))
  (my-hydra-1/body))

(my-hydra-1)
(my-hydra-1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
my-hydra
&lt;/pre&gt;

&lt;p&gt;
As long as it is not expensive to compute the conditionals, this seems like an easy enough way to get conditional options in a hydra. One limitation of the previous approach is our menu conditionals must return a hydra menu, and not nil. Here is an alternative approach to writing the function that solves the issue of the nil return in the last function. Here we build up the code list using append. It might seem like a macro should be used here, but I have not figured out how to get the macro to run the conditionals at the run-time. Note, we cannot use funcall on the defhydra because that is a macro.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;my-hydra-2&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((conditionals '((&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (evenp (line-number-at-pos))
                            '(&lt;span style="color: #008000;"&gt;"e"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Even second"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"Even"&lt;/span&gt;)
                          '(&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Odd second"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"Odd"&lt;/span&gt;))
                        (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; t '(&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"always true"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"always"&lt;/span&gt;))
                        (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; nil '(&lt;span style="color: #008000;"&gt;"n"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"never"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"never"&lt;/span&gt;)))))
    (eval
     (append
      '(defhydra my-hydra-2 (&lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue) &lt;span style="color: #008000;"&gt;"My hydra"&lt;/span&gt;)
      (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for cond in conditionals
            with result = (eval cond)
            if (eval cond)
            collect (eval cond))))
    (my-hydra-2/body)))

(my-hydra-2)
(my-hydra-2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
That works too. Let us try another type of syntax where the conditional statements have a cons cell with a conditional statement, and a hydra menu option for when the statement is true. This is functionally similar to our first method, but has some advantages in brevity and less quoting. We add a conditional hint here too (at some expense of additional quoting).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;my-hydra-3&lt;/span&gt; ()
  (&lt;span style="color: #0000FF;"&gt;interactive&lt;/span&gt;)
  (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((conditionals
         `(((evenp (line-number-at-pos)) . (&lt;span style="color: #008000;"&gt;"e"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Even second"&lt;/span&gt;) ,(format &lt;span style="color: #008000;"&gt;"Even: %s"&lt;/span&gt; (line-number-at-pos))))
           ((oddp (line-number-at-pos)) . (&lt;span style="color: #008000;"&gt;"o"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"Odd second"&lt;/span&gt;) ,(format &lt;span style="color: #008000;"&gt;"Odd: %s"&lt;/span&gt; (line-number-at-pos))))
           (t . (&lt;span style="color: #008000;"&gt;"a"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"always true"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"always"&lt;/span&gt;))
           (nil . (&lt;span style="color: #008000;"&gt;"n"&lt;/span&gt; (message-box &lt;span style="color: #008000;"&gt;"never"&lt;/span&gt;) &lt;span style="color: #008000;"&gt;"never"&lt;/span&gt;)))))
    (eval
     (append
      '(defhydra my-hydra-3 (&lt;span style="color: #006FE0;"&gt;:color&lt;/span&gt; blue) &lt;span style="color: #008000;"&gt;"My hydra"&lt;/span&gt;)
      (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for cond in conditionals
            if (eval (car  cond))
            collect (cdr cond))))
    (my-hydra-3/body)))

(my-hydra-3)
(my-hydra-3)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
I cannot figure out how to abstract this much further. There is a little redundancy in names, e.g. in the defhydra and at the end, but it is not too bad, which would usually be handled by a macro. I tried some defmacros to try this, but I could not figure out how to get the conditionals to expand at the right times, which is at run time, and not at macro expansion time. I need a macro that generates a function that has the call to defhydra in it! Maybe next year ;)
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2015 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2015/06/24/Conditional-hydra-menus.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>org-mode links meet hydra</title>
      <link>http://jkitchin.github.io/blog/2015/02/22/org-mode-links-meet-hydra</link>
      <pubDate>Sun, 22 Feb 2015 19:06:41 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[hydra]]></category>
      <guid isPermaLink="false">TYEqdqY8zmTBakbJFQgkXPMjC88=</guid>
      <description>org-mode links meet hydra</description>
      <content:encoded><![CDATA[


&lt;p&gt;
I have played with a lot of options to give org-mode links extra functionality. Here are a few of the ideas I have looked at so far.
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;&lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2013/10/21/Enabling-right-clicks-in-org-mode-links/"&gt;Enabling right clicks on links&lt;/a&gt; 
&lt;/li&gt;
&lt;li&gt;A home made minibuffer menu in org-ref
&lt;/li&gt;
&lt;li&gt;A helm buffer in org-ref
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
Here, I want to explore a hydra menu for a link. The idea is pretty simple, we need functions that do something with the link at point, and a hydra interface to call them. This turned out to be a little tricky. I could not get the path from the link in the link lambda function, and we need a way to pass the path to the function. I use a global variable for that. I wish there was another way to do that, but this does actually work. We illustrate it here with a more functional doi link.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;doi-crossref&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Search DOI in CrossRef."&lt;/span&gt;
  (interactive)
  (browse-url
   (format
    &lt;span style="color: #008000;"&gt;"http://search.crossref.org/?q=%s"&lt;/span&gt; *doi-hydra-path*)))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;doi-google-scholar&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Google scholar the doi."&lt;/span&gt;
  (interactive)
  (browse-url
   (format
    &lt;span style="color: #008000;"&gt;"http://scholar.google.com/scholar?q=%s"&lt;/span&gt; *doi-hydra-path*)))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;doi-pubmed&lt;/span&gt; ()
  &lt;span style="color: #036A07;"&gt;"Pubmed the doi."&lt;/span&gt;
  (interactive)
  (browse-url
   (format
    &lt;span style="color: #008000;"&gt;"http://www.ncbi.nlm.nih.gov/pubmed/?term=%s"&lt;/span&gt;
    (url-hexify-string *doi-hydra-path*))))

 (defhydra doi-hydra ()
   &lt;span style="color: #008000;"&gt;"org-ref"&lt;/span&gt;
   (&lt;span style="color: #008000;"&gt;"c"&lt;/span&gt; doi-crossref &lt;span style="color: #008000;"&gt;"Crossref"&lt;/span&gt;)
   (&lt;span style="color: #008000;"&gt;"g"&lt;/span&gt; doi-google-scholar &lt;span style="color: #008000;"&gt;"Google Scholar"&lt;/span&gt;)
   (&lt;span style="color: #008000;"&gt;"p"&lt;/span&gt; doi-pubmed &lt;span style="color: #008000;"&gt;"Pubmed"&lt;/span&gt;))

(org-add-link-type &lt;span style="color: #008000;"&gt;"doi"&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (setq *doi-hydra-path* path) (doi-hydra/body)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;

&lt;col  class="left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="left"&gt;lambda&lt;/td&gt;
&lt;td class="left"&gt;(path)&lt;/td&gt;
&lt;td class="left"&gt;(setq &lt;b&gt;doi-hydra-path&lt;/b&gt; path)&lt;/td&gt;
&lt;td class="left"&gt;(doi-hydra/body)&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
Now for a test, &lt;a href="10.1021/jp047349j"&gt;10.1021/jp047349j&lt;/a&gt;.
&lt;/p&gt;

&lt;p&gt;
It works fine, when you click on a link, you get a minibuffer menu with context hints, and pressing any other key than is defined simply cancels the command.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2015 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2015/02/22/org-mode-links-meet-hydra.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;&lt;p&gt;Org-mode version = 8.2.10&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
