<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2025-10-02T11:27:23Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog" />
  <id>https://kitchingroup.cheme.cmu.edu/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="https://kitchingroup.cheme.cmu.edu/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[Finding similar bibtex entries]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2017/09/16/Finding-similar-bibtex-entries" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2017/09/16/Finding-similar-bibtex-entries</id>
    <updated>2017-09-16T10:00:47Z</updated>
    <published>2017-09-16T10:00:47Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="bibtex" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="similarity" />
    <summary type="html"><![CDATA[Finding similar bibtex entries]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2017/09/16/Finding-similar-bibtex-entries"><![CDATA[


&lt;p&gt;
A common task while writing scientific papers is citing previous research. I use org-ref extensively for that, and it makes it pretty easy to find similar references, e.g. that have common authors, or common keywords. It also lets me find similar articles in Web of Science or Scopus. Suppose that I have cited a particular paper, e.g. e &lt;a class='org-ref-reference' href="#boes-2016-neural-networ"&gt;boes-2016-neural-networ&lt;/a&gt;, and I want to find similar references to it that are &lt;i&gt;already&lt;/i&gt; in my bibtex file, and similar by &lt;i&gt;my definition&lt;/i&gt;. With org-ref I can easily search by keyword or author to find similar entries, but these are limited by what I search for, and they are not sorted. Today, I will explore the first step in a recommender system that calculates similarity, and provides a sorted list of candidates with the most relevant ones first.
&lt;/p&gt;

&lt;p&gt;
The idea is to calculate some measure of similarity between the title of that reference, and the titles of other references in my bibtex file, and then sort them by similarity. This is the reference I want to find similar entries for:
&lt;/p&gt;

&lt;p&gt;
Boes, J. R., Groenenboom, M. C., Keith, J. A., &amp;amp; Kitchin, J. R., Neural network and Reaxff comparison for Au properties, Int. J. Quantum Chem., 116(13), 979–987 (2016).  &lt;a href="https://doi.org/10.1002/qua.25115"&gt;https://doi.org/10.1002/qua.25115&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
The first thing we do is read in our bibtex file, and print a representative entry.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; bibtexparser
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; bibtexparser.bparser &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; BibTexParser

&lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;open&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'/Users/jkitchin/Dropbox/bibliography/references.bib'&lt;/span&gt;) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; bibtex_file:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;parser&lt;/span&gt; = BibTexParser()
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;bib_database&lt;/span&gt; = bibtexparser.load(bibtex_file, parser=parser)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt; = bib_database.entries

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(entries[10])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
{'author': 'Jaan Aarik and Aleks Aidla and V{\\"a}ino Sammelselg and Teet\nUustare', 'title': 'Effect of Growth Conditions on Formation of \\ce{TiO_2}-{II}\nThin Films in Atomic Layer Deposition Process', 'journal': 'Journal of Crystal Growth', 'volume': '181', 'number': '3', 'pages': '259 - 264', 'year': '1997', 'doi': '10.1016/S0022-0248(97)00279-0', 'link': 'http://www.sciencedirect.com/science/article/pii/S0022024897002790', 'issn': '0022-0248', 'ENTRYTYPE': 'article', 'ID': 'aarik-1997-effec-growt'}
&lt;/p&gt;

&lt;p&gt;
Each entry is a dictionary containing the fields and their values. For this exploration, I will only consider similarities between titles. The next step is we find which entry corresponds to the reference we want to find similarities to.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;ids&lt;/span&gt; = [e[&lt;span style="color: #008000;"&gt;'ID'&lt;/span&gt;] &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; e &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; entries]
&lt;span style="color: #BA36A5;"&gt;i&lt;/span&gt; = ids.index(&lt;span style="color: #008000;"&gt;'boes-2016-neural-networ'&lt;/span&gt;)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(entries[i])
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
{'author': 'Jacob R. Boes and Mitchell C. Groenenboom and John A. Keith\nand John R. Kitchin', 'title': 'Neural Network and {Reaxff} Comparison for {Au} Properties', 'journal': 'Int. J. Quantum Chem.', 'volume': '116', 'number': '13', 'pages': '979-987', 'year': '2016', 'doi': '10.1002/qua.25115', 'link': 'https://doi.org/10.1002/qua.25115', 'issn': '1097-461X', 'keyword': 'Kohn-Sham density functional theory, neural networks, reactive\nforce fields, potential energy surfaces, machine learning', 'ENTRYTYPE': 'article', 'ID': 'boes-2016-neural-networ'}
&lt;/p&gt;

&lt;p&gt;
It is best if we make the entry we want to find similarities to the first one, so here we swap the first and i&lt;sup&gt;th&lt;/sup&gt; entries.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;entries[0], &lt;span style="color: #BA36A5;"&gt;entries&lt;/span&gt;[i] = entries[i], entries[0]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Now, we prepare the list of strings to get similarities for.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;titles&lt;/span&gt; = [e.get(&lt;span style="color: #008000;"&gt;'title'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;''&lt;/span&gt;) &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; e &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; entries]
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
We will use &lt;a href="https://en.wikipedia.org/wiki/Tf%E2%80%93idf"&gt;term frequency–inverse document frequency&lt;/a&gt; to get a vector that represents each title, and then use &lt;a href="https://en.wikipedia.org/wiki/Cosine_similarity"&gt;cosine similarity&lt;/a&gt; as a measure of similarity. Here is the place to note that &lt;i&gt;I chose&lt;/i&gt; these, and could choose other ones too. Also, it is worth noting that in this measure of similarity I did &lt;i&gt;not&lt;/i&gt; choose which keywords to measure similarity on.
&lt;/p&gt;

&lt;p&gt;
The functionality for this is provided by &lt;a href="http://scikit-learn.org/stable/"&gt;sklearn&lt;/a&gt;. It has implemented functions for the algorithms above, and in just a few lines of code you get an array of tf-idf features to analyze. The array we get from our vectorizer contains normalized vectors, so we can get the cosine similarity just from a dot product of the vectors. The first row corresponds to the similarity of the first string to all the others. I want them sorted in descending order. The argsort function returns ascending order, so we use a trick to sort the negative of the similarity score which achieves that. There are certainly more advanced treatments of the text we could use by &lt;a href="http://scikit-learn.org/stable/modules/feature_extraction.html#customizing-the-vectorizer-classes"&gt;customizing the vectorizer&lt;/a&gt;, e.g. word stemming, but for now we neglect that.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; sklearn.feature_extraction.text &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; TfidfVectorizer

&lt;span style="color: #BA36A5;"&gt;vectorizer&lt;/span&gt; = TfidfVectorizer(stop_words=&lt;span style="color: #008000;"&gt;'english'&lt;/span&gt;)
&lt;span style="color: #BA36A5;"&gt;X&lt;/span&gt; = vectorizer.fit_transform(titles)

&lt;span style="color: #BA36A5;"&gt;cosine_similarities&lt;/span&gt; = (X * X.T).A[0]

&lt;span style="color: #BA36A5;"&gt;related_docs_indices&lt;/span&gt; = (-cosine_similarities).argsort()

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'The top 10 recommendations for {} are:\n'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(S[0]))
&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; i, j &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;enumerate&lt;/span&gt;(related_docs_indices[1:11]):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'{i}. {ID}: {title}, {author}\n'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(i=i + 1, **entries[j]))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The top 10 recommendations for Neural Network and {Reaxff} Comparison for {Au} Properties are:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;behler-2010-neural: Neural network potential-energy surfaces for atomistic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
simulations, J{\"o}rg Behler
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;boes-2017-neural-networ: Neural Network Predictions of Oxygen Interactions on a Dynamic&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
{Pd} Surface, Jacob R. Boes and John R. Kitchin
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;eshet-2010-ab: Ab Initio Quality Neural-Network Potential for Sodium, Hagai Eshet and Rustam Z. Khaliullin and Thomas D. K{\"u}hne&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
and J{\"o}rg Behler and Michele Parrinello
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;behler-2014-repres-poten: Representing Potential Energy Surfaces By High-Dimensional&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Neural Network Potentials, J Behler
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;behler-2007-gener-neural: Generalized Neural-Network Representation of High-Dimensional&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Potential-Energy Surfaces, J{\"o}rg Behler and Michele Parrinello
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;artrith-2012-high: High-Dimensional Neural Network Potentials for Metal Surfaces:&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
A Prototype Study for Copper, Nongnuch Artrith and J{\"o}rg Behler
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;behler-2015-const: Constructing High-Dimensional Neural Network Potentials: A&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Tutorial Review, J{\"o}rg Behler
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;artrith-2011-high: High-Dimensional Neural-Network Potentials for Multicomponent&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Systems: Applications To Zinc Oxide, Nongnuch Artrith and Tobias Morawietz and J{\"o}rg Behler
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;sosso-2012-neural-gete: Neural Network Interatomic Potential for the Phase Change&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Material \ce{GeTe}, Gabriele C. Sosso and Giacomo Miceli and Sebastiano Caravati
and J{\"o}rg Behler and Marco Bernasconi
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;lorenz-2006-descr: Descriptions of Surface Chemical Reactions Using a Neural&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;
Network Representation of the Potential-Energy Surface, S{\"o}nke Lorenz and Matthias Scheffler and Axel Gross
&lt;/p&gt;

&lt;p&gt;
It is evident that this is showing other references containing the words "neural network"! I guess that is a little disappointing, since these would just as easily been narrowed down in org-ref. On the other hand, they are sorted and grouped, which would not happen in org-ref. This is a comparison of pretty short strings (just the titles), so maybe this would be much more interesting if abstracts were also included. Including authors would give a different set as well (I tried it, and got a bunch of my own references!).
&lt;/p&gt;

&lt;p&gt;
I don't think it would be very difficult to get this into an Emacs selection tool, e.g. helm/ivy. Check this out:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; pycse.lisp

related_docs_indices[1:6].lisp
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;

&lt;/p&gt;

&lt;p&gt;
'(1592 1650 299 1751 103)'
&lt;/p&gt;


&lt;p&gt;
That is a result that can be read directly by lisp, so we could simply write the code above as a shell script that takes an argument, and returns a list of indices to sort the candidates on. The alternative is to implement this in elisp, perhaps via a dynamic module if there is already a good C library for this. My sense is the Python libraries are more advanced in functionality.
&lt;/p&gt;

&lt;p&gt;
This could have a number of other applications. Given some reference content, you could imagine finding emails that are similar to it, finding RSS entries that are similar to it, finding org headlines that are related, similar files, or similarity with any other set of strings that can be gathered, e.g. from Crossref or some other search, etc. I predict there will be more on these topics in the future!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/09/16/Finding-similar-bibtex-entries.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.7&lt;/p&gt;
]]></content>
  </entry>
</feed>
