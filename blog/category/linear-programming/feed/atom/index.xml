<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2018-10-09T13:21:13Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog" />
  <id>http://jkitchin.github.io/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="http://jkitchin.github.io/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>http://jkitchin.github.io/blog</uri>
    </author>
    <title type="html"><![CDATA[Linear programming example with inequality constraints]]></title>
    <link rel="alternate" type="text/html" href="http://jkitchin.github.io/blog/2013/01/31/Linear-programming-example-with-inequality-constraints" />
    <id>http://jkitchin.github.io/blog/2013/01/31/Linear-programming-example-with-inequality-constraints</id>
    <updated>2013-02-27T14:44:03Z</updated>
    <published>2013-01-31T09:00:00Z</published>
    <category scheme="http://jkitchin.github.io/blog" term="linear programming" />
    <category scheme="http://jkitchin.github.io/blog" term="optimization" />
    <summary type="html"><![CDATA[Linear programming example with inequality constraints]]></summary>
    <content type="html" xml:base="http://jkitchin.github.io/blog/2013/01/31/Linear-programming-example-with-inequality-constraints"><![CDATA[


&lt;p&gt;

&lt;a href="http://matlab.cheme.cmu.edu/2011/10/21/linear-programming-example-with-inequality-constraints/" &gt;Matlab post&lt;/a&gt;
&lt;/p&gt;

&lt;p&gt;
adapted from &lt;a href="http://www.matrixlab-examples.com/linear-programming.html" &gt;http://www.matrixlab-examples.com/linear-programming.html&lt;/a&gt; which solves this problem with fminsearch.
&lt;/p&gt;

&lt;p&gt;
Let us suppose that a merry farmer has 75 roods (4 roods = 1 acre) on which to plant two crops: wheat and corn. To produce these crops, it costs the farmer (for seed, water, fertilizer, etc. ) $120 per rood for the wheat, and $210 per rood for the corn. The farmer has $15,000 available for expenses, but after the harvest the farmer must store the crops while awaiting favorable or good market conditions. The farmer has storage space for 4,000 bushels. Each rood yields an average of 110 bushels of wheat or 30 bushels of corn. If the net profit per bushel of wheat (after all the expenses) is $1.30 and for corn is $2.00, how should the merry farmer plant the 75 roods to maximize profit?
&lt;/p&gt;

&lt;p&gt;
Let \(x\) be the number of roods of wheat planted, and \(y\) be the number of roods of corn planted. The profit function is: \( P = (110)($1.3)x + (30)($2)y = 143x + 60y \)
&lt;/p&gt;

&lt;p&gt;
There are some constraint inequalities, specified by the limits on expenses, storage and roodage. They are:
&lt;/p&gt;

&lt;p&gt;
\(\$120x + \$210y &lt;= \$15000\) (The total amount spent cannot exceed the amount the farm has)
&lt;/p&gt;

&lt;p&gt;
\(110x + 30y &lt;= 4000\) (The amount generated should not exceed storage space.)
&lt;/p&gt;

&lt;p&gt;
\(x + y &lt;= 75\) (We cannot plant more space than we have.)
&lt;/p&gt;

&lt;p&gt;
\(0 &lt;= x and 0 &lt;= y \) (all amounts of planted land must be positive.)
&lt;/p&gt;

&lt;p&gt;
To solve this problem, we cast it as a linear programming problem, which minimizes a function f(X) subject to some constraints. We create a proxy function for the negative of profit, which we seek to minimize.
&lt;/p&gt;

&lt;p&gt;
f = -(143*x + 60*y)
&lt;/p&gt;

&lt;div class="org-src-container"&gt;

&lt;pre class="src src-python"&gt;&lt;span style="color: #8b0000;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #8b0000;"&gt;import&lt;/span&gt; fmin_cobyla

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;objective&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'''objective function to minimize. It is the negative of profit,&lt;/span&gt;
&lt;span style="color: #228b22;"&gt;    which we seek to maximize.'''&lt;/span&gt;
    x, y = X
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; -(143*x + 60*y)

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;c1&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'Ensure 120x + 210y &amp;lt;= 15000'&lt;/span&gt;
    x,y = X
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; 15000 - 120 * x - 210*y

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;c2&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'ensure 110x + 30y &amp;lt;= 4000'&lt;/span&gt;
    x,y = X
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; 4000 - 110*x - 30 * y

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;c3&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'Ensure x + y is less than or equal to 75'&lt;/span&gt;
    x,y = X
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; 75 - x - y

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;c4&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'Ensure x &amp;gt;= 0'&lt;/span&gt;
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; X[0]

&lt;span style="color: #8b0000;"&gt;def&lt;/span&gt; &lt;span style="color: #8b2323;"&gt;c5&lt;/span&gt;(X):
    &lt;span style="color: #228b22;"&gt;'Ensure y &amp;gt;= 0'&lt;/span&gt;
    &lt;span style="color: #8b0000;"&gt;return&lt;/span&gt; X[1]

X = fmin_cobyla(objective, x0=[20, 30], cons=[c1, c2, c3, c4, c5])

&lt;span style="color: #8b0000;"&gt;print&lt;/span&gt; &lt;span style="color: #228b22;"&gt;'We should plant {0:1.2f} roods of wheat.'&lt;/span&gt;.format(X[0])
&lt;span style="color: #8b0000;"&gt;print&lt;/span&gt; &lt;span style="color: #228b22;"&gt;'We should plant {0:1.2f} roods of corn'&lt;/span&gt;.format(X[1])
&lt;span style="color: #8b0000;"&gt;print&lt;/span&gt; &lt;span style="color: #228b22;"&gt;'The maximum profit we can earn is ${0:1.2f}.'&lt;/span&gt;.format(-objective(X))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
   Normal return from subroutine COBYLA

   NFVALS =   40   F =-6.315625E+03    MAXCV = 4.547474E-13
   X = 2.187500E+01   5.312500E+01
We should plant 21.88 roods of wheat.
We should plant 53.12 roods of corn
The maximum profit we can earn is $6315.62.
&lt;/pre&gt;

&lt;p&gt;
This code is not exactly the same as the original &lt;a href="http://matlab.cheme.cmu.edu/2011/10/21/linear-programming-example-with-inequality-constraints/" &gt;post&lt;/a&gt;, but we get to the same answer. The linear programming capability in scipy is currently somewhat limited in 0.10. It is a little better in 0.11, but probably not as advanced as Matlab. There are some external libraries available:
&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href="http://abel.ee.ucla.edu/cvxopt/" &gt;http://abel.ee.ucla.edu/cvxopt/&lt;/a&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="http://openopt.org/LP" &gt;http://openopt.org/LP&lt;/a&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Copyright (C) 2013 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;&lt;p&gt;&lt;a href="/org/2013/01/31/Linear-programming-example-with-inequality-constraints.org"&gt;org-mode source&lt;/a&gt;&lt;p&gt;]]></content>
  </entry>
</feed>
