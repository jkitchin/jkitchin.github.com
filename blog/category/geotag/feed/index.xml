<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Sun, 22 Sep 2019 16:59:35 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>Getting geo-tagged information from photos for blogging</title>
      <link>http://jkitchin.github.io/blog/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging</link>
      <pubDate>Sun, 01 Jul 2018 19:17:18 EDT</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[geotag]]></category>
      <guid isPermaLink="false">To7Oj9cQgVbpXvdso0vW9uTFc2o=</guid>
      <description>Getting geo-tagged information from photos for blogging</description>
      <content:encoded><![CDATA[


&lt;p&gt;
I am kind of late to this game, but recently I turned on location services for the camera on my phone. That means the location of the photo is stored in the photo, and we can use that to create urls to the photo location in a map for example. While traveling, I thought this would be a good application for org-mode to add functionality to documents with photos in them, e.g. to be able to click on them to see where they are from, or to automate creation of html pages with links to maps, etc. In this post I explore some ways to achieve those ideas. What I would like is a custom org link that shows me a thumbnail of the image, and which exports to show the image in an html file with a link to a pin on Google maps.
&lt;/p&gt;

&lt;p&gt;
So, let's dig in. Imagemagick provides an identify command that can extract the information stored in the images. Here we consider just the GPS information. I some pictures on a recent vacation, and one is unimaginatively named IMG_1759.JPG. Let's see where it was taken.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;identify -verbose IMG_1759.JPG | grep GPS
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;

&lt;col  class="org-left" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSAltitude:&lt;/td&gt;
&lt;td class="org-left"&gt;14426/387&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSAltitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;0&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDateStamp:&lt;/td&gt;
&lt;td class="org-left"&gt;2018:06:30&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDestBearing:&lt;/td&gt;
&lt;td class="org-left"&gt;11767/80&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSDestBearingRef:&lt;/td&gt;
&lt;td class="org-left"&gt;T&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSImgDirection:&lt;/td&gt;
&lt;td class="org-left"&gt;11767/80&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSImgDirectionRef:&lt;/td&gt;
&lt;td class="org-left"&gt;T&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSInfo:&lt;/td&gt;
&lt;td class="org-left"&gt;1632&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLatitude:&lt;/td&gt;
&lt;td class="org-left"&gt;22/1,&lt;/td&gt;
&lt;td class="org-left"&gt;11/1,&lt;/td&gt;
&lt;td class="org-left"&gt;614/100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLatitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;N&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLongitude:&lt;/td&gt;
&lt;td class="org-left"&gt;159/1,&lt;/td&gt;
&lt;td class="org-left"&gt;40/1,&lt;/td&gt;
&lt;td class="org-left"&gt;4512/100&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSLongitudeRef:&lt;/td&gt;
&lt;td class="org-left"&gt;W&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSSpeed:&lt;/td&gt;
&lt;td class="org-left"&gt;401/100&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSSpeedRef:&lt;/td&gt;
&lt;td class="org-left"&gt;K&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;td class="org-left"&gt;&amp;#xa0;&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;exif:GPSTimeStamp:&lt;/td&gt;
&lt;td class="org-left"&gt;3/1,&lt;/td&gt;
&lt;td class="org-left"&gt;44/1,&lt;/td&gt;
&lt;td class="org-left"&gt;3900/100&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
The interpretation here is that I took that photo at latitude 22° 11' 6.14" N, and longitude 159° 40' 45.12" W. Evidently I was moving at 4.01 in some unit; I can confirm that I was at least moving, I was on a ship when I took that picture, and it was moving.
&lt;/p&gt;

&lt;p&gt;
According to &lt;a href="http://alvarestech.com/temp/routeconverter/RouteConverter/navigation-formats/src/main/doc/googlemaps/Google_Map_Parameters.htm"&gt;this&lt;/a&gt; you can make a url to a Google maps pin in satellite picture mode that looks like this: &lt;a href="http://maps.google.com/maps?q=22%2011%206.14N,159%2040%2045.12W&amp;amp;t=k"&gt;http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;amp;t=k&lt;/a&gt;. It doesn't seem possible to set the zoom in this url (at least setting the zoom doesn't do anything, and I didn't feel like trying all the other variations that are reported to sometimes work). I guess that is ok for now, it adds some suspense that you have to zoom out to see where the image is in some cases.
&lt;/p&gt;

&lt;p&gt;
We need a little function to take an image file and generate that link. We have to do some algebra on the latitude and longitude which are stored as integers with a division operator. I am going to pipe this through an old unix utility called bc mostly because it is simple, and I won't have to parse it much. bc is a little archaic, you have to set the scale first, which tells it how many decimal places to output. The degrees and minutes are integers, so we will have to deal with that later.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;&lt;span style="color: #006FE0;"&gt;echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"scale=2; 614/100"&lt;/span&gt; | bc
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6.14

&lt;/pre&gt;

&lt;p&gt;
Here is our function. I filter out the lines with GPS in them into an a-list. Then, I grab out the specific quantities I want and construct the url. There is a little hackery since it appears the degrees and minutes should be integers in the url formulation used here, so I convert them to numbers and then take the floor. The function is a little longer than I thought, but it isn't too bad I guess. It is a little repetitious, but not enough to justify refactoring.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-map-url&lt;/span&gt; (fname)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((gps-lines (-keep (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (line)
                             (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (s-contains? &lt;span style="color: #008000;"&gt;"GPS"&lt;/span&gt; line) (s-trim line)))
                           (process-lines &lt;span style="color: #008000;"&gt;"identify"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"-verbose"&lt;/span&gt; fname)))
         (gps-alist (mapcar (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s) (s-split &lt;span style="color: #008000;"&gt;": "&lt;/span&gt; s t))  gps-lines))
         (latitude (mapcar
                    (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                      (s-trim (shell-command-to-string
                               (format &lt;span style="color: #008000;"&gt;"echo \"scale=2;%s\" | bc"&lt;/span&gt; s))))
                    (s-split &lt;span style="color: #008000;"&gt;","&lt;/span&gt; (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLatitude"&lt;/span&gt; gps-alist)))))
         (latitude-ref (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLatitudeRef"&lt;/span&gt; gps-alist)))
         (longitude (mapcar
                     (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (s)
                       (s-trim
                        (shell-command-to-string
                         (format &lt;span style="color: #008000;"&gt;"echo \"scale=2;%s\" | bc"&lt;/span&gt; s))))
                     (s-split &lt;span style="color: #008000;"&gt;","&lt;/span&gt; (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLongitude"&lt;/span&gt; gps-alist)))))
         (longitude-ref (cadr (assoc &lt;span style="color: #008000;"&gt;"exif:GPSLongitudeRef"&lt;/span&gt; gps-alist))))
    (s-format &lt;span style="color: #008000;"&gt;"http://maps.google.com/maps?q=$0 $1 $2$3,$4 $5 $6$7&amp;amp;t=k"&lt;/span&gt;
              'elt
              (list
               (floor (string-to-number (nth 0 latitude)))
               (floor (string-to-number (nth 1 latitude)))
               (nth 2 latitude)
               latitude-ref
               (floor (string-to-number (nth 0 longitude)))
               (floor (string-to-number (nth 1 longitude)))
               (nth 2 longitude)
               longitude-ref))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
iphoto-map-url

&lt;/pre&gt;

&lt;p&gt;
Here is the function in action, making the url.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(iphoto-map-url &lt;span style="color: #008000;"&gt;"IMG_1759.JPG"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;amp;t=k

&lt;/pre&gt;

&lt;p&gt;
It is kind of slow, but that is because the identify shell command is kind of slow when you run it with the -verbose tag. Now, I would like the following things to happen when I publish it to html:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;I want the image wrapped in an img tag inside a figure environment.&lt;/li&gt;
&lt;li&gt;I want the image to by hyperlinked to its location in Google maps.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
In the org file, I want a thumbnail overlay on it, so I can see the image while writing, and I want it to toggle like other images. I use an iPhone to take the photos, so we will call it an iphoto link.
&lt;/p&gt;

&lt;p&gt;
Here is the html export function I will use. It is a little hacky that I hard code the width in at 300 pixels, but I didn't feel like figuring out how to get it from an #+attr_html line right now. It probably requires a filter function where you have access to the actual org-elements. I put the url to the image location in a figure caption here.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-export&lt;/span&gt; (path desc backend)
  (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
   ((eq 'html backend)
    (format &lt;span style="color: #008000;"&gt;"&amp;lt;figure&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000;"&gt;&amp;lt;img src=\"%s\" width=\"300\"&amp;gt;&lt;/span&gt;
&lt;span style="color: #008000;"&gt;%s&lt;/span&gt;
&lt;span style="color: #008000;"&gt;&amp;lt;/figure&amp;gt;"&lt;/span&gt;
            path
            (format &lt;span style="color: #008000;"&gt;"&amp;lt;figcaption&amp;gt;%s &amp;lt;a href=\"%s\"&amp;gt;map&amp;lt;/a&amp;gt;&amp;lt;/figcaption&amp;gt;"&lt;/span&gt;
                    (&lt;span style="color: #0000FF;"&gt;or&lt;/span&gt; desc &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
                    (iphoto-map-url path))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
iphoto-export

&lt;/pre&gt;

&lt;p&gt;
Ok, the last detail I want is to put an image overlay on my new link so I can see it. I want this to work with org-toggle-inline-images so I can turn the images on and off like regular image links with C-c C-x C-v. This function creates overlays as needed, and ties into the org-inline-image-overlays so they get deleted on toggling. We have to advise the display function to redraw these, which we clumsily do by restarting the org font-lock machinery which will redraw the thumbnails from the activate-func property of the links. I also hard code the thumbnail width in this function, when it could be moved out to a variable or attribute.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-thumbnails&lt;/span&gt; (start end imgfile bracketp)
  (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; bracketp
    (&lt;span style="color: #0000FF;"&gt;when&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt;
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;it is an image&lt;/span&gt;
           (org-string-match-p (image-file-name-regexp) imgfile)
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and it exists&lt;/span&gt;
           (f-exists? imgfile)
           &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and there is no overlay here.&lt;/span&gt;
           (not (ov-at start)))
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; img (create-image (expand-file-name imgfile)
                              'imagemagick nil &lt;span style="color: #006FE0;"&gt;:width&lt;/span&gt; 300
                              &lt;span style="color: #006FE0;"&gt;:background&lt;/span&gt; &lt;span style="color: #008000;"&gt;"lightgray"&lt;/span&gt;))
      (&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; ov (make-overlay start end))
      (overlay-put ov 'display img)
      (overlay-put ov 'face 'default)
      (overlay-put ov 'org-image-overlay t)
      (overlay-put ov 'modification-hooks
                   (list
                    `(&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
                       (org-display-inline-remove-overlay ,ov t ,start ,end))))
      (&lt;span style="color: #0000FF;"&gt;push&lt;/span&gt; ov org-inline-image-overlays))))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;iphoto-redraw-thumbnails&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  (org-restart-font-lock))

&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;this redisplays these thumbnails on image toggling&lt;/span&gt;
(advice-add 'org-display-inline-images &lt;span style="color: #006FE0;"&gt;:after&lt;/span&gt; 'iphoto-redraw-thumbnails)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next, we define the link with a follow, export, tooltip and activate-func (which puts the overlay on).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(org-link-set-parameters
 &lt;span style="color: #008000;"&gt;"iphoto"&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:follow&lt;/span&gt; (&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; (path) (browse-url (iphoto-map-url path)))
 &lt;span style="color: #006FE0;"&gt;:export&lt;/span&gt; 'iphoto-export
 &lt;span style="color: #006FE0;"&gt;:help-echo&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Click me to see where this photo is on a map."&lt;/span&gt;
 &lt;span style="color: #006FE0;"&gt;:activate-func&lt;/span&gt; 'iphoto-thumbnails)
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
So finally, here is the mysterious image.
&lt;/p&gt;


&lt;p&gt;
&lt;figure&gt;
&lt;img src="/media/IMG_1759.JPG" width="300"&gt;
&lt;figcaption&gt; &lt;a href="http://maps.google.com/maps?q=22 11 6.14N,159 40 45.12W&amp;t=k"&gt;map&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;


&lt;p&gt;
Now, in org-mode, I see the image in an overlay, and I can toggle it on and off. If I click on the image, it opens a browser to Google maps with a pin at the spot I took it. When I export it, it wraps the image in a &amp;lt;figure&amp;gt; tag, and puts a url in the caption to the map. If you click on it, and zoom out, you will see this is a picture of the Nāpali Coast on Kauai in Hawaii, and I was in fact out at sea when I took the picture. It was spectacular. Here is another one. This one is a little more obvious with the zoom. Here, I was on land. Since this link is bracketed, it does not show the overlay however in the org-file.
&lt;/p&gt;

&lt;p&gt;
&lt;figure&gt;
&lt;img src="/media/IMG_1749.JPG" width="300"&gt;
&lt;figcaption&gt;Another vacation picture, this time with a caption. &lt;a href="http://maps.google.com/maps?q=21 57 37.01N,159 21 6.72W&amp;t=k"&gt;map&lt;/a&gt;&lt;/figcaption&gt;
&lt;/figure&gt;
&lt;/p&gt;

&lt;p&gt;
Overall, this was easier than I expected. It might be faster to outsource reading the exif data to some dedicate library, perhaps in python that would return everything you want in an easy to parse json data structure. The speed of computing the url is only annoying when you export or click on the links though.
&lt;/p&gt;

&lt;p&gt;
I didn't build in any error handling, e.g. if you do this on a photo with no GPS data it will probably not handle it gracefully. I also haven't tested this on any other images, e.g. south of the equator, from other cameras, etc. I assume this exif data is pretty standard, but it is a wild world out there&amp;#x2026; It would still be nice to find a way to get a string representing the nearest known location somehow, that would help the caption be more useful.
&lt;/p&gt;

&lt;p&gt;
There is one little footnote to speak of, and that is I had to do a little hackery to get this to work with my blog machinery. You can see what it is in the org-source, I buried it in a noexport subheading, because it isn't that interesting in the grand scheme of things. It was just necessary because I export these org-files to blogofile, which then builds the html pages, instead of just exporting them. The images have to be copied to a source directory, and paths changed in the html to point to them. See, boring stuff. Otherwise, the code above should be fine for regular org and html files! Now, my vacation is over so it is time to get back to work.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2018 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2018/07/01/Getting-geo-tagged-information-from-photos-for-blogging.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.1.13&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
