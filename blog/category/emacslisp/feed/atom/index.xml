<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2023-02-02T01:11:11Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog" />
  <id>https://kitchingroup.cheme.cmu.edu/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="https://kitchingroup.cheme.cmu.edu/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[A simple emacs-lisp interface to CRUD operations in mongodb]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb</id>
    <updated>2017-01-16T09:44:16Z</updated>
    <published>2017-01-16T09:44:16Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="emacslisp" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="emacs" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="database" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="mongodb" />
    <summary type="html"><![CDATA[A simple emacs-lisp interface to CRUD operations in mongodb]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgf43163b"&gt;1. Inserting entries&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgbec2cf8"&gt;2. Finding a document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org7279625"&gt;3. Updating an entry&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org769cf9d"&gt;4. Deleting a document&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org0cb9437"&gt;5. Generic commands&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org512e4fe"&gt;6. A MongoDB contacts database&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org97edcbc"&gt;7. Text searching&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org04fa0df"&gt;8. Summary&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
In this &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/"&gt;post&lt;/a&gt; I showed that MongoDB is pretty easy to use for simple database applications. I showed a way to get data out of the database that is native to Emacs, but to use Mongo in emacs applications comfortably, it would be really helpful to be able to create, read, update and delete (CRUD) entries. There is a minimal interface to mongodb for emacs-lisp here: &lt;a href="https://github.com/m2ym/mongo-el"&gt;https://github.com/m2ym/mongo-el&lt;/a&gt;. From what I can see, it seems limited to simple, single queries, and it is written with advanced features of emacs-lisp I do not understand enough to extend it. In the last post, I showed an easy way to use mongoexport to get data from a query out of a mongo database. Here I explore a similar approach to round out the CRUD (create, read, update and delete) operations for using emacs-lisp to work with mongodb. This will enable Emacs to easily use MongoDB in applications.
&lt;/p&gt;

&lt;p&gt;
We use the mongo cli with the &amp;#x2013;eval option, which allows you to run commands on the database. The basic idea is to generate the json we need from a lisp data structure, and use that json in mongo commands as needed. This sounds simple, but below you will see there are plenty of corners to take care of.
&lt;/p&gt;

&lt;p&gt;
The goal here is to get something that is pretty functional. It will not be able to support all the capabilities of MongoDB and the options available in the cli.
&lt;/p&gt;

&lt;div id="outline-container-orgf43163b" class="outline-2"&gt;
&lt;h2 id="orgf43163b"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; Inserting entries&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Here we insert a document into the contacts collection of the contacts database. As in the Python example we considered earlier, this database is automatically created when we run this command. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;))
(&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((json (json-encode '((first-name . &lt;span style="color: #008000;"&gt;"John"&lt;/span&gt;)
                            (last-name . &lt;span style="color: #008000;"&gt;"Kitchin"&lt;/span&gt;)
                            (email . &lt;span style="color: #008000;"&gt;"jkitchin@cmu.edu"&lt;/span&gt;))))
       (cmd (format &lt;span style="color: #008000;"&gt;"mongo 127.0.0.1/contacts --quiet --eval 'db.contacts.insert(%s)'"&lt;/span&gt;
                    json)))
  (shell-command-to-string cmd))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
json
&lt;/pre&gt;

&lt;p&gt;
Here is a function we can use for inserting, and as you can see it works for multiple inserts too. There is a limit on how long the json string can be for this, so you cannot add too many entries at once with this. I do not know what the limit is, and suspect it is related to using a shell command. When this succeeds there is data returned about what happened, which we try to get in lisp form. Also, I noticed I had to do a little bit of escaping, especially for entries containing a single quote, which messes up the quoting on the shell command, and for non-ascii characters which the shell did not handle well. Maybe this could be avoided with a file-based approach, or if we used a pipe to a process.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-insert&lt;/span&gt; (db collection document)
  &lt;span style="color: #036A07;"&gt;"Insert into DB.COLLECTION the DOCUMENT.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;DOCUMENT will be some lisp structure that is converted to json."&lt;/span&gt;
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;we have to escape quote any single quotes. This came from&lt;/span&gt;
  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;http://stackoverflow.com/questions/1250079/how-to-escape-single-quotes-within-single-quoted-strings&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((json (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"'"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"'\"'\"'"&lt;/span&gt; (json-encode document)))
         &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;it seems utf-8 characters may cause issues. Let's just remove them.&lt;/span&gt;
         (json (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"[&lt;/span&gt;&lt;span style="color: #008000;"&gt;^&lt;/span&gt;&lt;span style="color: #008000;"&gt;[:ascii:]]"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt; json))
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.insert(%s)'"&lt;/span&gt;
                      db collection
                      json))
         (output (shell-command-to-string cmd)))
    (&lt;span style="color: #0000FF;"&gt;cond&lt;/span&gt;
     ((string-match &lt;span style="color: #008000;"&gt;"BulkWriteResult("&lt;/span&gt; output)
      (json-read-from-string (substring output 16 -2)))
     ((string-match &lt;span style="color: #008000;"&gt;"WriteResult("&lt;/span&gt; output)
      (json-read-from-string (substring output 12 -2)))
     (t
      output))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-insert
&lt;/pre&gt;

&lt;p&gt;
Here it is in action.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '(((first-name . &lt;span style="color: #008000;"&gt;"John"&lt;/span&gt;)
                 (last-name . &lt;span style="color: #008000;"&gt;"Kitchin"&lt;/span&gt;)
                 (email . &lt;span style="color: #008000;"&gt;"jkitchin@cmu.edu"&lt;/span&gt;))
                ((first-name . &lt;span style="color: #008000;"&gt;"Someone"&lt;/span&gt;)
                 (last-name . &lt;span style="color: #008000;"&gt;"Else"&lt;/span&gt;)
                 (&lt;span style="color: #008000;"&gt;"email"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((writeErrors . []) (writeConcernErrors . []) (nInserted . 2) (nUpserted . 0) (nMatched . 0) (nModified . 0) (nRemoved . 0) (upserted . []))
&lt;/pre&gt;

&lt;p&gt;
Seems like an ok way to get data from Emacs into a Mongo DB, and we get lisp data returned telling us what happened.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgbec2cf8" class="outline-2"&gt;
&lt;h2 id="orgbec2cf8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Finding a document&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
To update documents we need to find them. We would like to find a document by the _id, but we have a small dilemma. The json we need for that needs to look like: {"_id": ObjectId("587babfaef131d0d4603b3ad")}, where the ObjectId is not quoted. The json library does not seem to be able to do that. So, we have to modify our find code to do this. This is possible by manipulating the json string after it is generated with regular expression replacement. It feels hacky, and hopefully there are not many more examples of that. If there are, we will need another approach to generating the json data. Here is the modified find function, also with the projection option. Here is another place we have to tread somewhat lightly with the _id, in this case we have to requote it so that it can be read by emacs. It might make sense to just replace it with the quoted _id string, rather than the ObjectId call. Time will tell.
&lt;/p&gt;

&lt;p&gt;
Here we create two helper functions to unquote input, and requote output. We also need some code to make an array of all the results, and put commas between all the results so that we end up with valid json in the output.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-unquote-query&lt;/span&gt; (query)
  &lt;span style="color: #036A07;"&gt;"Json encodes QUERY, and unquotes any ObjectId calls.&lt;/span&gt;

&lt;span style="color: #036A07;"&gt;We don't have syntax for the ObjectId call that mongo wants in&lt;/span&gt;
&lt;span style="color: #036A07;"&gt; lisp, so a query has to look like this:&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;'((_id .  \"ObjectId(\"587babfaef131d0d4603b3ad\")\"))&lt;/span&gt;

&lt;span style="color: #036A07;"&gt;Mongo can't have the quotes around the call, so this function&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;removes them.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;"&lt;/span&gt;
  (replace-regexp-in-string &lt;span style="color: #008000;"&gt;"\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;ObjectID(\\\\\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;.*?&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\\\\\")&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\""&lt;/span&gt;
                            &lt;span style="color: #008000;"&gt;"ObjectId(\"\\2\")"&lt;/span&gt;
                            (json-encode query)))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-requote-output&lt;/span&gt; (output)
  &lt;span style="color: #036A07;"&gt;"Adds quotes around ObjectId in OUTPUT.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;When mongo outputs json, it has unquoted ObjectIds in it that&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;emacs cannot interpret as json. "&lt;/span&gt;
  (replace-regexp-in-string
   &lt;span style="color: #008000;"&gt;"ObjectId(\"&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;(&lt;/span&gt;&lt;span style="color: #008000;"&gt;.*?&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;\\&lt;/span&gt;&lt;span style="color: #008000; font-weight: bold;"&gt;)&lt;/span&gt;&lt;span style="color: #008000;"&gt;\")"&lt;/span&gt;
   &lt;span style="color: #008000;"&gt;"\"ObjectId(\\\\\"\\1\\\\\")\""&lt;/span&gt;
   output))

(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-find&lt;/span&gt; (db collection query &lt;span style="color: #6434A3;"&gt;&amp;amp;optional&lt;/span&gt; projection)
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((query-json (mongo-unquote-query query))
         (projection-json
          (&lt;span style="color: #0000FF;"&gt;and&lt;/span&gt; projection (json-encode projection)))
         (output (mongo-requote-output
                  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;add [] to make an array of output in json,&lt;/span&gt;
                  &lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;and separate results by a comma&lt;/span&gt;
                  (concat &lt;span style="color: #008000;"&gt;"["&lt;/span&gt;
                          (replace-regexp-in-string
                           &lt;span style="color: #008000;"&gt;"\n"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;
                           (shell-command-to-string
                            (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.find(%s).forEach(function(myDoc) { printjsononeline(myDoc); print( \",\"); })'"&lt;/span&gt;
                                    db collection
                                    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; projection
                                        (format &lt;span style="color: #008000;"&gt;"%s, %s"&lt;/span&gt; query-json projection-json)
                                      query-json))))
                          &lt;span style="color: #008000;"&gt;"]"&lt;/span&gt;)))) 
    (json-read-from-string output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-find
&lt;/pre&gt;

&lt;p&gt;
So, finally we can run something like this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((email . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c166cdfcd649d3acf99fd\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c17550e586b4f8df21de0\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c1764d75279a55ffec483\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c17743281f1e9d5054396\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c178ad92706d2bd5a6e3c\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there")) ((_id . "ObjectId(\"587c1794756bb2bd0f0ac499\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there"))]
&lt;/pre&gt;

&lt;p&gt;
Here is an example usage with a projection that returns only the information you want, in this case, just the id.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((email . &lt;span style="color: #008000;"&gt;"someone@out.there"&lt;/span&gt;))
            '((_id . 1)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c166cdfcd649d3acf99fd\")")) ((_id . "ObjectId(\"587c16ad410565dd4c16c748\")")) ((_id . "ObjectId(\"587c17550e586b4f8df21de0\")")) ((_id . "ObjectId(\"587c1764d75279a55ffec483\")")) ((_id . "ObjectId(\"587c17743281f1e9d5054396\")")) ((_id . "ObjectId(\"587c178ad92706d2bd5a6e3c\")")) ((_id . "ObjectId(\"587c1794756bb2bd0f0ac499\")"))]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org7279625" class="outline-2"&gt;
&lt;h2 id="org7279625"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; Updating an entry&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Ok, back to the update. To make sure that we update exactly the document we want, we will use the document _id. First, we define an update command.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-update&lt;/span&gt; (db collection query $set)
  &lt;span style="color: #036A07;"&gt;"In DB.COLLECTION update records matching QUERY with the contents of $SET."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((query-json (mongo-encode-query query))
         ($set-json (mongo-encode-query $set))
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.update(%s, %s)'"&lt;/span&gt;
                      db collection
                      query-json $set-json))
         (output (shell-command-to-string cmd)))
    (&lt;span style="color: #0000FF;"&gt;if&lt;/span&gt; (string-match &lt;span style="color: #008000;"&gt;"WriteResult("&lt;/span&gt; output)
        (json-read-from-string
         (substring output 12 -2))
      output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-update
&lt;/pre&gt;

&lt;p&gt;
First a reminder of what is in this record.
&lt;/p&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there"))]
&lt;/pre&gt;

&lt;p&gt;
Here we set the email field to a new address. Without $set, the whole document gets replaced.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-update &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;))
              '(($set . ((email . &lt;span style="color: #008000;"&gt;"someone@out.there.com"&lt;/span&gt;)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((nMatched . 1) (nUpserted . 0) (nModified . 1))
&lt;/pre&gt;

&lt;p&gt;
Finally, let's see the document again to verify it is modified.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (first-name . "Someone") (last-name . "Else") (email . "someone@out.there.com"))]
&lt;/pre&gt;

&lt;p&gt;
Looks good, you can see it got changed. There is a potential gotcha though. This next command looks like it should do the same thing, but it does not. The whole document gets replaced!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-update &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;))
              '((email . &lt;span style="color: #008000;"&gt;"someone@out.there.com"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((nMatched . 1) (nUpserted . 0) (nModified . 1))
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587c16ad410565dd4c16c748\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
[((_id . "ObjectId(\"587c16ad410565dd4c16c748\")") (email . "someone@out.there.com"))]
&lt;/pre&gt;

&lt;p&gt;
Do not forget the $set operator if you just want to update some fields!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org769cf9d" class="outline-2"&gt;
&lt;h2 id="org769cf9d"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Deleting a document&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
Next, let's get a delete function. I will only implement the deleteMany function here since you can give it a document id to delete only one, and usually I would want to delete all documents that meet a criteria anyway.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-deleteMany&lt;/span&gt; (db collection filter)
  &lt;span style="color: #036A07;"&gt;"Delete records in DB.COLLECTION matched by FILTER.&lt;/span&gt;
&lt;span style="color: #036A07;"&gt;TODO: add write concern."&lt;/span&gt;
  (&lt;span style="color: #0000FF;"&gt;let*&lt;/span&gt; ((filter-json (mongo-encode-query filter)) 
         (cmd (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.deleteMany(%s)'"&lt;/span&gt;
                      db collection
                      filter-json))
         (output (shell-command-to-string cmd)))
    (json-read-from-string output)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-deleteMany
&lt;/pre&gt;

&lt;p&gt;
Since we borked that last document, let's just delete it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-deleteMany &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '((_id . &lt;span style="color: #008000;"&gt;"ObjectId(\"587be3fa6009a569a277b680\")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
((acknowledged . t) (deletedCount . 0))
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org0cb9437" class="outline-2"&gt;
&lt;h2 id="org0cb9437"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Generic commands&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
We may want some flexibility to run collection commands.  The most generic command will simply be to write the shell-command completely. We can keep a little syntax by encapsulating most of the boilerplate though. Here is a function for that.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;defun&lt;/span&gt; &lt;span style="color: #006699;"&gt;mongo-cmd&lt;/span&gt; (db collection cmd &lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; args)
  &lt;span style="color: #036A07;"&gt;"In DB.COLLECTION run CMD. &lt;/span&gt;
&lt;span style="color: #036A07;"&gt;ARGS if present will be used to format CMD."&lt;/span&gt;
  (shell-command-to-string
   (format &lt;span style="color: #008000;"&gt;"mongo %s --quiet --eval 'db.%s.%s'"&lt;/span&gt;
           db collection
           (apply #'format cmd args))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
mongo-cmd
&lt;/pre&gt;

&lt;p&gt;
We can get the number of documents with this:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
4341
&lt;/pre&gt;

&lt;p&gt;
Or run a more sophisticated command with arguments like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"explain().remove(%s)"&lt;/span&gt; (json-encode '((&lt;span style="color: #008000;"&gt;"category"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"enemy"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
{
	"queryPlanner" : {
		"plannerVersion" : 1,
		"namespace" : "contacts.contacts",
		"indexFilterSet" : false,
		"parsedQuery" : {
			"category" : {
				"$eq" : "enemy"
			}
		},
		"winningPlan" : {
			"stage" : "DELETE",
			"inputStage" : {
				"stage" : "COLLSCAN",
				"filter" : {
					"category" : {
						"$eq" : "enemy"
					}
				},
				"direction" : "forward"
			}
		},
		"rejectedPlans" : [ ]
	},
	"serverInfo" : {
		"host" : "Johns-MacBook-Air.local",
		"port" : 27017,
		"version" : "3.4.1",
		"gitVersion" : "5e103c4f5583e2566a45d740225dc250baacfbd7"
	},
	"ok" : 1
}
&lt;/pre&gt;

&lt;p&gt;
Or, drop the collection with:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"drop()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
true
&lt;/pre&gt;

&lt;p&gt;
All gone! Note, we do not try to handle the output of any of those, and they are returned as strings.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org512e4fe" class="outline-2"&gt;
&lt;h2 id="org512e4fe"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; A MongoDB contacts database&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
Now, let's re-populate it for real. I store my contacts in a variable called "contacts" as a list of a descriptive string and then cons cells. These are actually harvested from a set of org-files. It is way to slow to parse these files each time, so I keep the contacts cached in memory and only update them if a file changes.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(length contacts)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6047
&lt;/pre&gt;

&lt;p&gt;
There are over 6000 contacts. Let's put them in a MongoDB.
&lt;/p&gt;

&lt;p&gt;
Here is a limitation of our approach. This will not work because the generated shell command ends up being too long for the shell.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
              (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
                    collect
                    (append `((desc . ,(car contact))) (cdr contact))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So, we do them one at time here:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((ct (current-time)))
  (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
        do
        (&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((output (mongo-insert &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                    (append `((desc . ,(car contact))) (cdr contact)))))
          (&lt;span style="color: #0000FF;"&gt;unless&lt;/span&gt; (= 1 (cdr (assoc 'nInserted output)))
            (&lt;span style="color: #ff0000; font-weight: bold;"&gt;warn&lt;/span&gt; &lt;span style="color: #008000;"&gt;"error: %S for %S"&lt;/span&gt; (cdr (assoc 'nInserted output)) contact))))
  (message &lt;span style="color: #008000;"&gt;"Elapsed time %.02f seconds"&lt;/span&gt; (float-time (time-since ct))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Elapsed time 762.95 seconds
&lt;/pre&gt;

&lt;p&gt;
That took a little over 10 minutes to add. That seems long to me. This next step confirms that they were added.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count()"&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6047
&lt;/pre&gt;

&lt;p&gt;
Next we will compare some timing of finding data in the database vs looping through the cached contacts. Here is a timing macro to measure how long it takes to run a bit of code.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;&lt;span style="color: #8D8D84;"&gt;;; &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;http://stackoverflow.com/questions/23622296/emacs-timing-execution-of-function-calls-in-emacs-lisp&lt;/span&gt;
(&lt;span style="color: #0000FF;"&gt;defmacro&lt;/span&gt; &lt;span style="color: #006699;"&gt;measure-time&lt;/span&gt; (&lt;span style="color: #6434A3;"&gt;&amp;amp;rest&lt;/span&gt; body)
  &lt;span style="color: #036A07;"&gt;"Measure the time it takes to evaluate BODY."&lt;/span&gt;
  `(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((time (current-time)))
     ,@body
     (message &lt;span style="color: #008000;"&gt;"%.06f seconds elapsed"&lt;/span&gt; (float-time (time-since time)))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
measure-time
&lt;/pre&gt;

&lt;p&gt;
Here is the old way I would extract data. Many contacts I have are academics, and I have stored their academic ranks in each contact.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
      if (string= &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into professors
      if (string= &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into associate-professors
      if (string= &lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
      collect contact into assistant-professors
      finally return `((&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; ,(length assistant-professors))
                       (&lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; ,(length associate-professors))
                       (&lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; ,(length professors))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
How long did it take to do that?
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for contact in contacts
       if (string= &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into professors
       if (string= &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into associate-professors
       if (string= &lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; (cdr (assoc &lt;span style="color: #008000;"&gt;"RANK"&lt;/span&gt; (cdr contact))))
       collect contact into assistant-professors
       finally return (list (length assistant-professors)
                            (length associate-professors)
                            (length professors))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.008772 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
Not long at all! Comparatively, it is very slow to get this information out of the mongodb, although considerably less code is required. That might not be surprising, considering the json parsing that has to get done here.
&lt;/p&gt;

&lt;p&gt;
Here is the equivalent code to extract that data from the database.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (length (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                              `((RANK . ,rank))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
It is comparatively slow to do this. This requires three json parses, and profiling indicates that alot of the work is done in parsing the json. 
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (length (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt;
                                              `((RANK . ,rank)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
1.914817 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
Here is smarter way to do it that avoids the json parsing.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
      collect (list rank (mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count(%s)"&lt;/span&gt;
                                    (json-encode `((RANK . ,rank))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;Assistant Professor&lt;/td&gt;
&lt;td class="org-right"&gt;313&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Associate Professor&lt;/td&gt;
&lt;td class="org-right"&gt;283&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;Professor&lt;/td&gt;
&lt;td class="org-right"&gt;879&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
And you can see here it is about 10 times faster, but not nearly as fast as running the lisp code on the cache.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for rank in '(&lt;span style="color: #008000;"&gt;"Assistant Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Associate Professor"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"Professor"&lt;/span&gt;)
       collect (list rank (mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"count(%s)"&lt;/span&gt;
                                     (json-encode `((RANK . ,rank)))))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.349413 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
This is how you might integrate this into a completion command:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(ivy-read &lt;span style="color: #008000;"&gt;"choose: "&lt;/span&gt;
          (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for c across (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
                collect
                (list (cdr (assoc 'desc c)) c)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
This is basically unusable though, because it takes so long to generate the candidates (over six seconds).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (&lt;span style="color: #0000FF;"&gt;loop&lt;/span&gt; for c across (mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;""&lt;/span&gt;)
       collect
       (list (cdr (assoc 'desc c)) c)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
6.228225 seconds elapsed
&lt;/pre&gt;

&lt;p&gt;
We can get back to usable by making the database do more work for us. Here, we simply make the database print a list of cons cells that we can read into lisp. We have to use a javascript function, with some escaping and quoting. The escaping was necessary because there is some bad data in the email field that messed up the cons cells, e.g. some things like "name" &amp;lt;email&amp;gt; with nested single and double quoting, etc., and the quoting was necessary to get cons cells of the form ("desc" . "email"), and finally we wrap them in parentheses and read back the list of cons cells. At about a quarter of a second, this is very usable to get a list of over 6000 candidates. It is still many times slower than working on the contacts list in memory though. I am not a super fan of the one-line javascript, and if it was much more complicated than this another strategy would probably be desirable.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;measure-time&lt;/span&gt;
 (read
  (concat
   &lt;span style="color: #008000;"&gt;"("&lt;/span&gt;
   (shell-command-to-string &lt;span style="color: #008000;"&gt;"mongo contacts --quiet --eval 'db.contacts.find().forEach(function (doc) {print(\"(\\\"\" + doc.desc + \"\\\" . \\\"\" + escape(doc.EMAIL) +\"\\\")\");})'"&lt;/span&gt;)
   &lt;span style="color: #008000;"&gt;")"&lt;/span&gt;)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
0.284730 seconds elapsed
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org97edcbc" class="outline-2"&gt;
&lt;h2 id="org97edcbc"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; Text searching&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;p&gt;
Finally, let us make a text index to make searching easy. This allows us a very flexible search where we do not have to specify what field or use regular expressions. We setup the index on all the fields, so we can find entries that match even on fields that do not exist in all documents.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-cmd &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"createIndex(%s)"&lt;/span&gt; (json-encode '((&lt;span style="color: #008000;"&gt;"$**"&lt;/span&gt; . &lt;span style="color: #008000;"&gt;"text"&lt;/span&gt;))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
{
	"createdCollectionAutomatically" : false,
	"numIndexesBefore" : 1,
	"numIndexesAfter" : 2,
	"ok" : 1
}
&lt;/pre&gt;

&lt;p&gt;
Now, let's use that to find the GOOGLE-SCHOLAR url of contacts matching the following query.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(mongo-find &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; &lt;span style="color: #008000;"&gt;"contacts"&lt;/span&gt; '(($text . (($search . &lt;span style="color: #008000;"&gt;"\"Carnegie Mellon\""&lt;/span&gt;)))
                                    ($text . (($search . &lt;span style="color: #008000;"&gt;"\"John Kitchin\""&lt;/span&gt;))))
            '((GOOGLE-SCHOLAR . 1) (_id . 0)))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;[((GOOGLE-SCHOLAR . &lt;span style="color: #008000;"&gt;"https://scholar.google.com/citations?hl=en&amp;amp;user=jD_4h7sAAAAJ"&lt;/span&gt;))
 nil nil]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
So, you can see there were three contacts, and one of them lists my google-scholar url.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org04fa0df" class="outline-2"&gt;
&lt;h2 id="org04fa0df"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Summary&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
This looks like the foundation of a mongo/emacs-lisp interface. This interface is not that fast though, and suffers from some limitations related to the use of the shell. Depending on the actual use, it is clear you can gain performance by passing some work on the database, which requires some javascript coding. Even that revealed some subtlety, e.g. making sure the database output text that was compatible with the lisp reader. That mostly means taking care of quotes, and other special characters, which I managed with a simple escape mechanism. It is probably worth investing a few more days in building an interface that uses a process and communicates with the mongo cli directly before moving forward with any significant application that uses Mongo in emacs. There are many good ideas for that:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Index all your org files (e.g. &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/"&gt;http://kitchingroup.cheme.cmu.edu/blog/2017/01/03/Find-stuff-in-org-mode-anywhere/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Index all your bibtex files (e.g. &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/"&gt;http://kitchingroup.cheme.cmu.edu/blog/2017/01/15/Querying-a-MongoDB-bibtex-database-with-Python-and-emacs-lisp/&lt;/a&gt;)&lt;/li&gt;
&lt;li&gt;Download RSS feeds into a searchable database&lt;/li&gt;
&lt;li&gt;Manage your contacts&lt;/li&gt;
&lt;li&gt;Index your email? mu and notmuch use xapian for this, but I have found they cannot search for things like hashtags. Maybe MongoDB would be better?&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
The tradeoffs between this and sqlite are more clear now. With Mongo we do not have to create the normalized tables (although it is still a good idea to think about how to structure the documents, and if they should be a little normalized). It is &lt;i&gt;much&lt;/i&gt; easier to map lisp data structures to Mongo queries than it is to do that with SQL queries. On the other hand, it is necessary to do some javascript programming with Mongo to get some desired output. It still seems worth exploring further.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2017 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2017/01/16/A-simple-emacs-lisp-interface-to-CRUD-operations-in-mongodb.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.0.3&lt;/p&gt;]]></content>
  </entry>
</feed>
