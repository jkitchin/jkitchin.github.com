<?xml version="1.0" encoding="UTF-8"?>

<feed
  xmlns="http://www.w3.org/2005/Atom"
  xmlns:thr="http://purl.org/syndication/thread/1.0"
  xml:lang="en"
  >
  <title type="text">The Kitchin Research Group</title>
  <subtitle type="text">Chemical Engineering at Carnegie Mellon University</subtitle>

  <updated>2021-12-03T14:20:21Z</updated>
  <generator uri="http://blogofile.com/">Blogofile</generator>

  <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog" />
  <id>https://kitchingroup.cheme.cmu.edu/blog/feed/atom/</id>
  <link rel="self" type="application/atom+xml" href="https://kitchingroup.cheme.cmu.edu/blog/feed/atom/" />
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication - Accelerated Optimization of Pure Metal and Ligand Compositions for Light-driven Hydrogen Production]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/12/03/New-publication-Accelerated-Optimization-of-Pure-Metal-and-Ligand-Compositions-for-Light-driven-Hydrogen-Production" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/12/03/New-publication-Accelerated-Optimization-of-Pure-Metal-and-Ligand-Compositions-for-Light-driven-Hydrogen-Production</id>
    <updated>2021-12-03T09:20:05Z</updated>
    <published>2021-12-03T09:20:05Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="publication" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication - Accelerated Optimization of Pure Metal and Ligand Compositions for Light-driven Hydrogen Production]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/12/03/New-publication-Accelerated-Optimization-of-Pure-Metal-and-Ligand-Compositions-for-Light-driven-Hydrogen-Production"><![CDATA[


&lt;p&gt;
In this new collaborative work we show how we combine a high-throughput photoreactor with a design of experiment approach to efficiently find optimal in situ synthesis compositions for making metal nanoparticle catalysts for light-driven hydrogen production.  The challenge in this work is there are several components that interact with each other including metal salts, stabilizing ligands and photosensitizers, as well as some noise in the measurements. It is difficult to optimize these components one at a time, so we use a design of experiment approach. The high-throughput data enables us to explore the composition space around the optimum and to identify specific compositions for focused and expensive characterization efforts. We use this on Au, Cu, Fe and Ni and show that all of them can have high activity when they are independently optimized. It is interesting to note that Au and Cu form stable metallic nanoparticles, but Ni appears to form oxide nanoparticles and Fe appears to form sulfide nanoparticles.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;bhat-2022-accel-optim&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Maya Bhat and Eric Lopato and Zoe C Simon and Jill E Millstone
                  and Stefan Bernhard and John R Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Accelerated Optimization of Pure Metal and Ligand Compositions
                  for Light-Driven Hydrogen Production},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {Reaction Chemistry \&amp;amp; Engineering},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2022,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1039/d1re00441g&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;http://dx.doi.org/10.1039/D1RE00441G&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;DATE_ADDED&lt;/span&gt; =   {Mon Nov 29 17:00:12 2021},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1039/d1re00441g'&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/FdKBwAUAPq4" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/12/03/New-publication---Accelerated-Optimization-of-Pure-Metal-and-Ligand-Compositions-for-Light-driven-Hydrogen-Production.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication - Ligand Enhanced Activity of in Situ Formed Nanoparticles for Photocatalytic Hydrogen Evolution]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/12/02/New-publication-Ligand-Enhanced-Activity-of-in-Situ-Formed-Nanoparticles-for-Photocatalytic-Hydrogen-Evolution" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/12/02/New-publication-Ligand-Enhanced-Activity-of-in-Situ-Formed-Nanoparticles-for-Photocatalytic-Hydrogen-Evolution</id>
    <updated>2021-12-02T11:56:53Z</updated>
    <published>2021-12-02T11:56:53Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="publication" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication - Ligand Enhanced Activity of in Situ Formed Nanoparticles for Photocatalytic Hydrogen Evolution]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/12/02/New-publication-Ligand-Enhanced-Activity-of-in-Situ-Formed-Nanoparticles-for-Photocatalytic-Hydrogen-Evolution"><![CDATA[


&lt;p&gt;
In this paper we show that we can stabilize &lt;i&gt;in situ&lt;/i&gt; synthesized nanoparticles by including stabilizing ligands in the synthesis. This gives the &lt;i&gt;in situ&lt;/i&gt; particles comparable stability to pre-synthesized particles, while retaining the flexibility of the &lt;i&gt;in situ&lt;/i&gt; synthesis. We show that not all stabilizing ligands work for all metals, although PEGSH is a reasonable starting point for the metals we considered in this work. Additionally, we show that the incorporation of PEGSH can make some metals that appear inactive without stabilization due to precipitation, become active when stabilized. Although the addition of stabilizing ligands complicates the optimization of the synthesis conditions, it leads to more reproducible, and in some cases better results than leaving them out.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;simon-2021-ligan-enhan&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Zoe C. Simon and Eric M. Lopato and Maya
                  Bhat and Paige J. Moncure and Sarah M. Bernhard and John R.
                  Kitchin and Stefan Bernhard and Jill Millstone},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Ligand Enhanced Activity of in Situ Formed Nanoparticles for
                  Photocatalytic Hydrogen Evolution},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {ChemCatChem},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1002/cctc.202101551&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;http://dx.doi.org/10.1002/cctc.202101551&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;DATE_ADDED&lt;/span&gt; =   {Mon Nov 29 17:01:16 2021},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/EaTYAfQMBlY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1002/cctc.202101551'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/12/02/New-publication---Ligand-Enhanced-Activity-of-in-Situ-Formed-Nanoparticles-for-Photocatalytic-Hydrogen-Evolution.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication - Uncertainty quantification in machine learning and nonlinear least squares regression models]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/11/30/New-publication-Uncertainty-quantification-in-machine-learning-and-nonlinear-least-squares-regression-models" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/11/30/New-publication-Uncertainty-quantification-in-machine-learning-and-nonlinear-least-squares-regression-models</id>
    <updated>2021-12-02T11:57:37Z</updated>
    <published>2021-11-30T16:44:33Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="publication" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication - Uncertainty quantification in machine learning and nonlinear least squares regression models]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/11/30/New-publication-Uncertainty-quantification-in-machine-learning-and-nonlinear-least-squares-regression-models"><![CDATA[


&lt;p&gt;
Say you have acquired some data, and fitted a nonlinear model to it. The fit looks good, but how good are predictions from the model? In high dimensional space it is tricky to tell if you are extrapolating, what should you do? First, read this paper! We illustrate a simple tool called the delta method that can help you estimate the prediction uncertainty from your model using automatic differentiation to get the required derivatives. We show some examples, and how you can use this method to refine what data you should use in fitting your models. We even show how to handle some tricky cases with models where the Hessian is not invertable! The examples are from molecular simulation, but the approach is general and should work for other models too.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;zhan-2021-uncer-quant&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Ni Zhan and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Uncertainty Quantification in Machine Learning and Nonlinear
                  Least Squares Regression Models},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {AIChE Journal},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1002/aic.17516&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;http://dx.doi.org/10.1002/aic.17516&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;DATE_ADDED&lt;/span&gt; =   {Mon Nov 8 08:51:21 2021},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Checkout the video brief here:
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/xg2nVji7SfY" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1002/aic.17516'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/11/30/New-publication---Uncertainty-quantification-in-machine-learning-and-nonlinear-least-squares-regression-models.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[pycse YouTube Channel]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/11/23/pycse-YouTube-Channel" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/11/23/pycse-YouTube-Channel</id>
    <updated>2021-11-23T18:06:02Z</updated>
    <published>2021-11-23T18:03:38Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="uncategorized" />
    <summary type="html"><![CDATA[pycse YouTube Channel]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/11/23/pycse-YouTube-Channel"><![CDATA[


&lt;p&gt;
Over the past few months, I have been making a series of short Python videos on YouTube. You can find the playlist at &lt;a href="https://www.youtube.com/playlist?list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62"&gt;https://www.youtube.com/playlist?list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&lt;/a&gt;. They are not particularly well organized there, since I make them in the order I feel like, and when I have some spare time, so today I took some time to organize them by some topics here. If you find them useful, please subscribe to the channel and tell your friends about them!
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Basic Python
&lt;ul class="org-ul"&gt;
&lt;li&gt;Conditional statements &lt;a href="https://www.youtube.com/watch?v=XymPeBMILUY&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=2"&gt;https://www.youtube.com/watch?v=XymPeBMILUY&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Membership operators &lt;a href="https://www.youtube.com/watch?v=CZstHHjfCHo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=3"&gt;https://www.youtube.com/watch?v=CZstHHjfCHo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Logical operators &lt;a href="https://www.youtube.com/watch?v=q-uDWDSF0l8&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=4"&gt;https://www.youtube.com/watch?v=q-uDWDSF0l8&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Comparison operators &lt;a href="https://www.youtube.com/watch?v=BayqeeF_iKM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=5"&gt;https://www.youtube.com/watch?v=BayqeeF_iKM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=5&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Operator precedence &lt;a href="https://www.youtube.com/watch?v=Vy4USf-UVAI&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=19"&gt;https://www.youtube.com/watch?v=Vy4USf-UVAI&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=19&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Iteration &lt;a href="https://www.youtube.com/watch?v=7rVsD9kT9RM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=16"&gt;https://www.youtube.com/watch?v=7rVsD9kT9RM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=16&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;functions &lt;a href="https://www.youtube.com/watch?v=kidVLLHtzbc&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=17"&gt;https://www.youtube.com/watch?v=kidVLLHtzbc&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=17&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Math
&lt;ul class="org-ul"&gt;
&lt;li&gt;Integration &lt;a href="https://www.youtube.com/watch?v=6xAO7te0kdA&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=10"&gt;https://www.youtube.com/watch?v=6xAO7te0kdA&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=10&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;polynomials &lt;a href="https://www.youtube.com/watch?v=8e1yOKMTP8o&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=11"&gt;https://www.youtube.com/watch?v=8e1yOKMTP8o&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=11&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Numpy array broadcasting &lt;a href="https://www.youtube.com/watch?v=slWgreHaQNE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=23"&gt;https://www.youtube.com/watch?v=slWgreHaQNE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=23&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Array broadcasting example &lt;a href="https://www.youtube.com/watch?v=FXhEKNtvoVs&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=24"&gt;https://www.youtube.com/watch?v=FXhEKNtvoVs&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=24&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Root finding
&lt;ul class="org-ul"&gt;
&lt;li&gt;solving nonlinear functions &lt;a href="https://www.youtube.com/watch?v=KeRNoXWs_y0&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=15"&gt;https://www.youtube.com/watch?v=KeRNoXWs_y0&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=15&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Newton's method &lt;a href="https://www.youtube.com/watch?v=spLsyP-5PF8&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=1"&gt;https://www.youtube.com/watch?v=spLsyP-5PF8&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Replacing fsolve &lt;a href="https://www.youtube.com/watch?v=_1bOzIYcDaA&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=6"&gt;https://www.youtube.com/watch?v=_1bOzIYcDaA&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=6&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;root failures &lt;a href="https://www.youtube.com/watch?v=FaOJxeVfeH4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=26"&gt;https://www.youtube.com/watch?v=FaOJxeVfeH4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=26&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Differential equations
&lt;ul class="org-ul"&gt;
&lt;li&gt;first order ODEs &lt;a href="https://www.youtube.com/watch?v=4H0Qr-gxMN4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=14"&gt;https://www.youtube.com/watch?v=4H0Qr-gxMN4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=14&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;events in ODEs &lt;a href="https://www.youtube.com/watch?v=fv_-3ZtYBEo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=25"&gt;https://www.youtube.com/watch?v=fv_-3ZtYBEo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=25&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;BVPs &lt;a href="https://www.youtube.com/watch?v=vWcRuay1tt4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=7"&gt;https://www.youtube.com/watch?v=vWcRuay1tt4&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=7&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Optimization
&lt;ul class="org-ul"&gt;
&lt;li&gt;minimizing a function &lt;a href="https://www.youtube.com/watch?v=2HMKU2nHAbE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=13"&gt;https://www.youtube.com/watch?v=2HMKU2nHAbE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=13&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;constrained optimization &lt;a href="https://www.youtube.com/watch?v=QKiOm1iqciE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=12"&gt;https://www.youtube.com/watch?v=QKiOm1iqciE&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=12&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Data
&lt;ul class="org-ul"&gt;
&lt;li&gt;Using Excel in colab &lt;a href="https://www.youtube.com/watch?v=rfcstL5eTbs&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=8"&gt;https://www.youtube.com/watch?v=rfcstL5eTbs&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=8&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Reading data files in colab &lt;a href="https://www.youtube.com/watch?v=xf6qprxmBaM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=21"&gt;https://www.youtube.com/watch?v=xf6qprxmBaM&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=21&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;More ways to read data in colab &lt;a href="https://www.youtube.com/watch?v=NjRd41QtU14&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=22"&gt;https://www.youtube.com/watch?v=NjRd41QtU14&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;linear regression &lt;a href="https://www.youtube.com/watch?v=ZXSaLcFSOsU&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=20"&gt;https://www.youtube.com/watch?v=ZXSaLcFSOsU&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=20&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;nonlinear regression &lt;a href="https://www.youtube.com/watch?v=hbchKAgeDcU&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=18"&gt;https://www.youtube.com/watch?v=hbchKAgeDcU&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=18&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;Miscellaneous
&lt;ul class="org-ul"&gt;
&lt;li&gt;hand written work in Jupyter lab &lt;a href="https://www.youtube.com/watch?v=5qCY9Eoeoyo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=9"&gt;https://www.youtube.com/watch?v=5qCY9Eoeoyo&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=9&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;uncertainty quantification &lt;a href="https://www.youtube.com/watch?v=KP-km6XedVg&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=27"&gt;https://www.youtube.com/watch?v=KP-km6XedVg&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=27&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;units in python &lt;a href="https://www.youtube.com/watch?v=au5Jwz_STXI&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=28"&gt;https://www.youtube.com/watch?v=au5Jwz_STXI&amp;amp;list=PL0sMmOaE_gs2yzwy54kLZk5c1ZH-Nh-62&amp;amp;index=28&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/11/23/pycse-YouTube-Channel.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.5&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[Youtube live-streamed research talks]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/06/29/Youtube-live-streamed-research-talks" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/06/29/Youtube-live-streamed-research-talks</id>
    <updated>2021-06-29T12:08:03Z</updated>
    <published>2021-06-29T12:07:46Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[Youtube live-streamed research talks]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/06/29/Youtube-live-streamed-research-talks"><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org561dda7"&gt;1. Machine learned potentials and automatic differentiation in molecular simulation&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1244b7f"&gt;2. Leveraging machine learning to accelerate simulations of dilute alloy catalysts with adsorbates&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
For fun, I have been live-streaming some of our research talks from the past year. Two of these talks are shown below. This is an experiment of sorts, let me know if you like them!
&lt;/p&gt;

&lt;div id="outline-container-org561dda7" class="outline-2"&gt;
&lt;h2 id="org561dda7"&gt;&lt;span class="section-number-2"&gt;1.&lt;/span&gt; Machine learned potentials and automatic differentiation in molecular simulation&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
Machine learned potentials are revolutionizing molecular simulations. In this talk, I will introduce what machine learned potentials are, how we think about them, and how we create them. Then, I will show an example of how we use them to model segregation in a metal alloy surface at many different bulk compositions. Finally, I will show how automatic differentiation, which is one of the foundations of machine learning, can be used more broadly in scientific programming with derivatives.
&lt;/p&gt;

&lt;p&gt;
This was the second talk I did, but it is somewhat of an introduction to the next talk below.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/KKPogR9iObg" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1244b7f" class="outline-2"&gt;
&lt;h2 id="org1244b7f"&gt;&lt;span class="section-number-2"&gt;2.&lt;/span&gt; Leveraging machine learning to accelerate simulations of dilute alloy catalysts with adsorbates&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
In this talk I talk about how we use machine learning to build cheap and accurate surrogate models of alloy catalyst surfaces in the dilute limit. I will show how we use this to simulate acrolein adsorption on dilute Ag-Pd alloys.
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/UGmv7IIqM_8" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/06/29/Youtube-live-streamed-research-talks.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4.6&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication "Machine-learning accelerated geometry optimization in molecular simulation"]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/06/21/New-publication-Machine-learning-accelerated-geometry-optimization-in-molecular-simulation" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/06/21/New-publication-Machine-learning-accelerated-geometry-optimization-in-molecular-simulation</id>
    <updated>2021-06-23T12:40:32Z</updated>
    <published>2021-06-21T11:52:32Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication "Machine-learning accelerated geometry optimization in molecular simulation"]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/06/21/New-publication-Machine-learning-accelerated-geometry-optimization-in-molecular-simulation"><![CDATA[


&lt;p&gt;
Geometry optimization and transition state searches are two very common tasks in molecular simulation. Typically every one of these is done from scratch, and they can only be made faster by using a better initial guess. Typical optimization algorithms use some variation of gradient descent, and the best ones also use an iterative approach to estimate the Hessian (second derivatives). The problem is we do not know the underlying function that is being optimized, so there is hardly any choice to benefit from the Hessian (which allows bigger, more accurate steps to be taken).
&lt;/p&gt;

&lt;p&gt;
In this paper, we use machine learning to develop a surrogate model that is cheap compared to the DFT calculations, and that has an uncertainty quantification so we can tell when it is accurate. This allows us to take many cheap steps when the surrogate model is accurate, and only do expensive calculations when needed. More importantly though, the surrogate model works across many different geometry optimizations, which allows us to benefit from previous calculations. We show this works on a variety of atomic geometries ranging from metal slabs, slabs with adsorbates, and nanoparticle geometries, as well as with nudged elastic band calculations for transitions state searches.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;yang-2021-machin-learn&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Yilin Yang and Omar A. Jim{\'e}nez-Negr{\'o}n and John R.
                  Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Machine-Learning Accelerated Geometry Optimization in
                  Molecular Simulation},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Chemical Physics},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       154,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       23,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        234704,
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1063/5.0049665&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1063/5.0049665&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/5.0049665'&gt;&lt;/div&gt;
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/QQlnazEzVtk" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/06/21/New-publication-"Machine-learning-accelerated-geometry-optimization-in-molecular-simulation".org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4.6&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication - Semi-grand Canonical Monte Carlo Simulation of the Acrolein induced Surface Segregation and Aggregation of AgPd with Machine Learning Surrogate Models]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2021/03/07/New-publication-Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2021/03/07/New-publication-Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models</id>
    <updated>2021-06-24T16:37:05Z</updated>
    <published>2021-03-07T16:00:00Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication - Semi-grand Canonical Monte Carlo Simulation of the Acrolein induced Surface Segregation and Aggregation of AgPd with Machine Learning Surrogate Models]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2021/03/07/New-publication-Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models"><![CDATA[


&lt;p&gt;
Modeling alloys is tricky, and modeling dilute alloys has been an open challenge for a long time. Segregation is one of the biggest challenges; the surface composition is not the same as the bulk, and is influenced by adsorption. Although we know that the composition varies to lower the surface free energy, the configurational degrees of freedom make it difficult to find the lowest energy arrangement of atoms. In the dilute limit, the quantum chemical calculations and Monte Carlo simulates we do become very expensive due to the unit cell size. In this work, we use machine learning to build surrogate models for the configurational energy of an alloy slab in the dilute limit. Then, we use those models in conjunction with a semi-grand canonical Monte Carlo (MC) simulation to solve several of these problems. First, by fixing the alloy chemical potential at the desired dilute limit, we avoid the need for large unit cells. Second, the surrogate models are much more efficient than DFT, so we can use them in the MC simulations to run tens of thousands of simulation steps to get the required samples for reliable statistical averaging. In dilute alloys, the focus is on the unique catalytic properties of single atoms of an active metal like Pd in an inert metal like Ag. In the single atom limit though, there are few active sites. If you increase the bulk concentration, at some point the single atoms begin to aggregate into dimers and trimers, and adsorbates can make the aggregation happen faster. Aggregation is undesirable because it usually leads to lower selectivity, and more bulk like reactivity. An open question has been how do you design alloy catalysts under reaction conditions, given all this complexity. We apply this approach to the adsorption of acrolein on a dilute AgPd alloy, and show how to use the method to identify the bulk concentration where aggregation begins in a reactive environment.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;liu-2021-semi-grand&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Mingjie Liu and Yilin Yang and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Semi-Grand Canonical Monte Carlo Simulation of the Acrolein
                  Induced Surface Segregation and Aggregation of {AgPd} With
                  Machine Learning Surrogate Models},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Chemical Physics},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       154,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       13,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        134701,
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1063/5.0046440&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1063/5.0046440&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/5.0046440'&gt;&lt;/div&gt;
&lt;/p&gt;


&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/fOTLqkh748A" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/03/07/New-publication---Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4.6&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication SingleNN - Modified Behler–Parrinello Neural Network with Shared Weights for Atomistic Simulations with Transferability]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability</id>
    <updated>2021-06-21T20:40:47Z</updated>
    <published>2020-07-09T11:35:41Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication SingleNN - Modified Behler–Parrinello Neural Network with Shared Weights for Atomistic Simulations with Transferability]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability"><![CDATA[


&lt;p&gt;
Many machine learned potentials work by creating a numeric fingerprint that represents the local atomic environment around an atom, and then "machine learning" a function that computes the atomic energy for that atom. The total energy of an atomic configuration is then simply the sum of the atomic energies, and the forces are simply the derivative of that energy with respect to the atomic positions. In the Behler-Parrinello formulation, each element gets its own neural network for these calculations. In this work, we show that a single neural network with multiple outputs can be used instead. This means that all the elements share the weights in the neural network, and the atomic energy of each element is linearly proportional to the output of the last hidden layer. This has some benefits for transferability and suggests that there is a common nonlinear dimensional transform of the numeric fingerprints for the elements in this study.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;liu-2020-singl&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Mingjie Liu and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Singlenn: Modified Behler-Parrinello Neural Network With
                  Shared Weights for Atomistic Simulations With Transferability},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Physical Chemistry C},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       124,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       32,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {17811-17818},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2020,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1021/acs.jpcc.0c04225&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1021/acs.jpcc.0c04225&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/acs.jpcc.0c04225'&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nKwbpaV8dts" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/search?q=https://kitchingroup.cheme.cmu.edu/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability/"&gt;Discuss on Twitter&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2020/07/09/New-publication-SingleNN---Modified-Behler–Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[New publication - Parallelized Screening of Characterized and DFT-Modelled Bimetallic Colloidal Co-Catalysts for Photocatalytic Hydrogen Evolution]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2020/03/10/New-publication-Parallelized-Screening-of-Characterized-and-DFT-Modelled-Bimetallic-Colloidal-Co-Catalysts-for-Photocatalytic-Hydrogen-Evolution" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2020/03/10/New-publication-Parallelized-Screening-of-Characterized-and-DFT-Modelled-Bimetallic-Colloidal-Co-Catalysts-for-Photocatalytic-Hydrogen-Evolution</id>
    <updated>2021-06-22T16:52:43Z</updated>
    <published>2020-03-10T10:20:52Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="news" />
    <summary type="html"><![CDATA[New publication - Parallelized Screening of Characterized and DFT-Modelled Bimetallic Colloidal Co-Catalysts for Photocatalytic Hydrogen Evolution]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2020/03/10/New-publication-Parallelized-Screening-of-Characterized-and-DFT-Modelled-Bimetallic-Colloidal-Co-Catalysts-for-Photocatalytic-Hydrogen-Evolution"><![CDATA[


&lt;p&gt;
Generating renewable hydrogen is an important capability for reducing CO&lt;sub&gt;2&lt;/sub&gt; emissions. In this work we use a photo-driven process where light interacts with a photosensitizer to generate electrons that reduce metal ions in solution to create nanoparticle catalysts, which subsequently catalyze hydrogen evolution from the oxidation of an amino alcohol. A challenge in this work is figuring out what the synthesis conditions are that lead to high activity; the metal salt compositions and concentrations, photosensitizer concentration, the concentration of amino alcohol and solvent choices all impact the catalytic performance. Exploring all these variables one at a time is expensive and time-consuming. To address this, we used a 96-well plate photoreactor that enabled us to run many experiments in parallel using a colorimetric hydrogen detecting tape to measure activity. This allowed us to explore many bimetallic co-catalysts comprised of Pd/Sn, Pd/Mo, Pd/Ru, Pd/Pb, Pd/Ni, Ni/Sn, Mo/Sn and Pt/Sn. Of these we found Pd/Sn showed the highest synergistic behavior, and best activity. We also show using DFT that Pd/Sn has a near optimal hydrogen adsorption energy, which is consistent with other highly active hydrogen evolution catalysts. This work shows an effective way to quickly screen hundreds of reaction conditions to explore the relationship between synthesis conditions and catalytic activity.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;lopato-2020-paral-screen&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Eric M. Lopato and Emily A Eikey and Zoe C Simon and Seoin
                  Back and Kevin Tran and Jacqueline Lewis and Jakub F.
                  Kowalewski and Sadegh Yazdi and John R. Kitchin and Zachary W.
                  Ulissi and Jill E. Millstone and Stefan Bernhard},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Parallelized Screening of Characterized and {DFT}-Modelled
                  Bimetallic Colloidal Co-Catalysts for Photocatalytic Hydrogen
                  Evolution},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {ACS Catalysis},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       {10},
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {7},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {4244-4252},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2020,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1021/acscatal.9b05404&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1021/acscatal.9b05404&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/acscatal.9b05404'&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/pyiXLrcgNfI" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2020/03/10/New-publication---Parallelized-Screening-of-Characterized-and-DFT-Modelled-Bimetallic-Colloidal-Co-Catalysts-for-Photocatalytic-Hydrogen-Evolution.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4.6&lt;/p&gt;]]></content>
  </entry>
  <entry>
    <author>
      <name></name>
      <uri>https://kitchingroup.cheme.cmu.edu/blog</uri>
    </author>
    <title type="html"><![CDATA[Using autograd to plot implicit functions]]></title>
    <link rel="alternate" type="text/html" href="https://kitchingroup.cheme.cmu.edu/blog/2019/10/02/Using-autograd-to-plot-implicit-functions" />
    <id>https://kitchingroup.cheme.cmu.edu/blog/2019/10/02/Using-autograd-to-plot-implicit-functions</id>
    <updated>2019-10-02T21:30:46Z</updated>
    <published>2019-10-02T21:30:46Z</published>
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="implicit-function" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="autograd" />
    <category scheme="https://kitchingroup.cheme.cmu.edu/blog" term="nonlinear-algebra" />
    <summary type="html"><![CDATA[Using autograd to plot implicit functions]]></summary>
    <content type="html" xml:base="https://kitchingroup.cheme.cmu.edu/blog/2019/10/02/Using-autograd-to-plot-implicit-functions"><![CDATA[


&lt;p&gt;
Consider the solution to these equations (adapted from &lt;a href="https://www.mathworks.com/help/optim/ug/fsolve.html"&gt;https://www.mathworks.com/help/optim/ug/fsolve.html&lt;/a&gt;):
&lt;/p&gt;

&lt;p&gt;
\(e^{-e^{-(x_1 + x_2)}} = x_2 (1 + x_1^2)\)
&lt;/p&gt;

&lt;p&gt;
and
&lt;/p&gt;

&lt;p&gt;
\(x_1 \cos(x_2) + x_2 \sin(x_1) = 1/2\)
&lt;/p&gt;

&lt;p&gt;
It is not clear how many solutions there are to this set of equations, or what you should guess for the initial guess. Usually, the best way to see where a solution might be is to plot the equations and see where they intersect. These equations are implicit though, and it is not easy to plot them because we cannot solve for \(x_2\) in terms of \(x_1\) in either case. Here we explore a strategy to get plots so we can see where solutions could be.
&lt;/p&gt;

&lt;p&gt;
The idea is that we find one solution to each equation independently. Then, we derive a differential equation for each equation so we can integrate it to find the curve that is defined by the implicit function.  First, we find a solution for each equation. We guess a value for \(x_2\) and then find the value of \(x_1\) that solves each equation independently.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; autograd.numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; np.exp(-np.exp(-(x1 + x2))) - x2 * (1 + x1**2)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f2&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x1 * np.cos(x2) + x2 * np.sin(x1) - 0.5

&lt;span style="color: #BA36A5;"&gt;x2_1&lt;/span&gt; = 0.6
x1_1, = fsolve(f1, 0, args=(x2_1,))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'f1: '&lt;/span&gt;, x1_1, x2_1)

&lt;span style="color: #BA36A5;"&gt;x2_2&lt;/span&gt; = 1.0
x1_2, = fsolve(f2, 0 ,args=(x2_2,))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'f2: '&lt;/span&gt;, x1_2, x2_2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
f1:  0.08638978040861575 0.6
f2:  0.32842406163614396 1.0
&lt;/p&gt;

&lt;p&gt;
Next, we need a differential equation that is \(dx_2/dx_1\). If we had that, we could just integrate it from one of the starting points above, and get the curve we want. The functions are implicit, so we have to use the implicit derivative, which for the first equation is \(dx_2/dx_1 = -df1/dx_1 / df1/dx_2\). We will get these gradients from autograd. Then, we just integrate the solution. Here we do this for the first equation.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; solve_ivp
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; grad

&lt;span style="color: #BA36A5;"&gt;df1dx1&lt;/span&gt; = grad(f1, 0)
&lt;span style="color: #BA36A5;"&gt;df1dx2&lt;/span&gt; = grad(f1, 1)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dx2dx1_1&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -df1dx1(x1, x2) / df1dx2(x1, x2)

&lt;span style="color: #BA36A5;"&gt;x1_span&lt;/span&gt; = (x1_1, 1)
&lt;span style="color: #BA36A5;"&gt;x2_0&lt;/span&gt; = (x2_1, )
&lt;span style="color: #BA36A5;"&gt;sol1&lt;/span&gt; = solve_ivp(dx2dx1_1, x1_span, x2_0, max_step=0.1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And then, we do it for the second equation.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;df2dx1&lt;/span&gt; = grad(f2, 0)
&lt;span style="color: #BA36A5;"&gt;df2dx2&lt;/span&gt; = grad(f2, 1)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dx2dx1_2&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -df2dx1(x1, x2) / df2dx2(x1, x2)

&lt;span style="color: #BA36A5;"&gt;x1_span&lt;/span&gt; = (x1_2, 1)
&lt;span style="color: #BA36A5;"&gt;x2_0&lt;/span&gt; = (x2_2, )
&lt;span style="color: #BA36A5;"&gt;sol2&lt;/span&gt; = solve_ivp(dx2dx1_2, x1_span, x2_0, max_step=0.1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Finally, we plot the two solutions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(sol1.t, sol1.y.T)
plt.plot(sol2.t, sol2.y.T)
plt.xlabel(&lt;span style="color: #008000;"&gt;'$x_1$'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'$x_2$'&lt;/span&gt;)
plt.legend([&lt;span style="color: #008000;"&gt;'f1'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'f2'&lt;/span&gt;])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/b770a79094dc5fa34b51ebeed23401d697cc0f01.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
You can see now that in this range, there is only one intersection, i.e. one solution, and it is near \(x_1=0.4, x_2=0.6\). We can finally use that as an initial guess to find the only solution in this region, with confidence we are not missing any solutions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(X):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;x1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;x2&lt;/span&gt; = X
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; [f1(x1, x2), f2(x1, x2)]

fsolve(objective, [0.4, 0.6])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
array([0.35324662, 0.60608174])
&lt;/pre&gt;

&lt;p&gt;
That is the same solution as reported at the Matlab site. Another use of autograd for the win here.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/10/02/Using-autograd-to-plot-implicit-functions.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.3&lt;/p&gt;]]></content>
  </entry>
</feed>
