<?xml version="1.0" encoding="UTF-8"?>

<rss version="2.0"
     xmlns:content="http://purl.org/rss/1.0/modules/content/"
     xmlns:sy="http://purl.org/rss/1.0/modules/syndication/"
     xmlns:atom="http://www.w3.org/2005/Atom"
     xmlns:dc="http://purl.org/dc/elements/1.1/"
     xmlns:wfw="http://wellformedweb.org/CommentAPI/"
     >
  <channel>
    <atom:link href="http://kitchingroup.cheme.cmu.edu/blog/feed/index.xml" rel="self" type="application/rss+xml" />
    <title>The Kitchin Research Group</title>
    <link>http://jkitchin.github.io/blog</link>
    <description>Chemical Engineering at Carnegie Mellon University</description>
    <pubDate>Tue, 22 Jun 2021 00:41:07 GMT</pubDate>
    <generator>Blogofile</generator>
    <sy:updatePeriod>hourly</sy:updatePeriod>
    <sy:updateFrequency>1</sy:updateFrequency>
    
    <item>
      <title>New publication "Machine-learning accelerated geometry optimization in molecular simulation"</title>
      <link>http://jkitchin.github.io/blog/2021/06/21/New-publication-Machine-learning-accelerated-geometry-optimization-in-molecular-simulation</link>
      <pubDate>Mon, 21 Jun 2021 11:52:32 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">cQ-dgOUBVmMAvmRACTR8sdFCJtk=</guid>
      <description>New publication "Machine-learning accelerated geometry optimization in molecular simulation"</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Geometry optimization and transition state searches are two very common tasks in molecular simulation. Typically every one of these is done from scratch, and they can only be made faster by using a better initial guess. Typical optimization algorithms use some variation of gradient descent, and the best ones also use an iterative approach to estimate the Hessian (second derivatives). The problem is we do not know the underlying function that is being optimized, so there is hardly any choice to benefit from the Hessian (which allows bigger, more accurate steps to be taken).
&lt;/p&gt;

&lt;p&gt;
In this paper, we use machine learning to develop a surrogate model that is cheap compared to the DFT calculations, and that has an uncertainty quantification so we can tell when it is accurate. This allows us to take many cheap steps when the surrogate model is accurate, and only do expensive calculations when needed. More importantly though, the surrogate model works across many different geometry optimizations, which allows us to benefit from previous calculations. We show this works on a variety of atomic geometries ranging from metal slabs, slabs with adsorbates, and nanoparticle geometries, as well as with nudged elastic band calculations for transitions state searches.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;yang-2021-machin-learn&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Yilin Yang and Omar A. Jim{\'e}nez-Negr{\'o}n and John R.
                  Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Machine-Learning Accelerated Geometry Optimization in
                  Molecular Simulation},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Chemical Physics},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       154,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       23,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        234704,
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1063/5.0049665&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1063/5.0049665&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/5.0049665'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021/06/21/New-publication-"Machine-learning-accelerated-geometry-optimization-in-molecular-simulation".org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication - Semi-grand Canonical Monte Carlo Simulation of the Acrolein induced Surface Segregation and Aggregation of AgPd with Machine Learning Surrogate Models</title>
      <link>http://jkitchin.github.io/blog/2021/03/07/New-publication-Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models</link>
      <pubDate>Sun, 07 Mar 2021 16:00:00 EST</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">5sO-Z6FdMsePS6WkBhd6-8uQ0kg=</guid>
      <description>New publication - Semi-grand Canonical Monte Carlo Simulation of the Acrolein induced Surface Segregation and Aggregation of AgPd with Machine Learning Surrogate Models</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Modeling alloys is tricky, and modeling dilute alloys has been an open challenge for a long time. Segregation is one of the biggest challenges; the surface composition is not the same as the bulk, and is influenced by adsorption. Although we know that the composition varies to lower the surface free energy, the configurational degrees of freedom make it difficult to find the lowest energy arrangement of atoms. In the dilute limit, the quantum chemical calculations and Monte Carlo simulates we do become very expensive due to the unit cell size. In this work, we use machine learning to build surrogate models for the configurational energy of an alloy slab in the dilute limit. Then, we use those models in conjunction with a semi-grand canonical Monte Carlo (MC) simulation to solve several of these problems. First, by fixing the alloy chemical potential at the desired dilute limit, we avoid the need for large unit cells. Second, the surrogate models are much more efficient than DFT, so we can use them in the MC simulations to run tens of thousands of simulation steps to get the required samples for reliable statistical averaging. In dilute alloys, the focus is on the unique catalytic properties of single atoms of an active metal like Pd in an inert metal like Ag. In the single atom limit though, there are few active sites. If you increase the bulk concentration, at some point the single atoms begin to aggregate into dimers and trimers, and adsorbates can make the aggregation happen faster. Aggregation is undesirable because it usually leads to lower selectivity, and more bulk like reactivity. An open question has been how do you design alloy catalysts under reaction conditions, given all this complexity. We apply this approach to the adsorption of acrolein on a dilute AgPd alloy, and show how to use the method to identify the bulk concentration where aggregation begins in a reactive environment.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;liu-2021-semi-grand&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Mingjie Liu and Yilin Yang and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Semi-Grand Canonical Monte Carlo Simulation of the Acrolein
                  Induced Surface Segregation and Aggregation of {AgPd} With
                  Machine Learning Surrogate Models},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Chemical Physics},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       154,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       13,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        134701,
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2021,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1063/5.0046440&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1063/5.0046440&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1063/5.0046440'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2021-03-07/New-publication---Semi-grand-Canonical-Monte-Carlo-Simulation-of-the-Acrolein-induced-Surface-Segregation-and-Aggregation-of-AgPd-with-Machine-Learning-Surrogate-Models.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication SingleNN - Modified Behlerâ€“Parrinello Neural Network with Shared Weights for Atomistic Simulations with Transferability</title>
      <link>http://jkitchin.github.io/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability</link>
      <pubDate>Thu, 09 Jul 2020 11:35:41 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">Qu3xi47DSxlj2mjiEGnRJ6DQJ6A=</guid>
      <description>New publication SingleNN - Modified Behlerâ€“Parrinello Neural Network with Shared Weights for Atomistic Simulations with Transferability</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Many machine learned potentials work by creating a numeric fingerprint that represents the local atomic environment around an atom, and then "machine learning" a function that computes the atomic energy for that atom. The total energy of an atomic configuration is then simply the sum of the atomic energies, and the forces are simply the derivative of that energy with respect to the atomic positions. In the Behler-Parrinello formulation, each element gets its own neural network for these calculations. In this work, we show that a single neural network with multiple outputs can be used instead. This means that all the elements share the weights in the neural network, and the atomic energy of each element is linearly proportional to the output of the last hidden layer. This has some benefits for transferability and suggests that there is a common nonlinear dimensional transform of the numeric fingerprints for the elements in this study.
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;liu-2020-singl&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Mingjie Liu and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Singlenn: Modified Behler-Parrinello Neural Network With
                  Shared Weights for Atomistic Simulations With Transferability},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {The Journal of Physical Chemistry C},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       124,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       32,
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        {17811-17818},
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2020,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1021/acs.jpcc.0c04225&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1021/acs.jpcc.0c04225&lt;/span&gt;},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1021/acs.jpcc.0c04225'&gt;&lt;/div&gt;
&lt;/p&gt;

&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/nKwbpaV8dts" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;

&lt;p&gt;
&lt;a href="https://twitter.com/search?q=https://kitchingroup.cheme.cmu.edu/blog/2020/07/09/New-publication-SingleNN-Modified-Behler-Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability/"&gt;Discuss on Twitter&lt;/a&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2021 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2020/07/09/New-publication-SingleNN---Modified-Behlerâ€“Parrinello-Neural-Network-with-Shared-Weights-for-Atomistic-Simulations-with-Transferability.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.4&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Using autograd to plot implicit functions</title>
      <link>http://jkitchin.github.io/blog/2019/10/02/Using-autograd-to-plot-implicit-functions</link>
      <pubDate>Wed, 02 Oct 2019 21:30:46 EDT</pubDate>
      <category><![CDATA[implicit-function]]></category>
      <category><![CDATA[autograd]]></category>
      <category><![CDATA[nonlinear-algebra]]></category>
      <guid isPermaLink="false">wHgJ4s626IZnowZ4a9K6z-zL8p0=</guid>
      <description>Using autograd to plot implicit functions</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Consider the solution to these equations (adapted from &lt;a href="https://www.mathworks.com/help/optim/ug/fsolve.html"&gt;https://www.mathworks.com/help/optim/ug/fsolve.html&lt;/a&gt;):
&lt;/p&gt;

&lt;p&gt;
\(e^{-e^{-(x_1 + x_2)}} = x_2 (1 + x_1^2)\)
&lt;/p&gt;

&lt;p&gt;
and
&lt;/p&gt;

&lt;p&gt;
\(x_1 \cos(x_2) + x_2 \sin(x_1) = 1/2\)
&lt;/p&gt;

&lt;p&gt;
It is not clear how many solutions there are to this set of equations, or what you should guess for the initial guess. Usually, the best way to see where a solution might be is to plot the equations and see where they intersect. These equations are implicit though, and it is not easy to plot them because we cannot solve for \(x_2\) in terms of \(x_1\) in either case. Here we explore a strategy to get plots so we can see where solutions could be.
&lt;/p&gt;

&lt;p&gt;
The idea is that we find one solution to each equation independently. Then, we derive a differential equation for each equation so we can integrate it to find the curve that is defined by the implicit function.  First, we find a solution for each equation. We guess a value for \(x_2\) and then find the value of \(x_1\) that solves each equation independently.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; autograd.numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f1&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; np.exp(-np.exp(-(x1 + x2))) - x2 * (1 + x1**2)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f2&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; x1 * np.cos(x2) + x2 * np.sin(x1) - 0.5

&lt;span style="color: #BA36A5;"&gt;x2_1&lt;/span&gt; = 0.6
x1_1, = fsolve(f1, 0, args=(x2_1,))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'f1: '&lt;/span&gt;, x1_1, x2_1)

&lt;span style="color: #BA36A5;"&gt;x2_2&lt;/span&gt; = 1.0
x1_2, = fsolve(f2, 0 ,args=(x2_2,))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'f2: '&lt;/span&gt;, x1_2, x2_2)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
f1:  0.08638978040861575 0.6
f2:  0.32842406163614396 1.0
&lt;/p&gt;

&lt;p&gt;
Next, we need a differential equation that is \(dx_2/dx_1\). If we had that, we could just integrate it from one of the starting points above, and get the curve we want. The functions are implicit, so we have to use the implicit derivative, which for the first equation is \(dx_2/dx_1 = -df1/dx_1 / df1/dx_2\). We will get these gradients from autograd. Then, we just integrate the solution. Here we do this for the first equation.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; solve_ivp
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; grad

&lt;span style="color: #BA36A5;"&gt;df1dx1&lt;/span&gt; = grad(f1, 0)
&lt;span style="color: #BA36A5;"&gt;df1dx2&lt;/span&gt; = grad(f1, 1)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dx2dx1_1&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -df1dx1(x1, x2) / df1dx2(x1, x2)

&lt;span style="color: #BA36A5;"&gt;x1_span&lt;/span&gt; = (x1_1, 1)
&lt;span style="color: #BA36A5;"&gt;x2_0&lt;/span&gt; = (x2_1, )
&lt;span style="color: #BA36A5;"&gt;sol1&lt;/span&gt; = solve_ivp(dx2dx1_1, x1_span, x2_0, max_step=0.1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And then, we do it for the second equation.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;df2dx1&lt;/span&gt; = grad(f2, 0)
&lt;span style="color: #BA36A5;"&gt;df2dx2&lt;/span&gt; = grad(f2, 1)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dx2dx1_2&lt;/span&gt;(x1, x2):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -df2dx1(x1, x2) / df2dx2(x1, x2)

&lt;span style="color: #BA36A5;"&gt;x1_span&lt;/span&gt; = (x1_2, 1)
&lt;span style="color: #BA36A5;"&gt;x2_0&lt;/span&gt; = (x2_2, )
&lt;span style="color: #BA36A5;"&gt;sol2&lt;/span&gt; = solve_ivp(dx2dx1_2, x1_span, x2_0, max_step=0.1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Finally, we plot the two solutions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
plt.plot(sol1.t, sol1.y.T)
plt.plot(sol2.t, sol2.y.T)
plt.xlabel(&lt;span style="color: #008000;"&gt;'$x_1$'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'$x_2$'&lt;/span&gt;)
plt.legend([&lt;span style="color: #008000;"&gt;'f1'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'f2'&lt;/span&gt;])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/b770a79094dc5fa34b51ebeed23401d697cc0f01.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
You can see now that in this range, there is only one intersection, i.e. one solution, and it is near \(x_1=0.4, x_2=0.6\). We can finally use that as an initial guess to find the only solution in this region, with confidence we are not missing any solutions.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;objective&lt;/span&gt;(X):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;x1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;x2&lt;/span&gt; = X
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; [f1(x1, x2), f2(x1, x2)]

fsolve(objective, [0.4, 0.6])
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
array([0.35324662, 0.60608174])
&lt;/pre&gt;

&lt;p&gt;
That is the same solution as reported at the Matlab site. Another use of autograd for the win here.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/10/02/Using-autograd-to-plot-implicit-functions.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Solving differential algebraic equations with help from autograd</title>
      <link>http://jkitchin.github.io/blog/2019/09/22/Solving-differential-algebraic-equations-with-help-from-autograd</link>
      <pubDate>Sun, 22 Sep 2019 12:59:25 EDT</pubDate>
      <category><![CDATA[dae]]></category>
      <category><![CDATA[autograd]]></category>
      <category><![CDATA[ode]]></category>
      <guid isPermaLink="false">eATX_e4VOuQRCAt5B_CujmZtj4w=</guid>
      <description>Solving differential algebraic equations with help from autograd</description>
      <content:encoded><![CDATA[


&lt;p&gt;
This problem is adapted from one in "Problem Solving in Chemical Engineering with Numerical Methods, Michael B. Cutlip, Mordechai Shacham".
&lt;/p&gt;

&lt;p&gt;
In the binary, batch distillation of benzene (1) and toluene (2), the moles of liquid \(L\) remaining as a function of the mole fraction of toluene (\(x_2\)) is expressed by:
&lt;/p&gt;

&lt;p&gt;
\(\frac{dL}{dx_2} = \frac{L}{x_2 (k_2 - 1)}\)
&lt;/p&gt;

&lt;p&gt;
where \(k_2\) is the vapor liquid equilibrium ratio for toluene. This can be computed as:
&lt;/p&gt;

&lt;p&gt;
\(k_i = P_i / P\) where \(P_i = 10^{A_i + \frac{B_i}{T +C_i}}\) and that pressure is in mmHg, and the temperature is in degrees Celsius.
&lt;/p&gt;

&lt;p&gt;
One difficulty in solving this problem is that the temperature is not constant; it changes with the composition. We know that the temperature changes to satisfy this constraint  \(k_1(T) x_1 + k_2(T) x_2 = 1\).
&lt;/p&gt;

&lt;p&gt;
Sometimes, one can solve for T directly, and substitute it into the first ODE, but this is not a possibility here. One way you might solve this is to use the constraint to find \(T\) inside an ODE function, but that is tricky; nonlinear algebra solvers need a guess and don't always converge, or may converge to non-physical solutions. They also require iterative solutions, so they will be slower than an approach where we just have to integrate the solution.  A better way is to derive a second ODE \(dT/dx_2\) from the constraint.  The constraint is implicit in \(T\), so We  compute it as \(dT/dx_2 = -df/dx_2 / df/dT\) where \(f(x_2, T) = k_1(T) x_1 + k_2(T) x_2  - 1 = 0\). This equation is used to compute the bubble point temperature. Note, it is possible to derive these analytically, but who wants to?  We can use autograd to get those derivatives for us instead.
&lt;/p&gt;

&lt;p&gt;
The following information is given:
&lt;/p&gt;

&lt;p&gt;
The total pressure is fixed at 1.2 atm, and the distillation starts at \(x_2=0.4\). There are initially 100 moles in the distillation.
&lt;/p&gt;

&lt;table border="2" cellspacing="0" cellpadding="6" rules="groups" frame="hsides"&gt;


&lt;colgroup&gt;
&lt;col  class="org-left" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;

&lt;col  class="org-right" /&gt;
&lt;/colgroup&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th scope="col" class="org-left"&gt;species&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;A&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;B&lt;/th&gt;
&lt;th scope="col" class="org-right"&gt;C&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td class="org-left"&gt;benzene&lt;/td&gt;
&lt;td class="org-right"&gt;6.90565&lt;/td&gt;
&lt;td class="org-right"&gt;-1211.033&lt;/td&gt;
&lt;td class="org-right"&gt;220.79&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td class="org-left"&gt;toluene&lt;/td&gt;
&lt;td class="org-right"&gt;6.95464&lt;/td&gt;
&lt;td class="org-right"&gt;-1344.8&lt;/td&gt;
&lt;td class="org-right"&gt;219.482&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;
We have to start by finding the initial temperature from the constraint.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; autograd.numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; grad
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; solve_ivp
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; scipy.optimize &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; fsolve
%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #BA36A5;"&gt;P&lt;/span&gt; = 760 * 1.2 &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;mmHg&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;A1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;B1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;C1&lt;/span&gt; = 6.90565, -1211.033,  220.79
&lt;span style="color: #BA36A5;"&gt;A2&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;B2&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;C2&lt;/span&gt; = 6.95464, -1344.8, 219.482

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;k1&lt;/span&gt;(T):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; 10**(A1 + B1 / (C1 + T)) / P

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;k2&lt;/span&gt;(T):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; 10**(A2 + B2 / (C2 + T)) / P

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;f&lt;/span&gt;(x2, T):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;x1&lt;/span&gt; = 1 - x2
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; k1(T) * x1 + k2(T) * x2 - 1

T0, = fsolve(&lt;span style="color: #0000FF;"&gt;lambda&lt;/span&gt; T: f(0.4, T), 96)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f&lt;span style="color: #008000;"&gt;'The initial temperature is {T0:1.2f} degC.'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
The initial temperature is 95.59 degC.
&lt;/p&gt;

&lt;p&gt;
Next, we compute the derivative we need. This derivative is derived from the constraint, which should ensure that the temperature changes as required to maintain the constraint.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;dfdx2&lt;/span&gt; = grad(f, 0)
&lt;span style="color: #BA36A5;"&gt;dfdT&lt;/span&gt; = grad(f, 1)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dTdx2&lt;/span&gt;(x2, T):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -dfdx2(x2, T) / dfdT(x2, T)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;ode&lt;/span&gt;(x2, X):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;L&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;T&lt;/span&gt; = X
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;dLdx2&lt;/span&gt; = L / (x2 * (k2(T) - 1))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; [dLdx2, dTdx2(x2, T)]
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Next we solve and plot the ODE.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;x2span&lt;/span&gt; = (0.4, 0.8)
&lt;span style="color: #BA36A5;"&gt;X0&lt;/span&gt; = (100, T0)
&lt;span style="color: #BA36A5;"&gt;sol&lt;/span&gt; = solve_ivp(ode, x2span, X0, max_step=0.01)

plt.plot(sol.t, sol.y.T)
plt.legend([&lt;span style="color: #008000;"&gt;'L'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'T'&lt;/span&gt;]);
plt.xlabel(&lt;span style="color: #008000;"&gt;'$x_2$'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'L, T'&lt;/span&gt;)
&lt;span style="color: #BA36A5;"&gt;x2&lt;/span&gt; = sol.t
&lt;span style="color: #BA36A5;"&gt;L&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;T&lt;/span&gt; = sol.y
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f&lt;span style="color: #008000;"&gt;'At x2={x2[-1]:1.2f} there are {L[-1]:1.2f} moles of liquid left at {T[-1]:1.2f} degC'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
At x2=0.80 there are 14.04 moles of liquid left at 108.57 degC
&lt;/p&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/a75e63c53e3c2cb02c40c808789084c337e174ff.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
You can see that the liquid level drops, and the temperature rises.
&lt;/p&gt;

&lt;p&gt;
Let's double check that the constraint is actually met. We do that qualitatively here by plotting it, and quantitatively by showing all values are close to 0.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #BA36A5;"&gt;constraint&lt;/span&gt; = k1(T) * (1 - x2) + k2(T) * x2 - 1
plt.plot(x2, constraint)
plt.ylim([-1, 1])
plt.xlabel(&lt;span style="color: #008000;"&gt;'$x_2$'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'constraint value'&lt;/span&gt;)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(np.allclose(constraint, np.zeros_like(constraint)))
constraint
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
True
&lt;/p&gt;

&lt;pre class="example"&gt;
array([ 2.22044605e-16,  4.44089210e-16,  2.22044605e-16,  0.00000000e+00,
        1.11022302e-15,  0.00000000e+00,  6.66133815e-16,  0.00000000e+00,
       -2.22044605e-16,  1.33226763e-15,  8.88178420e-16, -4.44089210e-16,
        4.44089210e-16,  1.11022302e-15, -2.22044605e-16,  0.00000000e+00,
       -2.22044605e-16, -1.11022302e-15,  4.44089210e-16,  0.00000000e+00,
       -4.44089210e-16,  4.44089210e-16, -6.66133815e-16, -4.44089210e-16,
        4.44089210e-16, -1.11022302e-16, -8.88178420e-16, -8.88178420e-16,
       -9.99200722e-16, -3.33066907e-16, -7.77156117e-16, -2.22044605e-16,
       -9.99200722e-16, -1.11022302e-15, -3.33066907e-16, -1.99840144e-15,
       -1.33226763e-15, -2.44249065e-15, -1.55431223e-15, -6.66133815e-16,
       -2.22044605e-16])
&lt;/pre&gt;


&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/bb2b32002658b8724d214f2441c9f55a97c565c8.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;


&lt;p&gt;
So indeed, the constraint is met! Once again, autograd comes to the rescue in making a computable derivative from an algebraic constraint so that we can solve a DAE as a set of ODEs using our regular machinery. Nice work autograd!
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/09/22/Solving-differential-algebraic-equations-with-help-from-autograd.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Sensitivity analysis with odeint and autograd</title>
      <link>http://jkitchin.github.io/blog/2019/09/13/Sensitivity-analysis-with-odeint-and-autograd</link>
      <pubDate>Fri, 13 Sep 2019 09:56:09 EDT</pubDate>
      <category><![CDATA[autograd]]></category>
      <category><![CDATA[ode]]></category>
      <guid isPermaLink="false">a-lpqe22WfbPZV59JCJkZAVvMR0=</guid>
      <description>Sensitivity analysis with odeint and autograd</description>
      <content:encoded><![CDATA[


&lt;p&gt;
In this &lt;a href="http://kitchingroup.cheme.cmu.edu/blog/2018/10/11/A-differentiable-ODE-integrator-for-sensitivity-analysis/"&gt;previous post&lt;/a&gt; I showed a way to do sensitivity analysis of the solution of a differential equation to parameters in the equation using autograd. The basic approach was to write a differentiable integrator, and then use it in a function so that autograd could take the derivative.
&lt;/p&gt;

&lt;p&gt;
Since that time, autograd has added &lt;a href="https://github.com/HIPS/autograd/blob/master/autograd/scipy/integrate.py"&gt;derivative support&lt;/a&gt; for &lt;code&gt;scipy.integrate.odeint&lt;/code&gt;. In this post we examine that. As usual with autograd, we have to import the autograd version of numpy, and the autograd version of odeint. We will find the derivative of the solution to an ODE (which is an array) so we need to also import the jacobian function. Finally, there is a subtle, and non-obvious requirement that we need to import the autograd tuple. That ensures that the variables are differentiable through the tuple we will use for the arguments.
&lt;/p&gt;

&lt;p&gt;
The differential equation we solve returns the concentration of a species as a function of time, and the solution depends on two parameters, i.e. \(C = f(t; k_1, k_{-1})\), and we are interested in the time-dependent sensitivity of \(C\) with respect to those parameters. The approach we use is to define a function that has those parameters as arguments. The function will solve the ODE and return the time-dependent solution. First we make that solution, mostly to see that the autograd version of odeint works.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; autograd.numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd.scipy.integrate &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; odeint
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; jacobian
&lt;span style="color: #0000FF;"&gt;from&lt;/span&gt; autograd.builtins &lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;tuple&lt;/span&gt;

&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt

&lt;span style="color: #BA36A5;"&gt;Ca0&lt;/span&gt; = 1.0
&lt;span style="color: #BA36A5;"&gt;k1&lt;/span&gt; = &lt;span style="color: #BA36A5;"&gt;k_1&lt;/span&gt; = 3.0

&lt;span style="color: #BA36A5;"&gt;tspan&lt;/span&gt; = np.linspace(0, 0.5)

&lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;C&lt;/span&gt;(K):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;k1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;k_1&lt;/span&gt; = K
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;def&lt;/span&gt; &lt;span style="color: #006699;"&gt;dCdt&lt;/span&gt;(Ca, t, k1, k_1):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; -k1 * Ca + k_1 * (Ca0 - Ca)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;sol&lt;/span&gt; = odeint(dCdt, Ca0, tspan, &lt;span style="color: #006FE0;"&gt;tuple&lt;/span&gt;((k1, k_1)))
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;return&lt;/span&gt; sol

plt.plot(tspan, C([k1, k_1]))
plt.xlim([tspan.&lt;span style="color: #006FE0;"&gt;min&lt;/span&gt;(), tspan.&lt;span style="color: #006FE0;"&gt;max&lt;/span&gt;()])
plt.xlabel(&lt;span style="color: #008000;"&gt;'t'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'C'&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/bca9e95a16f361ce6d92dd6efe90a2e653e014ef.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;


&lt;p&gt;
Now, the solution is an array, and we want the derivative of C with respect to the parameters at each time point. That means we want the jacobian derivative of the output with respect to the input. Here is the autograd approach to doing that. The jacobian function returns a function that we can evaluate to get the derivatives.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; time
&lt;span style="color: #BA36A5;"&gt;t0&lt;/span&gt; = time.time()
&lt;span style="color: #BA36A5;"&gt;dCdk&lt;/span&gt; = jacobian(C, 0)


&lt;span style="color: #BA36A5;"&gt;k_sensitivity&lt;/span&gt; = dCdk(np.array([k1, k_1]))

&lt;span style="color: #BA36A5;"&gt;k1_sensitivity&lt;/span&gt; = k_sensitivity[:, 0, 0]
&lt;span style="color: #BA36A5;"&gt;k_1_sensitivity&lt;/span&gt; = k_sensitivity[:, 0, 1]

plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(k1_sensitivity), label=&lt;span style="color: #008000;"&gt;'dC/dk1'&lt;/span&gt;)
plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(k_1_sensitivity), label=&lt;span style="color: #008000;"&gt;'dC/dk_1'&lt;/span&gt;)
plt.legend(loc=&lt;span style="color: #008000;"&gt;'best'&lt;/span&gt;)
plt.xlabel(&lt;span style="color: #008000;"&gt;'t'&lt;/span&gt;)
plt.ylabel(&lt;span style="color: #008000;"&gt;'sensitivity'&lt;/span&gt;)
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f&lt;span style="color: #008000;"&gt;'Elapsed time = {time.time() - t0:1.1f} seconds'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Elapsed time = 38.2 seconds
&lt;/p&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/3a0a58bb6d4b3e1b215c2918d511f3a8a3a2ca3d.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
That looks similar to the results from before. It is pretty slow I think, that took more than half a minute to work out. That is still faster and probably more correct than if I had to do it by hand. In contrast, however, the finite difference code below is comparatively very fast! I don't know what is slow in the autograd implementation. I guess it is an implementation detail.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numdifftools &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; nd
&lt;span style="color: #BA36A5;"&gt;t0&lt;/span&gt; = time.time()

&lt;span style="color: #BA36A5;"&gt;fdk1&lt;/span&gt;, &lt;span style="color: #BA36A5;"&gt;fdk_1&lt;/span&gt; = nd.Jacobian(C)([k1, k_1]).T
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f&lt;span style="color: #008000;"&gt;'Elapsed time = {time.time() - t0:1.1f} seconds'&lt;/span&gt;)

plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(fdk1), label=&lt;span style="color: #008000;"&gt;'fd dC/dk1'&lt;/span&gt;)
plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(fdk_1), label=&lt;span style="color: #008000;"&gt;'fd dC/dk_1'&lt;/span&gt;)
plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(k1_sensitivity), &lt;span style="color: #008000;"&gt;'y--'&lt;/span&gt;, label=&lt;span style="color: #008000;"&gt;'dC/dk1'&lt;/span&gt;)
plt.plot(tspan, np.&lt;span style="color: #006FE0;"&gt;abs&lt;/span&gt;(k_1_sensitivity),&lt;span style="color: #008000;"&gt;'m--'&lt;/span&gt;, label=&lt;span style="color: #008000;"&gt;'dC/dk_1'&lt;/span&gt;)
plt.legend(loc=&lt;span style="color: #008000;"&gt;'best'&lt;/span&gt;);
plt.xlabel(&lt;span style="color: #008000;"&gt;'t'&lt;/span&gt;);
plt.ylabel(&lt;span style="color: #008000;"&gt;'sensitivity'&lt;/span&gt;);
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Elapsed time = 0.1 seconds
&lt;/p&gt;

&lt;pre class="example"&gt;
&amp;lt;Figure size 432x288 with 1 Axes&amp;gt;
&lt;/pre&gt;


&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/be7bf4798396d6a27938715f6bb0e22b8f3e0b1c.png"&gt;&lt;/figure&gt; 
&lt;/p&gt;

&lt;p&gt;
You can see the two results are visually indistinguishable. Even the code is pretty similar. I would tend to prefer the autograd way since it should be less sensitive to finite difference artifacts, but it is nice to have an independent way to test if it is working.
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/09/13/Sensitivity-analysis-with-odeint-and-autograd.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>New publication in SoftwareX</title>
      <link>http://jkitchin.github.io/blog/2019/07/08/New-publication-in-SoftwareX</link>
      <pubDate>Mon, 08 Jul 2019 07:15:33 EDT</pubDate>
      <category><![CDATA[news]]></category>
      <category><![CDATA[publication]]></category>
      <guid isPermaLink="false">fmIo7oU0ElRNK5iJCK9Iv9po1wY=</guid>
      <description>New publication in SoftwareX</description>
      <content:encoded><![CDATA[


&lt;p&gt;
Bibliometrics are increasingly used to quantify scholarly productivity. In this paper, we introduce a Python package called &lt;a href="https://pypi.org/project/pybliometrics/"&gt;pybliometrics&lt;/a&gt; that provides a scriptable interface to Scopus to aggregate publication data for analysis. The package provides pretty comprehensive coverage of the APIs for author, abstract, affiliation and citation queries. The manuscript shows examples for downloading abstracts in bulk, building collaboration network graphs, and analyzing citation trends. You have to get a key from Scopus to access their databases, and the package provides some guidance on how to get it and configure the package. If you are interested in bibliometrics, this package may be useful to you!
&lt;/p&gt;


&lt;div class="org-src-container"&gt;
&lt;pre class="src src-bibtex"&gt;&lt;span style="color: #006699;"&gt;@article&lt;/span&gt;{&lt;span style="color: #D0372D;"&gt;rose-2019-pybliom&lt;/span&gt;,
  &lt;span style="color: #BA36A5;"&gt;author&lt;/span&gt; =       {Michael E. Rose and John R. Kitchin},
  &lt;span style="color: #BA36A5;"&gt;title&lt;/span&gt; =        {Pybliometrics: Scriptable Bibliometrics Using a Python
                  Interface To Scopus},
  &lt;span style="color: #BA36A5;"&gt;journal&lt;/span&gt; =      {SoftwareX},
  &lt;span style="color: #BA36A5;"&gt;volume&lt;/span&gt; =       10,
  &lt;span style="color: #BA36A5;"&gt;number&lt;/span&gt; =       {nil},
  &lt;span style="color: #BA36A5;"&gt;pages&lt;/span&gt; =        100263,
  &lt;span style="color: #BA36A5;"&gt;year&lt;/span&gt; =         2019,
  &lt;span style="color: #BA36A5;"&gt;doi&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;10.1016/j.softx.2019.100263&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;url&lt;/span&gt; =          {&lt;span style="color: #006DAF; text-decoration: underline;"&gt;https://doi.org/10.1016/j.softx.2019.100263&lt;/span&gt;},
  &lt;span style="color: #BA36A5;"&gt;DATE_ADDED&lt;/span&gt; =   {Mon Jul 8 07:06:58 2019},
}
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;script type='text/javascript' src='https://d1bxh8uas1mnw7.cloudfront.net/assets/embed.js'&gt;&lt;/script&gt;
&lt;div data-badge-type='medium-donut' class='altmetric-embed' data-badge-details='right' data-doi='10.1016/j.softx.2019.100263'&gt;&lt;/div&gt;
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/07/08/New-publication-in-SoftwareX.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.3&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>An improvement for figures in ipython + scimax</title>
      <link>http://jkitchin.github.io/blog/2019/03/12/An-improvement-for-figures-in-ipython-+-scimax</link>
      <pubDate>Tue, 12 Mar 2019 14:18:26 EDT</pubDate>
      <category><![CDATA[ipython]]></category>
      <guid isPermaLink="false">7JS92IXaWxu9Qw0ujiw9pNqIeuk=</guid>
      <description>An improvement for figures in ipython + scimax</description>
      <content:encoded><![CDATA[


&lt;p&gt;
One of the best features of ipython in scimax is automatic inline images that you do not have to name. This has had a downside though, and that is it is not easy to use this &lt;i&gt;and&lt;/i&gt; put attributes like names (so you can reference them later) or captions, or if you want a specific filename to get that. No more. Now you can use the &lt;code&gt;:ipyfile&lt;/code&gt; header argument to control these. For example, if you use this in the header of the next block, it will save the images into the filenames you specified (in the order they are defined), and add attributes to the output. The syntax is just a list of plists (in elispese).
&lt;/p&gt;

&lt;pre class="example"&gt;
:ipyfile '((:name "clockwise" :filename "obipy-resources/clockwise.png" :caption "A clockwise spiral.") (:name "counterclockwise" :filename "obipy-resources/counterclockwise.png" :caption "A counterclockwise spiral."))
&lt;/pre&gt;

&lt;p&gt;
That allows you to refer to the clockwise one in Figure &lt;a href="#clockwise"&gt;clockwise&lt;/a&gt; and the counterclockwise in Fig.  &lt;a href="#counterclockwise"&gt;counterclockwise&lt;/a&gt;. That may be helpful when using Ipython to write papers or for presentations where you might prefer named figures that are easy to find. Enjoy!
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;%matplotlib inline
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; matplotlib.pyplot &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; plt
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;t&lt;/span&gt; = np.linspace(0, 20 * np.pi, 350)
&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.exp(-0.1 * t) * np.sin(t)
&lt;span style="color: #BA36A5;"&gt;y&lt;/span&gt; = np.exp(-0.1 * t) * np.cos(t)

plt.plot(x, y)
plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

plt.figure()
plt.plot(y, x)

plt.axis(&lt;span style="color: #008000;"&gt;'equal'&lt;/span&gt;)

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'Length of t = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(&lt;span style="color: #006FE0;"&gt;len&lt;/span&gt;(t)))
&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(&lt;span style="color: #008000;"&gt;'x .dot. y = {}'&lt;/span&gt;.&lt;span style="color: #006FE0;"&gt;format&lt;/span&gt;(x @ y))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
Length of t = 350
x .dot. y = 1.3598389888491538
&lt;/p&gt;



&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/clockwise.png"&gt;&lt;figcaption&gt;A clockwise spiral.&lt;/figcaption&gt;&lt;/figure&gt; 
&lt;/p&gt;



&lt;p&gt;
&lt;figure&gt;&lt;img src="/media/counterclockwise.png"&gt;&lt;figcaption&gt;A counterclockwise spiral.&lt;/figcaption&gt;&lt;/figure&gt; 
&lt;/p&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/03/12/An-improvement-for-figures-in-ipython-+-scimax.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.1&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>Using results from one code block in another org-mode</title>
      <link>http://jkitchin.github.io/blog/2019/02/12/Using-results-from-one-code-block-in-another-org-mode</link>
      <pubDate>Tue, 12 Feb 2019 09:20:58 EST</pubDate>
      <category><![CDATA[emacs]]></category>
      <category><![CDATA[orgmode]]></category>
      <category><![CDATA[elisp]]></category>
      <guid isPermaLink="false">gzZgY5oqeB9thgLDRCfcJu-iwyw=</guid>
      <description>Using results from one code block in another org-mode</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org679863a"&gt;1. :var&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org1cd48f8"&gt;2. :cache&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org744145d"&gt;3. :wrap&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org603dd14"&gt;4. :file&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org61d9dad"&gt;5. "remote" data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf9c3e0a"&gt;6. Manually saving data in files&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org578795b"&gt;7. An appendix for data&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org828ee8b"&gt;8. Caveats&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
One really great feature in org-mode is you have many options to pass data between code-blocks. In this post we look at some of these options using emacs-lisp as the language. This runs in a &lt;i&gt;session&lt;/i&gt; where you can keep variables in memory between blocks, and use them in subsequent blocks.
&lt;/p&gt;

&lt;p&gt;
Here we set a variable to a value.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;setq&lt;/span&gt; some-variable 42)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
42
&lt;/pre&gt;


&lt;p&gt;
Then later in another block we can use that variable:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(+ some-variable 1)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
43
&lt;/pre&gt;


&lt;p&gt;
While you are in the session, &lt;code&gt;some-variable&lt;/code&gt; can be used. If you want some mind-bending trouble, the emacs-lisp session is global, and you can access &lt;code&gt;some-variable&lt;/code&gt; even in another buffer! Don't do that. When you close emacs this variable will disappear, and all that is left are the results from above.
&lt;/p&gt;

&lt;p&gt;
There is another way to pass information from one block to another using named src blocks and variables in the block header. This allows you to pass data between blocks by name, and you will see later you can even access the results by name from other files.
&lt;/p&gt;

&lt;div id="outline-container-org679863a" class="outline-2"&gt;
&lt;h2 id="org679863a"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; :var&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
First, we give our src block a name like this:
&lt;/p&gt;

&lt;pre class="example"&gt;
#+name: block-1
#+BEGIN_SRC emacs-lisp
(current-time-string)
#+END_SRC
&lt;/pre&gt;

&lt;p&gt;
When we run this, the results will have a name too.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="org0eee06d"&gt;(current-time-string)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Tue Feb 12 08:19:23 2019
&lt;/pre&gt;


&lt;p&gt;
Now, we can use the named result as &lt;i&gt;input&lt;/i&gt; to a new block using the :var header.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC emacs-lisp :var input=block-1
(format "We got %S in block-1" input)
#+END_SRC
&lt;/pre&gt;

&lt;p&gt;
When we run this block, emacs will run block-1 and put the output in to the variable &lt;code&gt;input&lt;/code&gt; which we use inside the code block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(format &lt;span style="color: #008000;"&gt;"We got %S in block-1"&lt;/span&gt; input)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got "Tue Feb 12 08:20:44 2019" in block-1
&lt;/pre&gt;


&lt;p&gt;
Some things to note:
&lt;/p&gt;
&lt;ol class="org-ol"&gt;
&lt;li&gt;Every time you run this, block-1 gets rerun.&lt;/li&gt;
&lt;li&gt;The results in this block are not the same as in block-1&lt;/li&gt;
&lt;li&gt;The results in block-1 are not changed when you run the second block.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
You may not want to rerun block-1 each time; maybe it is an expensive calculation, or maybe it should not be changed. You can prevent this behavior by using the :cache header.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org1cd48f8" class="outline-2"&gt;
&lt;h2 id="org1cd48f8"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; :cache&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
If you specify &lt;code&gt;:cache yes&lt;/code&gt; then org-mode &lt;i&gt;should&lt;/i&gt; store a hash of the code block with the results, and if the code block hasn't changed then it should not run again.
&lt;/p&gt;

&lt;pre class="example"&gt;
#+name: block-2
#+BEGIN_SRC emacs-lisp :cache yes
(current-time-string)
#+END_SRC
&lt;/pre&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="orgb1aedb8"&gt;(current-time-string)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
Tue Feb 12 08:06:22 2019
&lt;/pre&gt;


&lt;p&gt;
Now, we use block-2 as input to a block, we see the output is the same as the output from block-2.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(format &lt;span style="color: #008000;"&gt;"We got %S in block-2"&lt;/span&gt; input)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got "Tue Feb 12 08:06:22 2019" in block-2
&lt;/pre&gt;


&lt;p&gt;
Ok, but what if my results are too large to put in the buffer, or too complex for text? You still have some options.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org744145d" class="outline-2"&gt;
&lt;h2 id="org744145d"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; :wrap&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
Suppose we generate some json in one block, and we want to use it in another block. We still want to see the json in the buffer as an intermediate result. We can wrap the output in a json block like this.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="orgd0725ee"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;)
(json-encode `((&lt;span style="color: #008000;"&gt;"date"&lt;/span&gt; . ,(current-time-string))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;div class="json"&gt;
&lt;p&gt;
{"date":"Tue Feb 12 08:30:20 2019"}
&lt;/p&gt;

&lt;/div&gt;

&lt;p&gt;
Then, we can simply input that output into a new block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(format &lt;span style="color: #008000;"&gt;"We got %S in json"&lt;/span&gt; input)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got "{\"date\":\"Tue Feb 12 08:30:20 2019\"}
" in json
&lt;/pre&gt;


&lt;p&gt;
This admittedly still pretty simple, text-based data. It is probably not a good idea to do this with binary data.
&lt;/p&gt;

&lt;p&gt;
Note you can refer to this result even in another org-file:
&lt;/p&gt;

&lt;pre class="example"&gt;
#+BEGIN_SRC emacs-lisp :var input=./2019-02-12.org:json
input
#+END_SRC

#+RESULTS:
: {"date":"Tue Feb 12 08:30:20 2019"}
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org603dd14" class="outline-2"&gt;
&lt;h2 id="org603dd14"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; :file&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
It may be that your data is too large to conveniently put into your org-file, or maybe it is binary data. No problem, just put it into an external file using the :file header. It looks like this:
&lt;/p&gt;

&lt;pre class="example"&gt;
#+name: block-3
#+BEGIN_SRC emacs-lisp :cache yes :file block-3
(require 'json)
(json-encode `(("date" . ,(current-time-string))))
#+END_SRC

#+RESULTS[a14d376653bd8c40a0961ca95f21d8837dddec66]: block-3
[[file:block-3]]
&lt;/pre&gt;


&lt;p&gt;
Note that you have to provide a file name for this. Sometimes that is nice if you want a human recognizable file to send to someone, but it would also be nice if there was an automatic naming scheme, e.g. based on an sha-1 hash of the src block.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="org5f97d46"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;)
(json-encode `((&lt;span style="color: #008000;"&gt;"date"&lt;/span&gt; . ,(current-time-string))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;a href="/media/block-3"&gt;block-3&lt;/a&gt; 
&lt;/p&gt;

&lt;p&gt;
Now you can use other tools to check out the file. Here we can still use simple shell tools.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat block-3
&lt;/pre&gt;
&lt;/div&gt;


&lt;p&gt;
The output of block-3 is a file name:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;input
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
/Users/jkitchin/Box Sync/kitchingroup/jkitchin/journal/2019/02/12/block-3
&lt;/pre&gt;


&lt;p&gt;
So you can use it in a new block to read the data in, and then do something new with it.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;with-temp-buffer&lt;/span&gt;
  (insert-file-contents input)
  (format &lt;span style="color: #008000;"&gt;"We got %S in block-3"&lt;/span&gt; (json-read-from-string (buffer-string))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got ((date . "Tue Feb 12 08:46:55 2019")) in block-3
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org61d9dad" class="outline-2"&gt;
&lt;h2 id="org61d9dad"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; "remote" data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;p&gt;
The blocks do not have to be in order. If you want, you can put your blocks in an &lt;a href="#org578795b"&gt;appendix&lt;/a&gt;, and then just have analysis blocks here that use them. That way, you can have short blocks here that are more readable, but longer, more complex blocks elsewhere that do not clutter your document.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;with-temp-buffer&lt;/span&gt;
  (insert-file-contents input)
  (format &lt;span style="color: #008000;"&gt;"We got %S in the appendix data"&lt;/span&gt; (json-read-from-string (buffer-string))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got "{\"date\":\"Tue Feb 12 09:11:12 2019\"}" in the appendix data
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-orgf9c3e0a" class="outline-2"&gt;
&lt;h2 id="orgf9c3e0a"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Manually saving data in files&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
Note you can also manually save data in a file, for example:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="org99c8008"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;)
(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((f &lt;span style="color: #008000;"&gt;"block-4.json"&lt;/span&gt;))
  (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; f
    (prin1
     (json-encode `((&lt;span style="color: #008000;"&gt;"date"&lt;/span&gt; . ,(current-time-string))))
     (current-buffer)))
  f)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
block-4.json
&lt;/pre&gt;


&lt;p&gt;
We put the filename as the last variable which is returned by the block, so that we don't have to manually type it later in the next block. You know, try not to repeat yourself&amp;#x2026;
&lt;/p&gt;

&lt;p&gt;
This just shows we did write out to our file:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-sh"&gt;cat block-4.json
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
And we read the file in here, using the filename from block-4 as an input variable.
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp"&gt;(&lt;span style="color: #0000FF;"&gt;with-temp-buffer&lt;/span&gt;
  (insert-file-contents input)
  (format &lt;span style="color: #008000;"&gt;"We got %S in block-4"&lt;/span&gt; (json-read-from-string (buffer-string))))
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
We got "{\"date\":\"Tue Feb 12 08:51:25 2019\"}" in block-4
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org578795b" class="outline-2"&gt;
&lt;h2 id="org578795b"&gt;&lt;span class="section-number-2"&gt;7&lt;/span&gt; An appendix for data&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-7"&gt;
&lt;div class="org-src-container"&gt;
&lt;pre class="src src-emacs-lisp" id="orgfc06cf8"&gt;(&lt;span style="color: #0000FF;"&gt;require&lt;/span&gt; '&lt;span style="color: #D0372D;"&gt;json&lt;/span&gt;)
(&lt;span style="color: #0000FF;"&gt;let&lt;/span&gt; ((f &lt;span style="color: #008000;"&gt;"appendix.json"&lt;/span&gt;))
  (&lt;span style="color: #0000FF;"&gt;with-temp-file&lt;/span&gt; f
    (prin1
     (json-encode `((&lt;span style="color: #008000;"&gt;"date"&lt;/span&gt; . ,(current-time-string))))
     (current-buffer)))
  f)
&lt;/pre&gt;
&lt;/div&gt;

&lt;pre class="example"&gt;
appendix.json
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;


&lt;div id="outline-container-org828ee8b" class="outline-2"&gt;
&lt;h2 id="org828ee8b"&gt;&lt;span class="section-number-2"&gt;8&lt;/span&gt; Caveats&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-8"&gt;
&lt;p&gt;
Using org-mode like this is almost always finding the right tradeoffs in what is persistent, and where is it stored. Not all of the intermediate data/calculations are stored; if they are really cheap you can just run the code blocks again. If they are really small, i.e. easy for your to read in a few lines, you can store them in the document. If they are really large, you can store them in a file.
&lt;/p&gt;

&lt;p&gt;
The beauty of having everything in an org-file is you have a single file that is easy to transport. When the files get too large though, it can become impractical, e.g. emacs may slow down if you try to put thousands of lines of xml data into the buffer. Then, you have to make some decisions about what to keep, where to keep it, and in what form to keep it.
&lt;/p&gt;

&lt;p&gt;
For short projects where you only need a single compute session, having everything in memory may be fine. For longer projects, say one that is long enough you will close all the buffers, and possibly restart emacs in between working on it, then you have to make some decisions about what to save from each block so you can continue the work in the next session. Again, you have to decide what to save, where to save, and in what form.
&lt;/p&gt;

&lt;p&gt;
Once you start saving data outside the org-file, it becomes less portable, or more tricky to move the file because you need to also move all the data files to keep it intact. I have explored a concept of making an org-archive in the past, where you get a list of all files linked in the org-file, but this so far has just been worked out for some small proof of concept ideas.
&lt;/p&gt;

&lt;p&gt;
Not all languages are the same in org-mode. They do not all support sessions for example, and they may not all work like the examples here. The scimax iPython modifications do not behave like the examples above. That is probably due to bugs I have inadvertently introduced, and in the future I will try to make it work like emacs-lisp does above.
&lt;/p&gt;

&lt;p&gt;
Overall, org-mode has one of the most flexible and powerful systems for passing and reusing data in documents I have ever seen. It is not perfect, and in such a powerful system there are many unexplored or lightly traveled corners that may have hazards in them. It still seems pretty promising though.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2019 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2019/02/12/Using-results-from-one-code-block-in-another-org-mode.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.2.1&lt;/p&gt;]]></content:encoded>
    </item>
    <item>
      <title>2018 in a nutshell for the Kitchin Research Group</title>
      <link>http://jkitchin.github.io/blog/2018/12/31/2018-in-a-nutshell-for-the-Kitchin-Research-Group</link>
      <pubDate>Mon, 31 Dec 2018 15:17:32 EST</pubDate>
      <category><![CDATA[news]]></category>
      <guid isPermaLink="false">rRVwqNhv2iK5JJ3Xr1qdIwWrDqI=</guid>
      <description>2018 in a nutshell for the Kitchin Research Group</description>
      <content:encoded><![CDATA[


&lt;div id="table-of-contents"&gt;
&lt;h2&gt;Table of Contents&lt;/h2&gt;
&lt;div id="text-table-of-contents"&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#orgbd65150"&gt;1. An all new research group&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf1eb546"&gt;2. Publications&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org6dc4f47"&gt;3. New courses&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgf521ee8"&gt;4. Emacs, org-mode and scimax&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orge03ea8f"&gt;5. Online activity&lt;/a&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="#org189de38"&gt;5.1. kitchingroup.cheme.cmu.edu&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#orgc1d2765"&gt;5.2. Github&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org08ef442"&gt;5.3. YouTube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="#org552c652"&gt;5.4. Twitter&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;a href="#org9d4a3c6"&gt;6. Summary and outlook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;
The majority of this year was spent finishing my sabbatical in the Google Accelerated Science Research group. I finished that up in August, and have returned to Pittsburgh now. I spent that time learning about differentiable programming and machine learning applications in science and engineering. It was a great learning year for me, and the beginning of some new research directions.
&lt;/p&gt;

&lt;p&gt;
It wasn't all work, I was able to bike over 3000 miles while we lived in California, spent lots of weekends at beaches, state parks, San Francisco, and many other beautiful places. There is a lot I miss from my sabbatical, but I am mostly glad to be back home.
&lt;/p&gt;

&lt;div id="outline-container-orgbd65150" class="outline-2"&gt;
&lt;h2 id="orgbd65150"&gt;&lt;span class="section-number-2"&gt;1&lt;/span&gt; An all new research group&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-1"&gt;
&lt;p&gt;
In 2017, the last of my students finished, and my group shrunk temporarily to zero for a semester. That luckily coincided with the beginning of my sabbatical, which allowed me to focus exclusively on starting new research directions. Towards the end of last year, three new PhD students joined my group. I did not take any new PhD students this year, but several new MS students joined the group at the end of 2018:
&lt;/p&gt;

&lt;ol class="org-ol"&gt;
&lt;li&gt;Siddhant Lambor (co-advised with Prof. Lynn Walker)&lt;/li&gt;
&lt;li&gt;Gautham Swaminathan (co-advised with Prof. Lynn Walker)&lt;/li&gt;
&lt;li&gt;Siddarth Achar&lt;/li&gt;
&lt;li&gt;Senhong Liu&lt;/li&gt;
&lt;li&gt;Dingqi Nai&lt;/li&gt;
&lt;li&gt;Qiong Wang&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;
These students will all work on some aspect of machine learning in formulation research, design of experiments, and molecular simulation. It should be an exciting year!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf1eb546" class="outline-2"&gt;
&lt;h2 id="orgf1eb546"&gt;&lt;span class="section-number-2"&gt;2&lt;/span&gt; Publications&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-2"&gt;
&lt;p&gt;
2018 was a light year on publications, largely due to my group shrinking to zero, and being on sabbatical.  I wrote a nice perspective article on machine learning in catalysis:
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;a class='org-ref-reference' href="#kitchin-2018-machin-learn-catal"&gt;kitchin-2018-machin-learn-catal&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;This perspective article describes how machine learning is being used in catalysis research and opportunities for further research.&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;
And several publications from past M.S. students got finished and published:
&lt;/p&gt;

&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;a class='org-ref-reference' href="#thirumalai-2018-inves-react"&gt;thirumalai-2018-inves-react&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;This paper shows that many single atom alloys have unique electronic structure features that are responsible for their special catalytic properties.&lt;/dd&gt;
&lt;dt&gt;&lt;a class='org-ref-reference' href="#gao-2018-model-pallad"&gt;gao-2018-model-pallad&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;We used DFT calculations to build a neural network potential to model adatom diffusion on a metal surface.&lt;/dd&gt;
&lt;dt&gt;&lt;a class='org-ref-reference' href="#wang-2018-densit-funct"&gt;wang-2018-densit-funct&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;We used DFT calculations to build a neural network potential to model zirconia polymorphs, oxygen vacancy formation and diffusion.&lt;/dd&gt;
&lt;/dl&gt;


&lt;p&gt;
This was technically published in 2017, but it was &lt;a href="https://twitter.com/JPhysCM/status/1078217723790921728"&gt;the most cited article in J. Phys.: Cond. Matt. in 2018&lt;/a&gt;!
&lt;/p&gt;


&lt;dl class="org-dl"&gt;
&lt;dt&gt;&lt;a class='org-ref-reference' href="#larsen-2017-atomic-simul"&gt;larsen-2017-atomic-simul&lt;/a&gt;&lt;/dt&gt;&lt;dd&gt;This is a modern update on the Atomic Simulation Environment Python software. We have been using and contributing to this software for about 15 years now!&lt;/dd&gt;
&lt;/dl&gt;

&lt;p&gt;
Citations on our past work continue to grow.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-30-12-2018-time-09-13-15.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
&lt;h1 class='org-ref-bib-h1'&gt;Bibliography&lt;/h1&gt;
&lt;ul class='org-ref-bib'&gt;&lt;li&gt;&lt;a id="kitchin-2018-machin-learn-catal"&gt;[kitchin-2018-machin-learn-catal]&lt;/a&gt; &lt;a name="kitchin-2018-machin-learn-catal"&gt;&lt;/a&gt;John Kitchin, Machine Learning in Catalysis, &lt;i&gt;Nature Catalysis&lt;/i&gt;, &lt;b&gt;1(4)&lt;/b&gt;, 230-232 (2018). &lt;a href="https://doi.org/10.1038/s41929-018-0056-y"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1038/s41929-018-0056-y"&gt;doi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a id="thirumalai-2018-inves-react"&gt;[thirumalai-2018-inves-react]&lt;/a&gt; &lt;a name="thirumalai-2018-inves-react"&gt;&lt;/a&gt;Hari Thirumalai &amp; John Kitchin, Investigating the Reactivity of Single Atom Alloys Using  Density Functional Theory, &lt;i&gt;Topics in Catalysis&lt;/i&gt;, &lt;b&gt;61(5-6)&lt;/b&gt;, 462-474 (2018). &lt;a href="https://doi.org/10.1007/s11244-018-0899-0"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1007/s11244-018-0899-0"&gt;doi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a id="gao-2018-model-pallad"&gt;[gao-2018-model-pallad]&lt;/a&gt; &lt;a name="gao-2018-model-pallad"&gt;&lt;/a&gt;Tianyu Gao &amp; John Kitchin, Modeling Palladium Surfaces With Density Functional Theory,  Neural Networks and Molecular Dynamics, &lt;i&gt;Catalysis Today&lt;/i&gt;, &lt;b&gt;312&lt;/b&gt;, 132-140 (2018). &lt;a href="https://doi.org/10.1016/j.cattod.2018.03.045"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1016/j.cattod.2018.03.045"&gt;doi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a id="wang-2018-densit-funct"&gt;[wang-2018-densit-funct]&lt;/a&gt; &lt;a name="wang-2018-densit-funct"&gt;&lt;/a&gt;Chen Wang, Akshay Tharval &amp; John Kitchin, A Density Functional Theory Parameterised Neural Network Model  of Zirconia, &lt;i&gt;Molecular Simulation&lt;/i&gt;, &lt;b&gt;44(8)&lt;/b&gt;, 623-630 (2018). &lt;a href="https://doi.org/10.1080/08927022.2017.1420185"&gt;link&lt;/a&gt;. &lt;a href="http://dx.doi.org/10.1080/08927022.2017.1420185"&gt;doi&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a id="larsen-2017-atomic-simul"&gt;[larsen-2017-atomic-simul]&lt;/a&gt; &lt;a name="larsen-2017-atomic-simul"&gt;&lt;/a&gt;Ask Hjorth Larsen, Jens J\orgen Mortensen, Jakob, Blomqvist, Ivano E Castelli, Rune Christensen, , Marcin DuÅ‚ak, Jesper Friis, Michael N Groves, , Bj\ork Hammer, Cory Hargus, Eric D Hermes, Paul C, Jennings, Peter Bjerre Jensen, James Kermode, John, R Kitchin, Esben Leonhard Kolsbjerg, Joseph Kubal, , Kristen Kaasbjerg, Steen Lysgaard, J\'on Bergmann, Maronsson, Tristan Maxson, Thomas Olsen, Lars, Pastewka, Andrew Peterson, Carsten Rostgaard, Jakob, Schi\otz, Ole Sch\"utt, Mikkel Strange, Kristian, S Thygesen, Tejs Vegge, Lasse Vilhelmsen, Michael, Walter, Zhenhua Zeng &amp; Karsten W Jacobsen, The Atomic Simulation Environment-A Python Library for Working  With Atoms, &lt;i&gt;Journal of Physics: Condensed Matter&lt;/i&gt;, &lt;b&gt;29(27)&lt;/b&gt;, 273002 (2017). &lt;a href="http://stacks.iop.org/0953-8984/29/i=27/a=273002"&gt;link&lt;/a&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org6dc4f47" class="outline-2"&gt;
&lt;h2 id="org6dc4f47"&gt;&lt;span class="section-number-2"&gt;3&lt;/span&gt; New courses&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-3"&gt;
&lt;p&gt;
On my return from my sabbatical, I taught a new course for me, 06-623 Mathematical modeling of chemical engineering processes. I taught this course in Python, and it was a tour of mathematical and scientific programming that started with &lt;code class="src src-ipython"&gt;&lt;span style="color: #036A07;"&gt;"Hello world"&lt;/span&gt;&lt;/code&gt; 'Hello world' and ended with machine learning. We traveled through differential equations, nonlinear algebra, optimization, and regression along the way using numpy and scipy. It was a fun class, and I look forward to teaching it again next Fall. You can see the course notes at &lt;a href="https://github.com/jkitchin/f18-06623"&gt;https://github.com/jkitchin/f18-06623&lt;/a&gt;. I ran this course using Jupyter notebooks (of course I wrote the notes in org-mode and used the jupyter notebook exporter I wrote to make these!) and Box.com. It worked, but wasn't my favorite. I will try to go back to Emacs+org-mode for this next year.
&lt;/p&gt;

&lt;p&gt;
This coming spring will be another new course: our junior Transport Lab course.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orgf521ee8" class="outline-2"&gt;
&lt;h2 id="orgf521ee8"&gt;&lt;span class="section-number-2"&gt;4&lt;/span&gt; Emacs, org-mode and scimax&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-4"&gt;
&lt;p&gt;
org-ref has been downloaded close to 40K times! I thought it &lt;a href="https://twitter.com/johnkitchin/status/1072555130850041856"&gt;passed 40K&lt;/a&gt; early in December, but MELPA shows it with just under 40K today. They switched servers recently, so maybe some statistics were lost. If you count the Melpa-stable downloads, it is still over 40K. There are now over 50 contributors to org-ref besides me! That is pretty awesome, and hopefully speaks to the number of people interested in using Emacs for scientific publishing.
&lt;/p&gt;

&lt;p&gt;
This fall I picked up scimax development again after my sabbatical break, and have a few notable improvements I will launch in 2019. These include:
&lt;/p&gt;

&lt;ul class="org-ul"&gt;
&lt;li&gt;Many improvements to ipython in scimax:
&lt;ul class="org-ul"&gt;
&lt;li&gt;Code completion&lt;/li&gt;
&lt;li&gt;Inspection&lt;/li&gt;
&lt;li&gt;More jupyter-like features (?, ??) and key-bindings&lt;/li&gt;
&lt;li&gt;export to Jupyter notebooks&lt;/li&gt;
&lt;li&gt;src-block keymaps&lt;/li&gt;
&lt;li&gt;and more.&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;A new editmarks package that will allow persistent comments, highlights, and track-change mode.&lt;/li&gt;
&lt;li&gt;Improved support for literate programming in org-mode including jump to the definition in org-mode.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;
Scimax is an increasingly important project to me, and in 2019 I am going to work on some ways that will make it easier for me to spend more time on it in the future.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-orge03ea8f" class="outline-2"&gt;
&lt;h2 id="orge03ea8f"&gt;&lt;span class="section-number-2"&gt;5&lt;/span&gt; Online activity&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-5"&gt;
&lt;/div&gt;
&lt;div id="outline-container-org189de38" class="outline-3"&gt;
&lt;h3 id="org189de38"&gt;&lt;span class="section-number-3"&gt;5.1&lt;/span&gt; kitchingroup.cheme.cmu.edu&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-1"&gt;
&lt;p&gt;
Since I was on sabbatical, it was a low volume blogging year with only 22 posts. Traffic to the blog was up nonetheless from the last year. I suspect I will blog more this year.
&lt;/p&gt;


&lt;p&gt;
&lt;img src="/media/date-30-12-2018-time-09-25-34.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;



&lt;div id="outline-container-orgc1d2765" class="outline-3"&gt;
&lt;h3 id="orgc1d2765"&gt;&lt;span class="section-number-3"&gt;5.2&lt;/span&gt; Github&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-2"&gt;
&lt;p&gt;
I was even less active in 2018 than in 2017 on GitHub activity. You can see it picked back up this past fall as I returned to my day job as a professor. I expect 2019 will pick back up as usual.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-30-12-2018-time-09-26-11.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org08ef442" class="outline-3"&gt;
&lt;h3 id="org08ef442"&gt;&lt;span class="section-number-3"&gt;5.3&lt;/span&gt; YouTube&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-3"&gt;
&lt;p&gt;
Our &lt;a href="https://studio.youtube.com/channel/UCQp2VLAOlvq142YN3JO3y8w/analytics/tab-overview/period-year?utm_campaign=upgrade&amp;amp;utm_medium=redirect&amp;amp;utm_source=/analytics"&gt;YouTube traffic&lt;/a&gt; is down this year compared to last year. It is still always interesting to see the spikes in traffic on the org-mode is awesome video. Maybe it got mentioned on Hacker News or something. I only made one video last year; I took a break while on sabbatical, and was busy this fall with a new course. Maybe 2019 will be a better year for that. I have some plans for new videos in the new year on ipython, and some updates in scimax.
&lt;/p&gt;

&lt;p&gt;
&lt;img src="/media/date-30-12-2018-time-09-28-26.png"&gt; 
&lt;/p&gt;

&lt;p&gt;
We did cross 1000 subscribers this year. That doesn't qualify my channel for monetization yet, you also need 4000 watch hours in the past year. Last year we only had 1466 hours, so not that close yet. Why am I interested in this? I am actively looking for ways to support scimax development, and this could be one way to do that.
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div id="outline-container-org552c652" class="outline-3"&gt;
&lt;h3 id="org552c652"&gt;&lt;span class="section-number-3"&gt;5.4&lt;/span&gt; Twitter&lt;/h3&gt;
&lt;div class="outline-text-3" id="text-5-4"&gt;
&lt;p&gt;
It wasn't super easy to get all the Twitter data, I had to manually download the information from each month. Now that I have it, I did some analysis, so here it is. First we look at how many tweets, likes, retweets, etc. there were last year:
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; csv
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; glob

&lt;span style="color: #BA36A5;"&gt;tweets&lt;/span&gt; = 0
&lt;span style="color: #BA36A5;"&gt;impressions&lt;/span&gt; = 0
&lt;span style="color: #BA36A5;"&gt;texts&lt;/span&gt; = []
&lt;span style="color: #BA36A5;"&gt;times&lt;/span&gt; = [] &lt;span style="color: #8D8D84;"&gt;# &lt;/span&gt;&lt;span style="color: #8D8D84; font-style: italic;"&gt;times of the tweets&lt;/span&gt;
&lt;span style="color: #BA36A5;"&gt;likes&lt;/span&gt; = 0
&lt;span style="color: #BA36A5;"&gt;retweets&lt;/span&gt; = 0
&lt;span style="color: #BA36A5;"&gt;replies&lt;/span&gt; = 0

&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; csvfile &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; glob.glob(&lt;span style="color: #008000;"&gt;'*.csv'&lt;/span&gt;):
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;with&lt;/span&gt; &lt;span style="color: #006FE0;"&gt;open&lt;/span&gt;(csvfile) &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; f:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;reader&lt;/span&gt; = csv.DictReader(f)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; row &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; reader:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;tweets&lt;/span&gt; += 1
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;impressions&lt;/span&gt; += &lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(row[&lt;span style="color: #008000;"&gt;'impressions'&lt;/span&gt;])
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;texts&lt;/span&gt; += [row[&lt;span style="color: #008000;"&gt;'Tweet text'&lt;/span&gt;]]
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;times&lt;/span&gt; += [row[&lt;span style="color: #008000;"&gt;'time'&lt;/span&gt;]]
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;likes&lt;/span&gt; += &lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(row[&lt;span style="color: #008000;"&gt;'likes'&lt;/span&gt;])
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;replies&lt;/span&gt; += &lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(row[&lt;span style="color: #008000;"&gt;'replies'&lt;/span&gt;])
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;retweets&lt;/span&gt; += &lt;span style="color: #006FE0;"&gt;float&lt;/span&gt;(row[&lt;span style="color: #008000;"&gt;'retweets'&lt;/span&gt;])

&lt;span style="color: #0000FF;"&gt;print&lt;/span&gt;(f&lt;span style="color: #008000;"&gt;'''{tweets} Tweets with {int(impressions)} impressions.&lt;/span&gt;
&lt;span style="color: #008000;"&gt;There were {int(likes)} likes, {int(retweets)} retweets, and {int(replies)} replies.'''&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
471 Tweets with 282655 impressions.
There were 1089 likes, 220 retweets, and 341 replies.
&lt;/p&gt;

&lt;p&gt;
Next, we look at the time distribution of these tweets. It seems like this should be easier to do (it probably is in Pandas).
&lt;/p&gt;

&lt;div class="org-src-container"&gt;
&lt;pre class="src src-ipython"&gt;&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; datetime
&lt;span style="color: #0000FF;"&gt;import&lt;/span&gt; numpy &lt;span style="color: #0000FF;"&gt;as&lt;/span&gt; np

&lt;span style="color: #BA36A5;"&gt;x&lt;/span&gt; = np.array([datetime.datetime.strptime(time[0:-6], &lt;span style="color: #008000;"&gt;"%Y-%m-%d %H:%M"&lt;/span&gt;)
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt; &lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; time &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; times])

&lt;span style="color: #BA36A5;"&gt;months&lt;/span&gt; = np.zeros(12)
&lt;span style="color: #0000FF;"&gt;for&lt;/span&gt; time &lt;span style="color: #0000FF;"&gt;in&lt;/span&gt; x:
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #BA36A5;"&gt;months&lt;/span&gt;[time.month - 1] += 1

plt.bar(np.arange(12), months)
plt.xticks(np.arange(12), [&lt;span style="color: #008000;"&gt;'January'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'February'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'March'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #008000;"&gt;'April'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'May'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'June'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #008000;"&gt;'July'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'August'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'September'&lt;/span&gt;,
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  &lt;span style="color: #008000;"&gt;'October'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'November'&lt;/span&gt;, &lt;span style="color: #008000;"&gt;'December'&lt;/span&gt;],
&lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;   &lt;span style="color: #9B9B9B; background-color: #EDEDED;"&gt; &lt;/span&gt;  rotation=45);
plt.ylabel(&lt;span style="color: #008000;"&gt;'Tweet count'&lt;/span&gt;)
&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;
&lt;img src="/media/cdc7d711087c709e77a3f6d76ca7f635-2070zAJ.png"&gt; 
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div id="outline-container-org9d4a3c6" class="outline-2"&gt;
&lt;h2 id="org9d4a3c6"&gt;&lt;span class="section-number-2"&gt;6&lt;/span&gt; Summary and outlook&lt;/h2&gt;
&lt;div class="outline-text-2" id="text-6"&gt;
&lt;p&gt;
2018 was a pretty good year. I took a break from several things I have spent a lot of time in the past and learned some new things I spend my time on now. I am looking forward to getting back to some of the old things, especially scimax development. I still think it is a key component of modern scientific research and publishing, and that it has an important role in education. Stay tuned!
&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;p&gt;Copyright (C) 2018 by John Kitchin. See the &lt;a href="/copying.html"&gt;License&lt;/a&gt; for information about copying.&lt;p&gt;
&lt;p&gt;&lt;a href="/org/2018/12/31/2018-in-a-nutshell-for-the-Kitchin-Research-Group.org"&gt;org-mode source&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Org-mode version = 9.1.14&lt;/p&gt;]]></content:encoded>
    </item>
  </channel>
</rss>
